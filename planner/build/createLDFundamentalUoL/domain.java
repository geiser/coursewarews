package createLDFundamentalUoL;
import com.gamalocus.jshop2rt.*;

public class domain extends Domain
{
	private static final long serialVersionUID = 6618343807511949899L;


	/**
	 * Operator #-1 for primitive task !!addInWorldState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator0 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!addInWorldState
	 */
		public Operator0(Domain owner)
		{
			super(owner, new Predicate(0, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(0, 1));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!addInWorldState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !!removeFromWorldState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator1 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!removeFromWorldState
	 */
		public Operator1(Domain owner)
		{
			super(owner, new Predicate(1, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[1];
			delIn[0] = new DelAddAtomic(new Predicate(0, 1));

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!removeFromWorldState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator2 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator2(Domain owner)
		{
			super(owner, new Predicate(2, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator3 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator3(Domain owner)
		{
			super(owner, new Predicate(2, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(2)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator4 extends Operator
{
	/**
	 * Operator #-1 for primitive task !endLDElement
	 */
		public Operator4(Domain owner)
		{
			super(owner, new Predicate(3, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition117 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition117(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(5), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(60, 18, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition118 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition118(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 18, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition119 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition119(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(11), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition120 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition120(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition121 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition121(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(14), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(15), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(16), TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #7 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition122 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition122(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(17), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #7 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator5 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator5(Domain owner)
		{
			super(owner, new Predicate(2, 18, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), TermList.NIL)))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms0 = {
			new Predicate(44, 18, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(8), TermList.NIL))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(8), TermList.NIL))), unifier), atoms0);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[9];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms1 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(3), TermList.NIL))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms1);
		// Add list of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms2 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(187) /*hasGoal*/, new TermList(owner.getTermVariable(10), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(188) /*hasCompetency*/, new TermList(owner.getTermVariable(11), TermList.NIL)))) };
			addIn[1] = new DelAddForAll(new Precondition118(owner, unifier), atoms2);
		// Add list of DelAddElement #3 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms3 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(12), TermList.NIL)))) };
			addIn[2] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier), atoms3);
		// Add list of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms4 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(11), TermList.NIL)))) };
			addIn[3] = new DelAddForAll(new Precondition119(owner, unifier), atoms4);
		// Add list of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms5 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(9), TermList.NIL)))) };
			addIn[4] = new DelAddForAll(new Precondition120(owner, unifier), atoms5);
		// Add list of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms6 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(14), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(15), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(16), TermList.NIL)), TermList.NIL)))) };
			addIn[5] = new DelAddForAll(new Precondition121(owner, unifier), atoms6);
		// Add list of DelAddElement #7 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms7 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(17), TermList.NIL)))) };
			addIn[6] = new DelAddForAll(new Precondition122(owner, unifier), atoms7);
		// Add list of DelAddElement #8 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms8 = {
			new Predicate(45, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(15) /*isPartOf*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			addIn[7] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier), atoms8);
			addIn[8] = new DelAddAtomic(new Predicate(44, 18, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(3), TermList.NIL))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition117(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition123 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition123(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(7), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 8);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(60, 21, new TermList(owner.getTermVariable(9), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition124 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition124(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 21, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition125 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition125(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(13), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition126 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition126(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(11), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition127 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition127(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(16), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(17), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(18), TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator6 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator6(Domain owner)
		{
			super(owner, new Predicate(2, 21, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL)))))), TermList.NIL)))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms9 = {
			new Predicate(44, 21, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(10), TermList.NIL))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(10), TermList.NIL))), unifier), atoms9);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[11];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms10 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(3), TermList.NIL))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms10);
		// Add list of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms11 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(187) /*hasGoal*/, new TermList(owner.getTermVariable(12), TermList.NIL)))),
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(188) /*hasCompetency*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			addIn[1] = new DelAddForAll(new Precondition124(owner, unifier), atoms11);
		// Add list of DelAddElement #3 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms12 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(14), TermList.NIL)))) };
			addIn[2] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier), atoms12);
		// Add list of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms13 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			addIn[3] = new DelAddForAll(new Precondition125(owner, unifier), atoms13);
		// Add list of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms14 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(11), TermList.NIL)))) };
			addIn[4] = new DelAddForAll(new Precondition126(owner, unifier), atoms14);
		// Add list of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms15 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(16), TermList.NIL)))),
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(17), TermList.NIL)))),
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))),
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(18), TermList.NIL)), TermList.NIL)))) };
			addIn[5] = new DelAddForAll(new Precondition127(owner, unifier), atoms15);
		// Add list of DelAddElement #7 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms16 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(101) /*hasSkill*/, new TermList(owner.getTermVariable(19), TermList.NIL)))) };
			addIn[6] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier), atoms16);
		// Add list of DelAddElement #8 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms17 = {
			new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(195) /*hasAttitude*/, new TermList(owner.getTermVariable(20), TermList.NIL)))) };
			addIn[7] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(20), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier), atoms17);
			addIn[8] = new DelAddAtomic(new Predicate(46, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL)))));
		// Add list of DelAddElement #10 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms18 = {
			new Predicate(45, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(15) /*isPartOf*/, new TermList(owner.getTermVariable(15), TermList.NIL)))) };
			addIn[9] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier), atoms18);
			addIn[10] = new DelAddAtomic(new Predicate(44, 21, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(3), TermList.NIL))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition123(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition128 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition128(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(196) /*hasIndGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #2 of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition129 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition129(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(3, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(46, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(115) /*hasCompetencyLevel*/, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #2 of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #3 of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition130 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition130(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #3 of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition131 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition131(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(3, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(3, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(71, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(197) /*hasGoalStage*/, TermList.NIL)))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator7 extends Operator
{
	/**
	 * Operator #-1 for primitive task !endLDElement
	 */
		public Operator7(Domain owner)
		{
			super(owner, new Predicate(3, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[4];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms19 = {
			new Predicate(46, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(196) /*hasIndGoal*/, new TermList(owner.getTermVariable(7), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms19);
		// Delete list of DelAddElement #2 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms20 = {
			new Predicate(46, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(115) /*hasCompetencyLevel*/, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))) };
			delIn[1] = new DelAddForAll(new Precondition129(owner, unifier), atoms20);
		// Delete list of DelAddElement #3 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms21 = {
			new Predicate(46, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(13), TermList.NIL)))),
			new Predicate(46, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(14), TermList.NIL)))),
			new Predicate(46, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(15), TermList.NIL)))),
			new Predicate(46, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(16), TermList.NIL)))) };
			delIn[2] = new DelAddForAll(new Precondition130(owner, unifier), atoms21);
		// Delete list of DelAddElement #4 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms22 = {
			new Predicate(44, 19, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(17), TermList.NIL))) };
			delIn[3] = new DelAddForAll(new PreconditionAtomic(new Predicate(44, 19, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(17), TermList.NIL))), unifier), atoms22);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[2];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms23 = {
			new Predicate(46, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(115) /*hasCompetencyLevel*/, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition131(owner, unifier), atoms23);
		// Add list of DelAddElement #2 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms24 = {
			new Predicate(44, 19, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(18), TermList.NIL))) };
			addIn[1] = new DelAddForAll(new PreconditionAtomic(new Predicate(45, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(15) /*isPartOf*/, new TermList(owner.getTermVariable(18), TermList.NIL)))), unifier), atoms24);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition128(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition132 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition132(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 5, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(196) /*hasIndGoal*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeIndGoals [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator8 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeIndGoals
	 */
		public Operator8(Domain owner)
		{
			super(owner, new Predicate(4, 5, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeIndGoals
		unifier = new Term[5];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;

		Predicate[] atoms25 = {
			new Predicate(46, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(196) /*hasIndGoal*/, new TermList(owner.getTermVariable(3), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms25);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeIndGoals
		unifier = new Term[5];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;

		Predicate[] atoms26 = {
			new Predicate(46, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(196) /*hasIndGoal*/, new TermList(owner.getTermVariable(4), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier), atoms26);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition132(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCurrentLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator9 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCurrentLDElement
	 */
		public Operator9(Domain owner)
		{
			super(owner, new Predicate(5, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCurrentLDElement
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms27 = {
			new Predicate(44, 4, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(2), TermList.NIL))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), atoms27);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeCurrentLDElement
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms28 = {
			new Predicate(44, 4, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, new TermList(owner.getTermVariable(3), TermList.NIL))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier), atoms28);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCurrentLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(60, 4, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition133 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition133(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(60, 6, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition134 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition134(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition135 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition135(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator10 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeLearningResourceType
	 */
		public Operator10(Domain owner)
		{
			super(owner, new Predicate(6, 6, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
		unifier = new Term[6];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;

		Predicate[] atoms29 = {
			new Predicate(46, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(4), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition134(owner, unifier), atoms29);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
		unifier = new Term[6];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;

		Predicate[] atoms30 = {
			new Predicate(46, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition135(owner, unifier), atoms30);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition133(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition136 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition136(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeFundCompetency
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator11 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeFundCompetency
	 */
		public Operator11(Domain owner)
		{
			super(owner, new Predicate(7, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms31 = {
			new Predicate(46, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(3), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition136(owner, unifier), atoms31);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms32 = {
			new Predicate(46, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, new TermList(owner.getTermVariable(0), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), atoms32);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeFundCompetency [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(60, 4, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !addUserToGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator12 extends Operator
{
	/**
	 * Operator #-1 for primitive task !addUserToGroup
	 */
		public Operator12(Domain owner)
		{
			super(owner, new Predicate(8, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(198) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !addUserToGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNegation(new PreconditionAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(198) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier), 2)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !removeUserFromGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator13 extends Operator
{
	/**
	 * Operator #-1 for primitive task !removeUserFromGroup
	 */
		public Operator13(Domain owner)
		{
			super(owner, new Predicate(9, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[1];
			delIn[0] = new DelAddAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(198) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !removeUserFromGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(198) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !addUserToRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator14 extends Operator
{
	/**
	 * Operator #-1 for primitive task !addUserToRole
	 */
		public Operator14(Domain owner)
		{
			super(owner, new Predicate(10, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(199) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !addUserToRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNegation(new PreconditionAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(199) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier), 2)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !removeUserFromRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator15 extends Operator
{
	/**
	 * Operator #-1 for primitive task !removeUserFromRole
	 */
		public Operator15(Domain owner)
		{
			super(owner, new Predicate(11, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[1];
			delIn[0] = new DelAddAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(199) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !removeUserFromRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(199) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition137 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition137(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 9, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 9, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(68, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition138 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition138(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator16 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator16(Domain owner)
		{
			super(owner, new Predicate(12, 9, new TermList(TermList.NIL, TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[9];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;

		Predicate[] atoms33 = {
			new Predicate(46, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(5), TermList.NIL)))),
			new Predicate(46, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(6), TermList.NIL)))),
			new Predicate(46, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(7), TermList.NIL)))),
			new Predicate(46, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(8), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition138(owner, unifier), atoms33);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition137(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition139 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition139(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 10, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 10, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(68, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition140 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition140(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator17 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator17(Domain owner)
		{
			super(owner, new Predicate(12, 10, new TermList(new TermList(owner.getTermConstant(200) /*independent*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[10];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;

		Predicate[] atoms34 = {
			new Predicate(46, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(6), TermList.NIL)))),
			new Predicate(46, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(7), TermList.NIL)))),
			new Predicate(46, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(8), TermList.NIL)))),
			new Predicate(46, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(9), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition140(owner, unifier), atoms34);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition139(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition141 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition141(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 16, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 16, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 16, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 16, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(68, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition142 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition142(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition143 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition143(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(4, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 16, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(3, 16, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(13), TermList.NIL))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator18 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator18(Domain owner)
		{
			super(owner, new Predicate(12, 16, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[16];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;

		Predicate[] atoms35 = {
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(7), TermList.NIL)))),
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(8), TermList.NIL)))),
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(9), TermList.NIL)))),
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(10), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition142(owner, unifier), atoms35);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[16];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;

		Predicate[] atoms36 = {
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(0), TermList.NIL)))),
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(12), TermList.NIL)))),
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL)))),
			new Predicate(46, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(15), TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition143(owner, unifier), atoms36);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition141(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition144 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition144(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(61, 18, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(68, 18, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition145 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition145(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition146 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition146(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator19 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator19(Domain owner)
		{
			super(owner, new Predicate(12, 18, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms37 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(10), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(11), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(12), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition145(owner, unifier), atoms37);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms38 = {
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(190) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(14), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(191) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(15), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(192) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(16), TermList.NIL)))),
			new Predicate(46, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(193) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(17), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition146(owner, unifier), atoms38);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition144(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !text
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator20 extends Operator
{
	/**
	 * Operator #-1 for primitive task !text
	 */
		public Operator20(Domain owner)
		{
			super(owner, new Predicate(13, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !text [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(3)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !insertElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator21 extends Operator
{
	/**
	 * Operator #-1 for primitive task !insertElement
	 */
		public Operator21(Domain owner)
		{
			super(owner, new Predicate(14, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !insertElement
		unifier = new Term[3];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;

		Predicate[] atoms39 = {
			new Predicate(46, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(201) /*hasBeenSeen*/, new TermList(owner.getTermVariable(2), TermList.NIL)))),
			new Predicate(46, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(106) /*hasAlreadySeen*/, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(107) /*true*/, TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), atoms39);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !insertElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(3)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !insertResource
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition147 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition147(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 4, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !insertResource [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !insertResource
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator22 extends Operator
{
	/**
	 * Operator #-1 for primitive task !insertResource
	 */
		public Operator22(Domain owner)
		{
			super(owner, new Predicate(15, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(202, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !insertResource [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition147(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition149 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition149(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator23 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
	 */
		public Operator23(Domain owner)
		{
			super(owner, new Predicate(16, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms40 = {
			new Predicate(46, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(201) /*hasBeenSeen*/, new TermList(owner.getTermVariable(3), TermList.NIL)))),
			new Predicate(46, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(106) /*hasAlreadySeen*/, new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(107) /*true*/, TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition149(owner, unifier), atoms40);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(4)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Method -1 for compound task startLDElement!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method0 extends Method
	{
	/**
	 * Method -1 for compound task startLDElement!
	 */
		public Method0(Domain owner)
		{
			super(owner, new Predicate(0, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(4, 7, new TermList(owner.getTermVariable(6), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task startLDElement! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(159, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method0Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method1 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToGroup
	 */
		public Method1(Domain owner)
		{
			super(owner, new Predicate(1, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method1Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method2 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToGroup
	 */
		public Method2(Domain owner)
		{
			super(owner, new Predicate(1, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(1, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method2Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method3 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromGroup
	 */
		public Method3(Domain owner)
		{
			super(owner, new Predicate(2, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method3Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method4 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromGroup
	 */
		public Method4(Domain owner)
		{
			super(owner, new Predicate(2, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(9, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method4Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method5 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToRole
	 */
		public Method5(Domain owner)
		{
			super(owner, new Predicate(3, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method5Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method6 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToRole
	 */
		public Method6(Domain owner)
		{
			super(owner, new Predicate(3, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(10, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method6Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method7 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromRole
	 */
		public Method7(Domain owner)
		{
			super(owner, new Predicate(4, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method7Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method8 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromRole
	 */
		public Method8(Domain owner)
		{
			super(owner, new Predicate(4, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(11, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(4, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method8Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task insertResourceOnce
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition148 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition148(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 5, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[3] = new PreconditionNegation(new PreconditionAtomic(new Predicate(202, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(203) /*hasType*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(204) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task insertResourceOnce [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task insertResourceOnce
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method9 extends Method
	{
	/**
	 * Method -1 for compound task insertResourceOnce
	 */
		public Method9(Domain owner)
		{
			super(owner, new Predicate(5, 5, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = TaskList.empty;

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(15, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(205) /*type*/, new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(206) /*href*/, new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task insertResourceOnce [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition148(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(5)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method9Branch0";
				case 1: return "Method9Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method10 extends Method
	{
	/**
	 * Method -1 for compound task createLDILEventConditions
	 */
		public Method10(Domain owner)
		{
			super(owner, new Predicate(7, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(6, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDILEventConditions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method10Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method11 extends Method
	{
	/**
	 * Method -1 for compound task createLDILEventConditions
	 */
		public Method11(Domain owner)
		{
			super(owner, new Predicate(7, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDILEventConditions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method11Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDILEventConditions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method12 extends Method
	{
	/**
	 * Method -1 for compound task createLDILEventConditions!
	 */
		public Method12(Domain owner)
		{
			super(owner, new Predicate(6, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 1, new TermList(owner.getTermConstant(207) /*conditions*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 1, new TermList(new TermList(owner.getTermConstant(208) /*ILEvent*/, new TermList(owner.getTermConstant(209) /*Conditions*/, TermList.NIL)), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(9, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 1, new TermList(owner.getTermConstant(207) /*conditions*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDILEventConditions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method12Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition150 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition150(Domain owner, Term[] unifier)
		{
			p = new Precondition[15];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 12, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 12, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(199) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(48, 12, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(210) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(211) /*Instructional*/, TermList.NIL)), TermList.NIL))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(68, 12, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(199) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(48, 12, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(210) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(212) /*Learning*/, TermList.NIL)), TermList.NIL))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(111, 12, new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(60, 12, new TermList(owner.getTermVariable(9), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(213) /*ILEventItem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(211) /*Instructional*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(214) /*Item*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(8))))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(111, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(60, 12, new TermList(owner.getTermVariable(11), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(213) /*ILEventItem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(212) /*Learning*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(214) /*Item*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(10))))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(5), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(7), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(9), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(11), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[15][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[14] == null)
			{
				boolean b13changed = false;
				while (b[13] == null)
				{
					boolean b12changed = false;
					while (b[12] == null)
					{
						boolean b11changed = false;
						while (b[11] == null)
						{
							boolean b10changed = false;
							while (b[10] == null)
							{
								boolean b9changed = false;
								while (b[9] == null)
								{
									boolean b8changed = false;
									while (b[8] == null)
									{
										boolean b7changed = false;
										while (b[7] == null)
										{
											boolean b6changed = false;
											while (b[6] == null)
											{
												boolean b5changed = false;
												while (b[5] == null)
												{
													boolean b4changed = false;
													while (b[4] == null)
													{
														boolean b3changed = false;
														while (b[3] == null)
														{
															boolean b2changed = false;
															while (b[2] == null)
															{
																boolean b1changed = false;
																while (b[1] == null)
																{
																	b[1] = p[1].nextBinding(state);
																	if (b[1] == null)
																		return null;
																	else
																		bestMatch = Math.max(bestMatch, 1);
																	b1changed = true;
																}
																if ( b1changed ) {
																	p[2].reset(state);
																	p[2].bind(Term.merge(b, 2));
																}
																b[2] = p[2].nextBinding(state);
																if (b[2] == null)
																	b[1] = null;
																else
																	bestMatch = Math.max(bestMatch, 2);
																b2changed = true;
															}
															if ( b2changed ) {
																p[3].reset(state);
																p[3].bind(Term.merge(b, 3));
															}
															b[3] = p[3].nextBinding(state);
															if (b[3] == null)
																b[2] = null;
															else
																bestMatch = Math.max(bestMatch, 3);
															b3changed = true;
														}
														if ( b3changed ) {
															p[4].reset(state);
															p[4].bind(Term.merge(b, 4));
														}
														b[4] = p[4].nextBinding(state);
														if (b[4] == null)
															b[3] = null;
														else
															bestMatch = Math.max(bestMatch, 4);
														b4changed = true;
													}
													if ( b4changed ) {
														p[5].reset(state);
														p[5].bind(Term.merge(b, 5));
													}
													b[5] = p[5].nextBinding(state);
													if (b[5] == null)
														b[4] = null;
													else
														bestMatch = Math.max(bestMatch, 5);
													b5changed = true;
												}
												if ( b5changed ) {
													p[6].reset(state);
													p[6].bind(Term.merge(b, 6));
												}
												b[6] = p[6].nextBinding(state);
												if (b[6] == null)
													b[5] = null;
												else
													bestMatch = Math.max(bestMatch, 6);
												b6changed = true;
											}
											if ( b6changed ) {
												p[7].reset(state);
												p[7].bind(Term.merge(b, 7));
											}
											b[7] = p[7].nextBinding(state);
											if (b[7] == null)
												b[6] = null;
											else
												bestMatch = Math.max(bestMatch, 7);
											b7changed = true;
										}
										if ( b7changed ) {
											p[8].reset(state);
											p[8].bind(Term.merge(b, 8));
										}
										b[8] = p[8].nextBinding(state);
										if (b[8] == null)
											b[7] = null;
										else
											bestMatch = Math.max(bestMatch, 8);
										b8changed = true;
									}
									if ( b8changed ) {
										p[9].reset(state);
										p[9].bind(Term.merge(b, 9));
									}
									b[9] = p[9].nextBinding(state);
									if (b[9] == null)
										b[8] = null;
									else
										bestMatch = Math.max(bestMatch, 9);
									b9changed = true;
								}
								if ( b9changed ) {
									p[10].reset(state);
									p[10].bind(Term.merge(b, 10));
								}
								b[10] = p[10].nextBinding(state);
								if (b[10] == null)
									b[9] = null;
								else
									bestMatch = Math.max(bestMatch, 10);
								b10changed = true;
							}
							if ( b10changed ) {
								p[11].reset(state);
								p[11].bind(Term.merge(b, 11));
							}
							b[11] = p[11].nextBinding(state);
							if (b[11] == null)
								b[10] = null;
							else
								bestMatch = Math.max(bestMatch, 11);
							b11changed = true;
						}
						if ( b11changed ) {
							p[12].reset(state);
							p[12].bind(Term.merge(b, 12));
						}
						b[12] = p[12].nextBinding(state);
						if (b[12] == null)
							b[11] = null;
						else
							bestMatch = Math.max(bestMatch, 12);
						b12changed = true;
					}
					if ( b12changed ) {
						p[13].reset(state);
						p[13].bind(Term.merge(b, 13));
					}
					b[13] = p[13].nextBinding(state);
					if (b[13] == null)
						b[12] = null;
					else
						bestMatch = Math.max(bestMatch, 13);
					b13changed = true;
				}
				if ( b13changed ) {
					p[14].reset(state);
					p[14].bind(Term.merge(b, 14));
				}
				b[14] = p[14].nextBinding(state);
				if (b[14] == null)
					b[13] = null;
				else
					bestMatch = Math.max(bestMatch, 14);
			}

			Term[] retVal = Term.merge(b, 15);
			b[14] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createILEventConditions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method13 extends Method
	{
	/**
	 * Method -1 for compound task createILEventConditions
	 */
		public Method13(Domain owner)
		{
			super(owner, new Predicate(9, 12, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(24, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(215) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(10, 12, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(215) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(216) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(217) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(9), TermList.NIL)), false, false));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(217) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(218) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[8] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(11), TermList.NIL)), false, false));
			retVal.subtasks[9] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(218) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[10] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(216) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[11] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(219) /*else*/, TermList.NIL)), false, true));
			retVal.subtasks[12] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(215) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[13] = new TaskList(new TaskAtom(new Predicate(10, 12, new TermList(owner.getTermVariable(7), TermList.NIL)), false, false));
			retVal.subtasks[14] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(215) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[15] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(216) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[16] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(217) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[17] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(11), TermList.NIL)), false, false));
			retVal.subtasks[18] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(217) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[19] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(218) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[20] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(9), TermList.NIL)), false, false));
			retVal.subtasks[21] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(218) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[22] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(216) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[23] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(219) /*else*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createILEventConditions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition150(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method13Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeLDMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition151 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition151(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[2] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(1), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeLDMemberOfRole [unknown source pos]";
		}
	}

	/**
	 * Precondition #1 of Method -1 for compound task distributeLDMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition152 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition152(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[2] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(1), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.equal, "StdLib.equal"), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #1 of Method -1 for compound task distributeLDMemberOfRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeLDMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method14 extends Method
	{
	/**
	 * Method -1 for compound task distributeLDMemberOfRole
	 */
		public Method14(Domain owner)
		{
			super(owner, new Predicate(10, 2, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(220) /*_or*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(220) /*_or*/, TermList.NIL)), false, true));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeLDMemberOfRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition151(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition152(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method14Branch0";
				case 1: return "Method14Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method15 extends Method
	{
	/**
	 * Method -1 for compound task distributeMemberOfRole
	 */
		public Method15(Domain owner)
		{
			super(owner, new Predicate(12, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeMemberOfRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method15Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method16 extends Method
	{
	/**
	 * Method -1 for compound task distributeMemberOfRole
	 */
		public Method16(Domain owner)
		{
			super(owner, new Predicate(12, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(221) /*is-member-of-role*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(221) /*is-member-of-role*/, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(12, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeMemberOfRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method16Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItemRef
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method17 extends Method
	{
	/**
	 * Method -1 for compound task distributeItemRef
	 */
		public Method17(Domain owner)
		{
			super(owner, new Predicate(11, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItemRef [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method17Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItemRef
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method18 extends Method
	{
	/**
	 * Method -1 for compound task distributeItemRef
	 */
		public Method18(Domain owner)
		{
			super(owner, new Predicate(11, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(223) /*item-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(223) /*item-ref*/, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(11, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItemRef [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method18Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDConferenceService
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method19 extends Method
	{
	/**
	 * Method -1 for compound task createLDConferenceService
	 */
		public Method19(Domain owner)
		{
			super(owner, new Predicate(14, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(224) /*service*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(new TermCall(new List(owner.getTermConstant(226) /*serv*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(227) /*isvisible*/, new TermList(owner.getTermConstant(107) /*true*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(224) /*service*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDConferenceService [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method19Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createConferenceService
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition153 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition153(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(48, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(228) /*hasPersonality*/, new TermList(owner.getTermConstant(229) /*introversion*/, TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createConferenceService [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createConferenceService
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method20 extends Method
	{
	/**
	 * Method -1 for compound task createConferenceService
	 */
		public Method20(Domain owner)
		{
			super(owner, new Predicate(13, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(15, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(16, 6, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createConferenceService [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition153(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(6)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method20Branch0";
				case 1: return "Method20Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAsynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition154 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition154(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(111, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(230) /*Service*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(203) /*hasType*/, new TermList(owner.getTermConstant(231) /*asynchronous*/, TermList.NIL))), owner.getTermVariable(4)))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAsynchronousConference [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAsynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method21 extends Method
	{
	/**
	 * Method -1 for compound task createLDAsynchronousConference
	 */
		public Method21(Domain owner)
		{
			super(owner, new Predicate(15, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 6, new TermList(owner.getTermConstant(232) /*conference*/, new TermList(new TermList(new TermList(owner.getTermConstant(233) /*conference-type*/, new TermList(owner.getTermConstant(231) /*asynchronous*/, TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 6, new TermList(new TermList(owner.getTermConstant(234) /*Asynchronous*/, new TermList(owner.getTermConstant(235) /*Conference*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(17, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(18, 6, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 6, new TermList(owner.getTermConstant(232) /*conference*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAsynchronousConference [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition154(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method21Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDSynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition155 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition155(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(111, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(230) /*Service*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(203) /*hasType*/, new TermList(owner.getTermConstant(236) /*synchronous*/, TermList.NIL))), owner.getTermVariable(4)))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDSynchronousConference [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDSynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method22 extends Method
	{
	/**
	 * Method -1 for compound task createLDSynchronousConference
	 */
		public Method22(Domain owner)
		{
			super(owner, new Predicate(16, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 6, new TermList(owner.getTermConstant(232) /*conference*/, new TermList(new TermList(new TermList(owner.getTermConstant(233) /*conference-type*/, new TermList(owner.getTermConstant(236) /*synchronous*/, TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 6, new TermList(new TermList(owner.getTermConstant(237) /*Synchronous*/, new TermList(owner.getTermConstant(235) /*Conference*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(17, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(18, 6, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 6, new TermList(owner.getTermConstant(232) /*conference*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSynchronousConference [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition155(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method22Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition156 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition156(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 10, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(2, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(198) /*hasGroup*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(48, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(238) /*Group*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(68, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(199) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(48, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(210) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(239) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[8] = new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), ((domain)owner).calculateUnion, "((domain)owner).calculateUnion"), unifier, 9);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createConference [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method23 extends Method
	{
	/**
	 * Method -1 for compound task createConference
	 */
		public Method23(Domain owner)
		{
			super(owner, new Predicate(17, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(19, 10, new TermList(owner.getTermVariable(9), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createConference [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition156(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method23Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeParticipants
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method24 extends Method
	{
	/**
	 * Method -1 for compound task distributeParticipants
	 */
		public Method24(Domain owner)
		{
			super(owner, new Predicate(19, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeParticipants [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method24Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeParticipants
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method25 extends Method
	{
	/**
	 * Method -1 for compound task distributeParticipants
	 */
		public Method25(Domain owner)
		{
			super(owner, new Predicate(19, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(240) /*participant*/, new TermList(new TermList(new TermList(owner.getTermConstant(241) /*role-ref*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(240) /*participant*/, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(19, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeParticipants [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method25Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method26 extends Method
	{
	/**
	 * Method -1 for compound task createLDEnvironment
	 */
		public Method26(Domain owner)
		{
			super(owner, new Predicate(21, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(243) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(245) /*Environment*/, TermList.NIL), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(245) /*Environment*/, TermList.NIL), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(243) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(242) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method26Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method27 extends Method
	{
	/**
	 * Method -1 for compound task createEnvironment
	 */
		public Method27(Domain owner)
		{
			super(owner, new Predicate(20, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(22, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(14, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method27Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method28 extends Method
	{
	/**
	 * Method -1 for compound task createLDGroup
	 */
		public Method28(Domain owner)
		{
			super(owner, new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(23, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method28Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDGroup!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition157 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition157(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(61, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(68, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(198) /*hasGroup*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(111, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(189) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(48, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(238) /*Group*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(198) /*hasGroup*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDGroup! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDGroup!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method29 extends Method
	{
	/**
	 * Method -1 for compound task createLDGroup!
	 */
		public Method29(Domain owner)
		{
			super(owner, new Predicate(23, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(241) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(241) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDGroup! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition157(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method29Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition158 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition158(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(246) /*group*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDGroup [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method30 extends Method
	{
	/**
	 * Method -1 for compound task createLDGroup
	 */
		public Method30(Domain owner)
		{
			super(owner, new Predicate(24, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(241) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(247) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(238) /*Group*/, TermList.NIL), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(238) /*Group*/, TermList.NIL), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(25, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(247) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(241) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition158(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method30Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method31 extends Method
	{
	/**
	 * Method -1 for compound task createGroup
	 */
		public Method31(Domain owner)
		{
			super(owner, new Predicate(25, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(1, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method31Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method32 extends Method
	{
	/**
	 * Method -1 for compound task createLDInformation
	 */
		public Method32(Domain owner)
		{
			super(owner, new Predicate(27, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(248) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(248) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method32Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method33 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem
	 */
		public Method33(Domain owner)
		{
			super(owner, new Predicate(18, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(28, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method33Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method34 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem!
	 */
		public Method34(Domain owner)
		{
			super(owner, new Predicate(28, 2, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(250) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(new TermCall(new List(owner.getTermConstant(250) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(251) /*identifierref*/, new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 2, new TermList(new TermList(owner.getTermConstant(252) /*Resource*/, TermList.NIL), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(5, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(250) /*item*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(71, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(249) /*hasResource*/, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method34Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method35 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem
	 */
		public Method35(Domain owner)
		{
			super(owner, new Predicate(18, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 1, new TermList(owner.getTermConstant(253) /*fall-back*/, new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method35Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method36 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method36(Domain owner)
		{
			super(owner, new Predicate(26, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method36Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method37 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method37(Domain owner)
		{
			super(owner, new Predicate(26, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method37Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method38 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem
	 */
		public Method38(Domain owner)
		{
			super(owner, new Predicate(18, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(250) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(new TermCall(new List(owner.getTermConstant(250) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(251) /*identifierref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(252) /*Resource*/, TermList.NIL), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(14, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(5, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(250) /*item*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(71, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(249) /*hasResource*/, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method38Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method39 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method39(Domain owner)
		{
			super(owner, new Predicate(26, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method39Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method40 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method40(Domain owner)
		{
			super(owner, new Predicate(26, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method40Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDInstructItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition159 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition159(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(249) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(250) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDInstructItem [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDInstructItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method41 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstructItem
	 */
		public Method41(Domain owner)
		{
			super(owner, new Predicate(29, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(250) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(251) /*identifierref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(213) /*ILEventItem*/, new TermList(owner.getTermConstant(211) /*Instructional*/, new TermList(owner.getTermConstant(214) /*Item*/, TermList.NIL))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(211) /*Instructional*/, new TermList(owner.getTermConstant(214) /*Item*/, TermList.NIL)), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(5, 4, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(250) /*item*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstructItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition159(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method41Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLearningItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition160 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition160(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(249) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(250) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLearningItem [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLearningItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method42 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningItem
	 */
		public Method42(Domain owner)
		{
			super(owner, new Predicate(30, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(250) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(251) /*identifierref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(213) /*ILEventItem*/, new TermList(owner.getTermConstant(212) /*Learning*/, new TermList(owner.getTermConstant(214) /*Item*/, TermList.NIL))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(212) /*Learning*/, new TermList(owner.getTermConstant(214) /*Item*/, TermList.NIL)), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(5, 4, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(250) /*item*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition160(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method42Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method43 extends Method
	{
	/**
	 * Method -1 for compound task distributeLearningObject
	 */
		public Method43(Domain owner)
		{
			super(owner, new Predicate(22, 0, new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method43Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method44 extends Method
	{
	/**
	 * Method -1 for compound task distributeLearningObject
	 */
		public Method44(Domain owner)
		{
			super(owner, new Predicate(22, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(31, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(22, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method44Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method45 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningObject
	 */
		public Method45(Domain owner)
		{
			super(owner, new Predicate(31, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(32, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method45Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLearningObject!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition161 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition161(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 6, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(73, 6, new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(16) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(254) /*LearningObject*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(188) /*hasCompetency*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 6, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLearningObject! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLearningObject!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method46 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningObject!
	 */
		public Method46(Domain owner)
		{
			super(owner, new Predicate(32, 6, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(16, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningObject! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition161(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method46Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method47 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningObject
	 */
		public Method47(Domain owner)
		{
			super(owner, new Predicate(31, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(256) /*learning-object*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(254) /*LearningObject*/, TermList.NIL), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(254) /*LearningObject*/, TermList.NIL), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(33, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(256) /*learning-object*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(255) /*lo*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method47Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition162 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition162(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(73, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(20) /*isVariantOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(120) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(155) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLearningObject [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method48 extends Method
	{
	/**
	 * Method -1 for compound task createLearningObject
	 */
		public Method48(Domain owner)
		{
			super(owner, new Predicate(33, 5, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition162(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method48Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition164 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition164(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(145, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(258, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDTitle [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method49 extends Method
	{
	/**
	 * Method -1 for compound task createLDTitle
	 */
		public Method49(Domain owner)
		{
			super(owner, new Predicate(8, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(259) /*title*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(259) /*title*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDTitle [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition164(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method49Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition165 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition165(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(145, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(258, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(258, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDTitle [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method50 extends Method
	{
	/**
	 * Method -1 for compound task createLDTitle
	 */
		public Method50(Domain owner)
		{
			super(owner, new Predicate(8, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 6, new TermList(owner.getTermConstant(259) /*title*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 6, new TermList(owner.getTermConstant(259) /*title*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDTitle [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition165(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method50Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition166 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition166(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(145, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(258, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(258, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDTitle [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method51 extends Method
	{
	/**
	 * Method -1 for compound task createLDTitle
	 */
		public Method51(Domain owner)
		{
			super(owner, new Predicate(8, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermConstant(259) /*title*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(new TermCall(new List(new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 7, new TermList(owner.getTermConstant(259) /*title*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDTitle [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition166(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method51Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDConcludeGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method52 extends Method
	{
	/**
	 * Method -1 for compound task createLDConcludeGroupActivity
	 */
		public Method52(Domain owner)
		{
			super(owner, new Predicate(35, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(262) /*Conclude*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(262) /*Conclude*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(34, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDConcludeGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method52Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createConcludeGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method53 extends Method
	{
	/**
	 * Method -1 for compound task createConcludeGroupActivity
	 */
		public Method53(Domain owner)
		{
			super(owner, new Predicate(34, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(36, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createConcludeGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method53Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDevelopGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method54 extends Method
	{
	/**
	 * Method -1 for compound task createLDDevelopGroupActivity
	 */
		public Method54(Domain owner)
		{
			super(owner, new Predicate(38, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(264) /*Develop*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(264) /*Develop*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(37, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDevelopGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method54Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDevelopGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method55 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopGroupActivity
	 */
		public Method55(Domain owner)
		{
			super(owner, new Predicate(37, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(265) /*createLDDevelopSession*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method55Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIllustrateGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method56 extends Method
	{
	/**
	 * Method -1 for compound task createLDIllustrateGroupActivity
	 */
		public Method56(Domain owner)
		{
			super(owner, new Predicate(40, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(266) /*Illustrate*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(266) /*Illustrate*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(39, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIllustrateGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method56Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIllustrateGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method57 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateGroupActivity
	 */
		public Method57(Domain owner)
		{
			super(owner, new Predicate(39, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(41, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method57Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIntroductionGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method58 extends Method
	{
	/**
	 * Method -1 for compound task createLDIntroductionGroupActivity
	 */
		public Method58(Domain owner)
		{
			super(owner, new Predicate(43, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(267) /*Introduction*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*Introduction*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(42, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIntroductionGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method58Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIntroductionGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method59 extends Method
	{
	/**
	 * Method -1 for compound task createIntroductionGroupActivity
	 */
		public Method59(Domain owner)
		{
			super(owner, new Predicate(42, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIntroductionGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method59Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method60 extends Method
	{
	/**
	 * Method -1 for compound task createLDIntroductionSessions
	 */
		public Method60(Domain owner)
		{
			super(owner, new Predicate(44, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(269) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(270) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(271) /*structure-type*/, new TermList(owner.getTermConstant(272) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(267) /*Introduction*/, new TermList(owner.getTermConstant(273) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*Introduction*/, new TermList(owner.getTermConstant(273) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(45, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(270) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(269) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIntroductionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(268) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method60Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition167 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition167(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(48, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(228) /*hasPersonality*/, new TermList(new TermList(owner.getTermConstant(274) /*very-low*/, new TermList(owner.getTermConstant(141) /*low*/, new TermList(owner.getTermConstant(140) /*medium*/, TermList.NIL))), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIntroductionSessions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method61 extends Method
	{
	/**
	 * Method -1 for compound task createIntroductionSessions
	 */
		public Method61(Domain owner)
		{
			super(owner, new Predicate(45, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(46, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(47, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIntroductionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition167(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method61Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method62 extends Method
	{
	/**
	 * Method -1 for compound task createIntroductionSessions
	 */
		public Method62(Domain owner)
		{
			super(owner, new Predicate(45, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(47, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(41, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIntroductionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method62Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method63 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeGroupActivity
	 */
		public Method63(Domain owner)
		{
			super(owner, new Predicate(49, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(275) /*Practice*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(275) /*Practice*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(48, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method63Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method64 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeGroupActivity
	 */
		public Method64(Domain owner)
		{
			super(owner, new Predicate(48, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(50, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method64Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method65 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseGroupActivity
	 */
		public Method65(Domain owner)
		{
			super(owner, new Predicate(52, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(276) /*PracticeWithExercise*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(276) /*PracticeWithExercise*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(51, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method65Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method66 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseGroupActivity
	 */
		public Method66(Domain owner)
		{
			super(owner, new Predicate(51, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(53, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method66Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowConnectionsGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method67 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowConnectionsGroupActivity
	 */
		public Method67(Domain owner)
		{
			super(owner, new Predicate(55, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(277) /*ShowConnections*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(277) /*ShowConnections*/, new TermList(owner.getTermConstant(263) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(54, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(261) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowConnectionsGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(260) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method67Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowConnectionsGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition168 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition168(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(146, 9, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(149, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(60, 9, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(278) /*Fundamental*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(279) /*theorem*/, TermList.NIL))), new TermList(new TermList(owner.getTermConstant(45) /*relation*/, new TermList(owner.getTermConstant(19) /*inverseIsRequiredBy*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[7] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL)), ((domain)owner).calculateGetProduct, "((domain)owner).calculateGetProduct"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(12, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowConnectionsGroupActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowConnectionsGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method68 extends Method
	{
	/**
	 * Method -1 for compound task createShowConnectionsGroupActivity
	 */
		public Method68(Domain owner)
		{
			super(owner, new Predicate(54, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(56, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(8), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowConnectionsGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition168(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method68Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowConnectionsGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method69 extends Method
	{
	/**
	 * Method -1 for compound task createShowConnectionsGroupActivity
	 */
		public Method69(Domain owner)
		{
			super(owner, new Predicate(54, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(57, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowConnectionsGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method69Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowConnectionsByTheoremWithProofSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method70 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowConnectionsByTheoremWithProofSessions
	 */
		public Method70(Domain owner)
		{
			super(owner, new Predicate(56, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(269) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(270) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(271) /*structure-type*/, new TermList(owner.getTermConstant(272) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(280) /*ShowConnectionsByTheoremWithProof*/, new TermList(owner.getTermConstant(273) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(280) /*ShowConnectionsByTheoremWithProof*/, new TermList(owner.getTermConstant(273) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(58, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(270) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(269) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowConnectionsByTheoremWithProofSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(268) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method70Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowConnectionsByTheoremWithProofSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method71 extends Method
	{
	/**
	 * Method -1 for compound task createShowConnectionsByTheoremWithProofSessions
	 */
		public Method71(Domain owner)
		{
			super(owner, new Predicate(58, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(59, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowConnectionsByTheoremWithProofSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method71Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeShowTheoremWithProofSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method72 extends Method
	{
	/**
	 * Method -1 for compound task distributeShowTheoremWithProofSessions
	 */
		public Method72(Domain owner)
		{
			super(owner, new Predicate(59, 0, new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeShowTheoremWithProofSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method72Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeShowTheoremWithProofSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method73 extends Method
	{
	/**
	 * Method -1 for compound task distributeShowTheoremWithProofSessions
	 */
		public Method73(Domain owner)
		{
			super(owner, new Predicate(59, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(60, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(59, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeShowTheoremWithProofSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method73Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDevelopConnectionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method74 extends Method
	{
	/**
	 * Method -1 for compound task createLDDevelopConnectionSessions
	 */
		public Method74(Domain owner)
		{
			super(owner, new Predicate(60, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(281) /*ativity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(270) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(271) /*structure-type*/, new TermList(owner.getTermConstant(272) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(282) /*DevelopConnection*/, new TermList(owner.getTermConstant(273) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(61, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(270) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(269) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDevelopConnectionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method74Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDevelopConnectionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method75 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopConnectionSessions
	 */
		public Method75(Domain owner)
		{
			super(owner, new Predicate(61, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(62, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(41, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopConnectionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method75Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDConcludePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method76 extends Method
	{
	/**
	 * Method -1 for compound task createLDConcludePhase
	 */
		public Method76(Domain owner)
		{
			super(owner, new Predicate(64, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(262) /*Conclude*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(262) /*Conclude*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(63, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDConcludePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method76Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createConcludePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method77 extends Method
	{
	/**
	 * Method -1 for compound task createConcludePhase
	 */
		public Method77(Domain owner)
		{
			super(owner, new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(35, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createConcludePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method77Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDevelopPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method78 extends Method
	{
	/**
	 * Method -1 for compound task createLDDevelopPhase
	 */
		public Method78(Domain owner)
		{
			super(owner, new Predicate(66, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(264) /*Develop*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(264) /*Develop*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(65, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDevelopPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method78Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDevelopPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition169 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition169(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(146, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(149, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(122, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDevelopPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDevelopPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method79 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopPhase
	 */
		public Method79(Domain owner)
		{
			super(owner, new Predicate(65, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(67, 6, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition169(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method79Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeDevelopGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method80 extends Method
	{
	/**
	 * Method -1 for compound task distributeDevelopGroupActivityByLevels
	 */
		public Method80(Domain owner)
		{
			super(owner, new Predicate(67, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDevelopGroupActivityByLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method80Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeDevelopGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition170 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition170(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(124, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(8, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeDevelopGroupActivityByLevels [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeDevelopGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method81 extends Method
	{
	/**
	 * Method -1 for compound task distributeDevelopGroupActivityByLevels
	 */
		public Method81(Domain owner)
		{
			super(owner, new Predicate(67, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(38, 7, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(5), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(67, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDevelopGroupActivityByLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition170(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method81Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIllustratePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method82 extends Method
	{
	/**
	 * Method -1 for compound task createLDIllustratePhase
	 */
		public Method82(Domain owner)
		{
			super(owner, new Predicate(69, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(266) /*Illustrate*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(266) /*Illustrate*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(68, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIllustratePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method82Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIllustratePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition171 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition171(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(146, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(149, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(122, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIllustratePhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIllustratePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method83 extends Method
	{
	/**
	 * Method -1 for compound task createIllustratePhase
	 */
		public Method83(Domain owner)
		{
			super(owner, new Predicate(68, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(70, 6, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustratePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition171(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method83Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeIllustrateGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method84 extends Method
	{
	/**
	 * Method -1 for compound task distributeIllustrateGroupActivityByLevels
	 */
		public Method84(Domain owner)
		{
			super(owner, new Predicate(70, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeIllustrateGroupActivityByLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method84Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeIllustrateGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition172 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition172(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(124, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(8, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeIllustrateGroupActivityByLevels [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeIllustrateGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method85 extends Method
	{
	/**
	 * Method -1 for compound task distributeIllustrateGroupActivityByLevels
	 */
		public Method85(Domain owner)
		{
			super(owner, new Predicate(70, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(40, 7, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(5), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(70, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeIllustrateGroupActivityByLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition172(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method85Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIntroductionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method86 extends Method
	{
	/**
	 * Method -1 for compound task createLDIntroductionPhase
	 */
		public Method86(Domain owner)
		{
			super(owner, new Predicate(72, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(267) /*Introduction*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*Introduction*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(71, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIntroductionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method86Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIntroductionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition173 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition173(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(146, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(149, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(122, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIntroductionPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIntroductionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method87 extends Method
	{
	/**
	 * Method -1 for compound task createIntroductionPhase
	 */
		public Method87(Domain owner)
		{
			super(owner, new Predicate(71, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(73, 6, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIntroductionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition173(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method87Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeIntroductionGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method88 extends Method
	{
	/**
	 * Method -1 for compound task distributeIntroductionGroupActivityByLevels
	 */
		public Method88(Domain owner)
		{
			super(owner, new Predicate(73, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeIntroductionGroupActivityByLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method88Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeIntroductionGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition174 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition174(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(124, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(8, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeIntroductionGroupActivityByLevels [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeIntroductionGroupActivityByLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method89 extends Method
	{
	/**
	 * Method -1 for compound task distributeIntroductionGroupActivityByLevels
	 */
		public Method89(Domain owner)
		{
			super(owner, new Predicate(73, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(43, 7, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(5), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(73, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeIntroductionGroupActivityByLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition174(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method89Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method90 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticePhase
	 */
		public Method90(Domain owner)
		{
			super(owner, new Predicate(75, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(275) /*Practice*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(275) /*Practice*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(74, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method90Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method91 extends Method
	{
	/**
	 * Method -1 for compound task createPracticePhase
	 */
		public Method91(Domain owner)
		{
			super(owner, new Predicate(74, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(49, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method91Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExercisePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method92 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExercisePhase
	 */
		public Method92(Domain owner)
		{
			super(owner, new Predicate(77, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(275) /*Practice*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(275) /*Practice*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(76, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExercisePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method92Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPracticeWithExercisePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition175 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition175(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(159, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPracticeWithExercisePhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExercisePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method93 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExercisePhase
	 */
		public Method93(Domain owner)
		{
			super(owner, new Predicate(76, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(78, 4, new TermList(owner.getTermVariable(3), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExercisePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition175(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method93Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method94 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups
	 */
		public Method94(Domain owner)
		{
			super(owner, new Predicate(78, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method94Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition176 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition176(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(176, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(179, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method95 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups
	 */
		public Method95(Domain owner)
		{
			super(owner, new Predicate(78, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(52, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(78, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticeWithExerciseGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition176(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method95Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowConnectionsPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method96 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowConnectionsPhase
	 */
		public Method96(Domain owner)
		{
			super(owner, new Predicate(80, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(277) /*ShowConnections*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(277) /*ShowConnections*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(79, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(283) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowConnectionsPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(283) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method96Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowConnectionsPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method97 extends Method
	{
	/**
	 * Method -1 for compound task createShowConnectionsPhase
	 */
		public Method97(Domain owner)
		{
			super(owner, new Predicate(79, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(55, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowConnectionsPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method97Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition177 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition177(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(146, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(285) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFundamentalScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method98 extends Method
	{
	/**
	 * Method -1 for compound task createLDFundamentalScript
	 */
		public Method98(Domain owner)
		{
			super(owner, new Predicate(82, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(285) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(278) /*Fundamental*/, new TermList(owner.getTermConstant(286) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(7, 4, new TermList(owner.getTermVariable(2), TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(278) /*Fundamental*/, new TermList(owner.getTermConstant(286) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(81, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(285) /*play*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition177(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method98Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition178 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition178(Domain owner, Term[] unifier)
		{
			p = new Precondition[12];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(146, 14, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(149, 14, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(96, 14, new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(122, 14, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[7] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 14, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier), new PreconditionCall(new TermCall(new List(owner.getTermVariable(9), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier), 14);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(94, 14, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(95, 14, new TermList(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(86, 14, new TermList(owner.getTermVariable(12), new TermList(new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(11), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[11] = new PreconditionAssign(new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL), unifier, 13);
			b = new Term[12][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[11] == null)
			{
				boolean b10changed = false;
				while (b[10] == null)
				{
					boolean b9changed = false;
					while (b[9] == null)
					{
						boolean b8changed = false;
						while (b[8] == null)
						{
							boolean b7changed = false;
							while (b[7] == null)
							{
								boolean b6changed = false;
								while (b[6] == null)
								{
									boolean b5changed = false;
									while (b[5] == null)
									{
										boolean b4changed = false;
										while (b[4] == null)
										{
											boolean b3changed = false;
											while (b[3] == null)
											{
												boolean b2changed = false;
												while (b[2] == null)
												{
													boolean b1changed = false;
													while (b[1] == null)
													{
														b[1] = p[1].nextBinding(state);
														if (b[1] == null)
															return null;
														else
															bestMatch = Math.max(bestMatch, 1);
														b1changed = true;
													}
													if ( b1changed ) {
														p[2].reset(state);
														p[2].bind(Term.merge(b, 2));
													}
													b[2] = p[2].nextBinding(state);
													if (b[2] == null)
														b[1] = null;
													else
														bestMatch = Math.max(bestMatch, 2);
													b2changed = true;
												}
												if ( b2changed ) {
													p[3].reset(state);
													p[3].bind(Term.merge(b, 3));
												}
												b[3] = p[3].nextBinding(state);
												if (b[3] == null)
													b[2] = null;
												else
													bestMatch = Math.max(bestMatch, 3);
												b3changed = true;
											}
											if ( b3changed ) {
												p[4].reset(state);
												p[4].bind(Term.merge(b, 4));
											}
											b[4] = p[4].nextBinding(state);
											if (b[4] == null)
												b[3] = null;
											else
												bestMatch = Math.max(bestMatch, 4);
											b4changed = true;
										}
										if ( b4changed ) {
											p[5].reset(state);
											p[5].bind(Term.merge(b, 5));
										}
										b[5] = p[5].nextBinding(state);
										if (b[5] == null)
											b[4] = null;
										else
											bestMatch = Math.max(bestMatch, 5);
										b5changed = true;
									}
									if ( b5changed ) {
										p[6].reset(state);
										p[6].bind(Term.merge(b, 6));
									}
									b[6] = p[6].nextBinding(state);
									if (b[6] == null)
										b[5] = null;
									else
										bestMatch = Math.max(bestMatch, 6);
									b6changed = true;
								}
								if ( b6changed ) {
									p[7].reset(state);
									p[7].bind(Term.merge(b, 7));
								}
								b[7] = p[7].nextBinding(state);
								if (b[7] == null)
									b[6] = null;
								else
									bestMatch = Math.max(bestMatch, 7);
								b7changed = true;
							}
							if ( b7changed ) {
								p[8].reset(state);
								p[8].bind(Term.merge(b, 8));
							}
							b[8] = p[8].nextBinding(state);
							if (b[8] == null)
								b[7] = null;
							else
								bestMatch = Math.max(bestMatch, 8);
							b8changed = true;
						}
						if ( b8changed ) {
							p[9].reset(state);
							p[9].bind(Term.merge(b, 9));
						}
						b[9] = p[9].nextBinding(state);
						if (b[9] == null)
							b[8] = null;
						else
							bestMatch = Math.max(bestMatch, 9);
						b9changed = true;
					}
					if ( b9changed ) {
						p[10].reset(state);
						p[10].bind(Term.merge(b, 10));
					}
					b[10] = p[10].nextBinding(state);
					if (b[10] == null)
						b[9] = null;
					else
						bestMatch = Math.max(bestMatch, 10);
					b10changed = true;
				}
				if ( b10changed ) {
					p[11].reset(state);
					p[11].bind(Term.merge(b, 11));
				}
				b[11] = p[11].nextBinding(state);
				if (b[11] == null)
					b[10] = null;
				else
					bestMatch = Math.max(bestMatch, 11);
			}

			Term[] retVal = Term.merge(b, 12);
			b[11] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method99 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalScript
	 */
		public Method99(Domain owner)
		{
			super(owner, new Predicate(81, 14, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(66, 14, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 14, new TermList(new TermList(owner.getTermConstant(287) /*scenario-rehearse*/, new TermList(owner.getTermConstant(288) /*pgoals*/, new TermList(owner.getTermVariable(13), TermList.NIL))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition178(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "scenario-rehearse";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition182 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition182(Domain owner, Term[] unifier)
		{
			p = new Precondition[11];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(149, 10, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(96, 10, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[3] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(4.0), TermList.NIL)), StdLib.equal, "StdLib.equal"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(4.0), TermList.NIL)), StdLib.equal, "StdLib.equal"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(146, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(5, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(293, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermNumber(1.0), new TermList(new TermNumber(1.0), TermList.NIL)), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(5, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[10] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(9), new TermList(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[11][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[10] == null)
			{
				boolean b9changed = false;
				while (b[9] == null)
				{
					boolean b8changed = false;
					while (b[8] == null)
					{
						boolean b7changed = false;
						while (b[7] == null)
						{
							boolean b6changed = false;
							while (b[6] == null)
							{
								boolean b5changed = false;
								while (b[5] == null)
								{
									boolean b4changed = false;
									while (b[4] == null)
									{
										boolean b3changed = false;
										while (b[3] == null)
										{
											boolean b2changed = false;
											while (b[2] == null)
											{
												boolean b1changed = false;
												while (b[1] == null)
												{
													b[1] = p[1].nextBinding(state);
													if (b[1] == null)
														return null;
													else
														bestMatch = Math.max(bestMatch, 1);
													b1changed = true;
												}
												if ( b1changed ) {
													p[2].reset(state);
													p[2].bind(Term.merge(b, 2));
												}
												b[2] = p[2].nextBinding(state);
												if (b[2] == null)
													b[1] = null;
												else
													bestMatch = Math.max(bestMatch, 2);
												b2changed = true;
											}
											if ( b2changed ) {
												p[3].reset(state);
												p[3].bind(Term.merge(b, 3));
											}
											b[3] = p[3].nextBinding(state);
											if (b[3] == null)
												b[2] = null;
											else
												bestMatch = Math.max(bestMatch, 3);
											b3changed = true;
										}
										if ( b3changed ) {
											p[4].reset(state);
											p[4].bind(Term.merge(b, 4));
										}
										b[4] = p[4].nextBinding(state);
										if (b[4] == null)
											b[3] = null;
										else
											bestMatch = Math.max(bestMatch, 4);
										b4changed = true;
									}
									if ( b4changed ) {
										p[5].reset(state);
										p[5].bind(Term.merge(b, 5));
									}
									b[5] = p[5].nextBinding(state);
									if (b[5] == null)
										b[4] = null;
									else
										bestMatch = Math.max(bestMatch, 5);
									b5changed = true;
								}
								if ( b5changed ) {
									p[6].reset(state);
									p[6].bind(Term.merge(b, 6));
								}
								b[6] = p[6].nextBinding(state);
								if (b[6] == null)
									b[5] = null;
								else
									bestMatch = Math.max(bestMatch, 6);
								b6changed = true;
							}
							if ( b6changed ) {
								p[7].reset(state);
								p[7].bind(Term.merge(b, 7));
							}
							b[7] = p[7].nextBinding(state);
							if (b[7] == null)
								b[6] = null;
							else
								bestMatch = Math.max(bestMatch, 7);
							b7changed = true;
						}
						if ( b7changed ) {
							p[8].reset(state);
							p[8].bind(Term.merge(b, 8));
						}
						b[8] = p[8].nextBinding(state);
						if (b[8] == null)
							b[7] = null;
						else
							bestMatch = Math.max(bestMatch, 8);
						b8changed = true;
					}
					if ( b8changed ) {
						p[9].reset(state);
						p[9].bind(Term.merge(b, 9));
					}
					b[9] = p[9].nextBinding(state);
					if (b[9] == null)
						b[8] = null;
					else
						bestMatch = Math.max(bestMatch, 9);
					b9changed = true;
				}
				if ( b9changed ) {
					p[10].reset(state);
					p[10].bind(Term.merge(b, 10));
				}
				b[10] = p[10].nextBinding(state);
				if (b[10] == null)
					b[9] = null;
				else
					bestMatch = Math.max(bestMatch, 10);
			}

			Term[] retVal = Term.merge(b, 11);
			b[10] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method100 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalScript
	 */
		public Method100(Domain owner)
		{
			super(owner, new Predicate(81, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 10, new TermList(new TermList(owner.getTermConstant(294) /*scenario-guided-tour*/, new TermList(owner.getTermConstant(295) /*goals*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition182(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "scenario-guided-tour";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition183 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition183(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(149, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(96, 5, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[3] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(3.0), TermList.NIL)), StdLib.equal, "StdLib.equal"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(3.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method101 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalScript
	 */
		public Method101(Domain owner)
		{
			super(owner, new Predicate(81, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 5, new TermList(new TermList(owner.getTermConstant(296) /*scenario-discover*/, new TermList(owner.getTermConstant(295) /*goals*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition183(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "scenario-discover";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition186 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition186(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(298, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method102 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalScript
	 */
		public Method102(Domain owner)
		{
			super(owner, new Predicate(81, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(299) /*scenario-train*/, new TermList(owner.getTermConstant(300) /*igoals*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition186(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "scenario-train";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributePracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method103 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticePhase
	 */
		public Method103(Domain owner)
		{
			super(owner, new Predicate(83, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method103Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributePracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method104 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticePhase
	 */
		public Method104(Domain owner)
		{
			super(owner, new Predicate(83, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(75, 3, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(83, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method104Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPracticeWithExercisesScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition187 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition187(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(146, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(285) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPracticeWithExercisesScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExercisesScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method105 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExercisesScript
	 */
		public Method105(Domain owner)
		{
			super(owner, new Predicate(85, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(285) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(301) /*PracticeWithExercises*/, new TermList(owner.getTermConstant(286) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(301) /*PracticeWithExercises*/, new TermList(owner.getTermConstant(286) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(84, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(285) /*play*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExercisesScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition187(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method105Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExercisesScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method106 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExercisesScript
	 */
		public Method106(Domain owner)
		{
			super(owner, new Predicate(84, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(86, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExercisesScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method106Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #3 of Precondition #0 of Method -1 for compound task distributePracticeWithExercisePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition188 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition188(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(173, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition #0 of Method -1 for compound task distributePracticeWithExercisePhase [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributePracticeWithExercisePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition189 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition189(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(73, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(16) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(284) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(276) /*PracticeWithExercise*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition188(owner, unifier) /*Conjunct 4 of Precondition #0 of Method -1 for compound task distributePracticeWithExercisePhase*/;
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributePracticeWithExercisePhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributePracticeWithExercisePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method107 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticeWithExercisePhase
	 */
		public Method107(Domain owner)
		{
			super(owner, new Predicate(86, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = TaskList.empty;
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(77, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(86, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticeWithExercisePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition189(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(5)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method107Branch0";
				case 1: return "Method107Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition190 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition190(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(302) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(278) /*Fundamental*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(new TermCall(new List(owner.getTermConstant(303) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(249) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(204) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFundamentalUoL [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method108 extends Method
	{
	/**
	 * Method -1 for compound task createLDFundamentalUoL
	 */
		public Method108(Domain owner)
		{
			super(owner, new Predicate(88, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermConstant(304) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(305) /*uri*/, new TermList(owner.getTermVariable(6), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(306) /*level*/, new TermList(owner.getTermConstant(307) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(278) /*Fundamental*/, new TermList(owner.getTermConstant(302) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 7, new TermList(new TermList(owner.getTermConstant(278) /*Fundamental*/, new TermList(owner.getTermConstant(302) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermConstant(308) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(87, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 7, new TermList(owner.getTermConstant(308) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 7, new TermList(owner.getTermConstant(304) /*learning-design*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFundamentalUoL [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition190(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method108Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition191 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition191(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(145, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(104, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(18) /*isRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createFundamentalUoL [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method109 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalUoL
	 */
		public Method109(Domain owner)
		{
			super(owner, new Predicate(87, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(89, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalUoL [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition191(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method109Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method110 extends Method
	{
	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 */
		public Method110(Domain owner)
		{
			super(owner, new Predicate(89, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeFundamentalScriptByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method110Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeFundamentalScriptByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition192 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition192(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(165, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(170, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeFundamentalScriptByComps [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method111 extends Method
	{
	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 */
		public Method111(Domain owner)
		{
			super(owner, new Predicate(89, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(82, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(89, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeFundamentalScriptByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition192(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method111Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPracticeWithExercisesUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition193 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition193(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(194) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(195) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(302) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(301) /*PracticeWithExercises*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(303) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(249) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(204) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPracticeWithExercisesUoL [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExercisesUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method112 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExercisesUoL
	 */
		public Method112(Domain owner)
		{
			super(owner, new Predicate(50, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(9, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(309) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(222) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(304) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(305) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(306) /*level*/, new TermList(owner.getTermConstant(307) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(225) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(301) /*PracticeWithExercises*/, new TermList(owner.getTermConstant(302) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(6, 9, new TermList(new TermList(owner.getTermConstant(310) /*exercise*/, TermList.NIL), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(301) /*PracticeWithExercises*/, new TermList(owner.getTermConstant(302) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(308) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(90, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(308) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(304) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[8] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(309) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExercisesUoL [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition193(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method112Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExercisesUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method113 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExercisesUoL
	 */
		public Method113(Domain owner)
		{
			super(owner, new Predicate(90, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(85, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExercisesUoL [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method113Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom same
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom0 extends Axiom
{
	/**
	 * Branch -1 for axiom same
	 */
		public Axiom0(Domain owner)
		{
			super(owner, new Predicate(0, 1, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(0), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom same [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom0Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom different
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom1 extends Axiom
{
	/**
	 * Branch -1 for axiom different
	 */
		public Axiom1(Domain owner)
		{
			super(owner, new Predicate(1, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom different [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNegation(new PreconditionAtomic(new Predicate(0, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom1Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom first
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom2 extends Axiom
{
	/**
	 * Branch -1 for axiom first
	 */
		public Axiom2(Domain owner)
		{
			super(owner, new Predicate(2, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom first [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom2Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom last
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom3 extends Axiom
{
	/**
	 * Branch -1 for axiom last
	 */
		public Axiom3(Domain owner)
		{
			super(owner, new Predicate(3, 1, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom last [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom3Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom last
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom4 extends Axiom
{
	/**
	 * Branch -1 for axiom last
	 */
		public Axiom4(Domain owner)
		{
			super(owner, new Predicate(3, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom last [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(3, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom4Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom rest
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom5 extends Axiom
{
	/**
	 * Branch -1 for axiom rest
	 */
		public Axiom5(Domain owner)
		{
			super(owner, new Predicate(4, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(0)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom rest [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom5Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom length
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom6 extends Axiom
{
	/**
	 * Branch -1 for axiom length
	 */
		public Axiom6(Domain owner)
		{
			super(owner, new Predicate(5, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom length [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateLength, "((domain)owner).calculateLength"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom6Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom exist
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom7 extends Axiom
{
	/**
	 * Branch -1 for axiom exist
	 */
		public Axiom7(Domain owner)
		{
			super(owner, new Predicate(6, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom exist [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom7Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom exist
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom8 extends Axiom
{
	/**
	 * Branch -1 for axiom exist
	 */
		public Axiom8(Domain owner)
		{
			super(owner, new Predicate(6, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom exist [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom8Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom assignIterator
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom9 extends Axiom
{
	/**
	 * Branch -1 for axiom assignIterator
	 */
		public Axiom9(Domain owner)
		{
			super(owner, new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom assignIterator [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom9Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom assignIterator
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom10 extends Axiom
{
	/**
	 * Branch -1 for axiom assignIterator
	 */
		public Axiom10(Domain owner)
		{
			super(owner, new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom assignIterator [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom10Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom remove
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom11 extends Axiom
{
	/**
	 * Branch -1 for axiom remove
	 */
		public Axiom11(Domain owner)
		{
			super(owner, new Predicate(8, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom remove [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateRemove, "((domain)owner).calculateRemove"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom11Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom removeDuplicateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom12 extends Axiom
{
	/**
	 * Branch -1 for axiom removeDuplicateH
	 */
		public Axiom12(Domain owner)
		{
			super(owner, new Predicate(9, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom removeDuplicateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom12Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom removeDuplicateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition0 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition0(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(9, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom removeDuplicateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom removeDuplicateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom13 extends Axiom
{
	/**
	 * Branch -1 for axiom removeDuplicateH
	 */
		public Axiom13(Domain owner)
		{
			super(owner, new Predicate(9, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom removeDuplicateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition0(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(9, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom13Branch0";
				case 1: return "Axiom13Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom removeDuplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom14 extends Axiom
{
	/**
	 * Branch -1 for axiom removeDuplicate
	 */
		public Axiom14(Domain owner)
		{
			super(owner, new Predicate(10, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom removeDuplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(9, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom14Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom divide
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom15 extends Axiom
{
	/**
	 * Branch -1 for axiom divide
	 */
		public Axiom15(Domain owner)
		{
			super(owner, new Predicate(11, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom divide [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateDivideList, "((domain)owner).calculateDivideList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom15Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom16 extends Axiom
{
	/**
	 * Branch -1 for axiom duplicate
	 */
		public Axiom16(Domain owner)
		{
			super(owner, new Predicate(12, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom duplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(1), TermList.NIL)), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom16Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom17 extends Axiom
{
	/**
	 * Branch -1 for axiom duplicate
	 */
		public Axiom17(Domain owner)
		{
			super(owner, new Predicate(12, 1, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(owner.getTermVariable(0), new TermList(new TermNumber(1.0), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom duplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom17Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition1 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition1(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(12, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(new TermCall(new List(owner.getTermVariable(2), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom duplicate [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom18 extends Axiom
{
	/**
	 * Branch -1 for axiom duplicate
	 */
		public Axiom18(Domain owner)
		{
			super(owner, new Predicate(12, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom duplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition1(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom18Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublistH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom19 extends Axiom
{
	/**
	 * Branch -1 for axiom sublistH
	 */
		public Axiom19(Domain owner)
		{
			super(owner, new Predicate(13, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermNumber(0.0), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublistH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom19Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublistH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom20 extends Axiom
{
	/**
	 * Branch -1 for axiom sublistH
	 */
		public Axiom20(Domain owner)
		{
			super(owner, new Predicate(13, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublistH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom20Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublistH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom21 extends Axiom
{
	/**
	 * Branch -1 for axiom sublistH
	 */
		public Axiom21(Domain owner)
		{
			super(owner, new Predicate(13, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublistH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(13, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom21Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublist
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom22 extends Axiom
{
	/**
	 * Branch -1 for axiom sublist
	 */
		public Axiom22(Domain owner)
		{
			super(owner, new Predicate(14, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublist [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(13, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom22Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom inverseOf
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom23 extends Axiom
{
	/**
	 * Branch -1 for axiom inverseOf
	 */
		public Axiom23(Domain owner)
		{
			super(owner, new Predicate(17, 0, new TermList(owner.getTermConstant(15) /*isPartOf*/, new TermList(owner.getTermConstant(16) /*inverseIsPartOf*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom inverseOf [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom23Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom inverseOf
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom24 extends Axiom
{
	/**
	 * Branch -1 for axiom inverseOf
	 */
		public Axiom24(Domain owner)
		{
			super(owner, new Predicate(17, 0, new TermList(owner.getTermConstant(18) /*isRequiredBy*/, new TermList(owner.getTermConstant(19) /*inverseIsRequiredBy*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom inverseOf [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom24Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom inverseOf
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom25 extends Axiom
{
	/**
	 * Branch -1 for axiom inverseOf
	 */
		public Axiom25(Domain owner)
		{
			super(owner, new Predicate(17, 0, new TermList(owner.getTermConstant(20) /*isVariantOf*/, new TermList(owner.getTermConstant(21) /*inverseIsVariantOf*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom inverseOf [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom25Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom26 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom26(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(22) /*s0k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom26Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom27 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom27(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(24) /*s0k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom27Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom28 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom28(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(25) /*s0k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom28Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom29 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom29(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(26) /*s0k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom29Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom30 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom30(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(27) /*s1k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom30Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom31 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom31(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(28) /*s1k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom31Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom32 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom32(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(29) /*s1k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom32Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom33 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom33(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(30) /*s1k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom33Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom34 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom34(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(31) /*s2k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom34Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom35 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom35(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(32) /*s2k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom35Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom36 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom36(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(33) /*s2k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom36Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom37 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom37(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(34) /*s2k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom37Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom38 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom38(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(35) /*s3k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom38Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom39 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom39(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(36) /*s3k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom39Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom40 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom40(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(37) /*s3k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom40Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom41 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom41(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(38) /*s3k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom41Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom42 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom42(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(39) /*s4k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom42Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom43 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom43(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(40) /*s4k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom43Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom44 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom44(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(41) /*s4k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom44Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom45 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom45(Domain owner)
		{
			super(owner, new Predicate(23, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(42) /*s4k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom45Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom46 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom46(Domain owner)
		{
			super(owner, new Predicate(43, 1, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom46Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition2 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition2(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition3 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition3(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(3), new TermList(new TermCall(new List(owner.getTermVariable(0), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom47 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom47(Domain owner)
		{
			super(owner, new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition2(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition3(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom47Branch0";
				case 1: return "Axiom47Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition4 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition4(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition5 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition5(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom48 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom48(Domain owner)
		{
			super(owner, new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition4(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition5(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom48Branch0";
				case 1: return "Axiom48Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition6 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition6(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition7 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition7(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom49 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom49(Domain owner)
		{
			super(owner, new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(45) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition6(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition7(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom49Branch0";
				case 1: return "Axiom49Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition8 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition8(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition9 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition9(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom50 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom50(Domain owner)
		{
			super(owner, new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(45) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition8(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition9(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom50Branch0";
				case 1: return "Axiom50Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition10 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition10(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(23, 5, new TermList(owner.getTermVariable(2), TermList.NIL)), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition11 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition11(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(23, 5, new TermList(owner.getTermVariable(2), TermList.NIL)), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom51 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom51(Domain owner)
		{
			super(owner, new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition10(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition11(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom51Branch0";
				case 1: return "Axiom51Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition12 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition12(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition13 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition13(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom52 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom52(Domain owner)
		{
			super(owner, new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition12(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition13(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom52Branch0";
				case 1: return "Axiom52Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition14 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition14(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(23, 6, new TermList(owner.getTermVariable(3), TermList.NIL)), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition15 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition15(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(23, 6, new TermList(owner.getTermVariable(3), TermList.NIL)), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 6, new TermList(owner.getTermVariable(5), new TermList(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom53 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom53(Domain owner)
		{
			super(owner, new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), owner.getTermVariable(4)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition14(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition15(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom53Branch0";
				case 1: return "Axiom53Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition16 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition16(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition17 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition17(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom54 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom54(Domain owner)
		{
			super(owner, new Predicate(43, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), owner.getTermVariable(4)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition16(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition17(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom54Branch0";
				case 1: return "Axiom54Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterByQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom55 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQueryH
	 */
		public Axiom55(Domain owner)
		{
			super(owner, new Predicate(47, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom55Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterByQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition18 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition18(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(47, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterByQueryH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterByQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom56 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQueryH
	 */
		public Axiom56(Domain owner)
		{
			super(owner, new Predicate(47, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition18(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(47, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom56Branch0";
				case 1: return "Axiom56Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterByQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom57 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQuery
	 */
		public Axiom57(Domain owner)
		{
			super(owner, new Predicate(48, 1, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom57Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterByQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom58 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQuery
	 */
		public Axiom58(Domain owner)
		{
			super(owner, new Predicate(48, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(47, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom58Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom59 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 */
		public Axiom59(Domain owner)
		{
			super(owner, new Predicate(49, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom59Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition19 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition19(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(50, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(49, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom60 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 */
		public Axiom60(Domain owner)
		{
			super(owner, new Predicate(49, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition19(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom60Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition20 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition20(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(2), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition21 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition21(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(49, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(2)), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom61 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 */
		public Axiom61(Domain owner)
		{
			super(owner, new Predicate(49, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition20(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition21(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom61Branch0";
				case 1: return "Axiom61Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom62 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentState
	 */
		public Axiom62(Domain owner)
		{
			super(owner, new Predicate(50, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(49, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom62Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom63 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 */
		public Axiom63(Domain owner)
		{
			super(owner, new Predicate(51, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom63Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition22 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition22(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(52, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(51, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom64 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 */
		public Axiom64(Domain owner)
		{
			super(owner, new Predicate(51, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition22(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom64Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition23 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition23(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(46, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition24 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition24(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(46, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(51, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom65 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 */
		public Axiom65(Domain owner)
		{
			super(owner, new Predicate(51, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition23(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition24(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom65Branch0";
				case 1: return "Axiom65Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom66 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentState
	 */
		public Axiom66(Domain owner)
		{
			super(owner, new Predicate(52, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(51, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom66Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom67 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 */
		public Axiom67(Domain owner)
		{
			super(owner, new Predicate(53, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom67Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition25 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition25(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(54, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(53, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom68 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 */
		public Axiom68(Domain owner)
		{
			super(owner, new Predicate(53, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition25(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom68Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition26 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition26(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition27 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition27(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(53, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL)))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom69 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 */
		public Axiom69(Domain owner)
		{
			super(owner, new Predicate(53, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition26(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition27(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom69Branch0";
				case 1: return "Axiom69Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom70 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentState
	 */
		public Axiom70(Domain owner)
		{
			super(owner, new Predicate(54, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(53, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom70Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom71 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 */
		public Axiom71(Domain owner)
		{
			super(owner, new Predicate(55, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom71Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition28 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition28(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(56, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(55, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom72 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 */
		public Axiom72(Domain owner)
		{
			super(owner, new Predicate(55, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition28(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom72Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition29 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition29(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition30 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition30(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(55, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom73 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 */
		public Axiom73(Domain owner)
		{
			super(owner, new Predicate(55, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition29(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition30(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom73Branch0";
				case 1: return "Axiom73Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition31 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition31(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition32 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition32(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(57, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom74 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 */
		public Axiom74(Domain owner)
		{
			super(owner, new Predicate(57, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByInvRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition31(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition32(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom74Branch0";
				case 1: return "Axiom74Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition33 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition33(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(17, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(57, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom75 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentState
	 */
		public Axiom75(Domain owner)
		{
			super(owner, new Predicate(56, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition33(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(55, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom75Branch0";
				case 1: return "Axiom75Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom76 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom76(Domain owner)
		{
			super(owner, new Predicate(58, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(50, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom76Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom77 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom77(Domain owner)
		{
			super(owner, new Predicate(58, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(52, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom77Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom78 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom78(Domain owner)
		{
			super(owner, new Predicate(58, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(54, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom78Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom79 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom79(Domain owner)
		{
			super(owner, new Predicate(58, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(45) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(56, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom79Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition34 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition34(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(48, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom80 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentState
	 */
		public Axiom80(Domain owner)
		{
			super(owner, new Predicate(59, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition34(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom80Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElements
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition35 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition35(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(2), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateGetElements, "((domain)owner).calculateGetElements"), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElements [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElements
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom81 extends Axiom
{
	/**
	 * Branch -1 for axiom getElements
	 */
		public Axiom81(Domain owner)
		{
			super(owner, new Predicate(60, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElements [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition35(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom81Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition36 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition36(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(60, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom82 extends Axiom
{
	/**
	 * Branch -1 for axiom getElement
	 */
		public Axiom82(Domain owner)
		{
			super(owner, new Predicate(61, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition36(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom82Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTypesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom83 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesH
	 */
		public Axiom83(Domain owner)
		{
			super(owner, new Predicate(62, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom83Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTypesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition37 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition37(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(63, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(62, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTypesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTypesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom84 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesH
	 */
		public Axiom84(Domain owner)
		{
			super(owner, new Predicate(62, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition37(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom84Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTypes
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom85 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypes
	 */
		public Axiom85(Domain owner)
		{
			super(owner, new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypes [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(62, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom85Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition38 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition38(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(2), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getTypesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition39 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition39(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(64, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(2)), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getTypesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTypesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom86 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesFromCurrentStateH
	 */
		public Axiom86(Domain owner)
		{
			super(owner, new Predicate(64, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition38(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition39(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom86Branch0";
				case 1: return "Axiom86Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition40 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition40(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 3, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(2), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTypesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom87 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesFromCurrentState
	 */
		public Axiom87(Domain owner)
		{
			super(owner, new Predicate(65, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition40(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom87Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTypes
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom88 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypes
	 */
		public Axiom88(Domain owner)
		{
			super(owner, new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypes [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(65, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom88Branch0";
				case 1: return "Axiom88Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom89 extends Axiom
{
	/**
	 * Branch -1 for axiom getType
	 */
		public Axiom89(Domain owner)
		{
			super(owner, new Predicate(66, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(7, 2, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom89Branch0";
				case 1: return "Axiom89Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom90 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom90(Domain owner)
		{
			super(owner, new Predicate(67, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom90Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition41 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition41(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(68, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(67, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom91 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom91(Domain owner)
		{
			super(owner, new Predicate(67, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition41(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom91Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom92 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom92(Domain owner)
		{
			super(owner, new Predicate(68, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(67, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom92Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition42 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition42(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(46, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition43 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition43(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(46, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom93 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 */
		public Axiom93(Domain owner)
		{
			super(owner, new Predicate(69, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition42(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition43(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom93Branch0";
				case 1: return "Axiom93Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition44 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition44(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 4, new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom94 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 */
		public Axiom94(Domain owner)
		{
			super(owner, new Predicate(70, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition44(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom94Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom95 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom95(Domain owner)
		{
			super(owner, new Predicate(68, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(70, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom95Branch0";
				case 1: return "Axiom95Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValue
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom96 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValue
	 */
		public Axiom96(Domain owner)
		{
			super(owner, new Predicate(71, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValue [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(46, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom96Branch0";
				case 1: return "Axiom96Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom97 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom97(Domain owner)
		{
			super(owner, new Predicate(67, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom97Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition45 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition45(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(68, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(67, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom98 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom98(Domain owner)
		{
			super(owner, new Predicate(67, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition45(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom98Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom99 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom99(Domain owner)
		{
			super(owner, new Predicate(68, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(67, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom99Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition46 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition46(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition47 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition47(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL)))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom100 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 */
		public Axiom100(Domain owner)
		{
			super(owner, new Predicate(69, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition46(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition47(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom100Branch0";
				case 1: return "Axiom100Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition48 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition48(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 5, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom101 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 */
		public Axiom101(Domain owner)
		{
			super(owner, new Predicate(70, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition48(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom101Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom102 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom102(Domain owner)
		{
			super(owner, new Predicate(68, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(70, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom102Branch0";
				case 1: return "Axiom102Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValue
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom103 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValue
	 */
		public Axiom103(Domain owner)
		{
			super(owner, new Predicate(71, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValue [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(46, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom103Branch0";
				case 1: return "Axiom103Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom104 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom104(Domain owner)
		{
			super(owner, new Predicate(72, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom104Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition49 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition49(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(73, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(72, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom105 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom105(Domain owner)
		{
			super(owner, new Predicate(72, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition49(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom105Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom106 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom106(Domain owner)
		{
			super(owner, new Predicate(73, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(72, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom106Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition50 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition50(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getInvRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition51 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition51(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(74, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getInvRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom107 extends Axiom
{
	/**
	 * Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 */
		public Axiom107(Domain owner)
		{
			super(owner, new Predicate(74, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getInvRelatedsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition50(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition51(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom107Branch0";
				case 1: return "Axiom107Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition52 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition52(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition53 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition53(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(75, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom108 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsFromCurrentStateH
	 */
		public Axiom108(Domain owner)
		{
			super(owner, new Predicate(75, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition52(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition53(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom108Branch0";
				case 1: return "Axiom108Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition54 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition54(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(17, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(74, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 5, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition55 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition55(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(75, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 5, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom109 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsFromCurrentState
	 */
		public Axiom109(Domain owner)
		{
			super(owner, new Predicate(76, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition54(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition55(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom109Branch0";
				case 1: return "Axiom109Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom110 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom110(Domain owner)
		{
			super(owner, new Predicate(73, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(76, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom110Branch0";
				case 1: return "Axiom110Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelated
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition56 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition56(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(17, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(45, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelated [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelated
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom111 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelated
	 */
		public Axiom111(Domain owner)
		{
			super(owner, new Predicate(77, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 3);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelated [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition56(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(45, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 2:
					p = (new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom111Branch0";
				case 1: return "Axiom111Branch1";
				case 2: return "Axiom111Branch2";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom112 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom112(Domain owner)
		{
			super(owner, new Predicate(72, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermNumber(0.0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom112Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom113 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom113(Domain owner)
		{
			super(owner, new Predicate(72, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom113Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition57 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition57(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(1, 8, new TermList(owner.getTermVariable(3), new TermList(new TermNumber(0.0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(73, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(73, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(72, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(new TermCall(new List(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom114 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom114(Domain owner)
		{
			super(owner, new Predicate(72, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition57(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom114Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom115 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom115(Domain owner)
		{
			super(owner, new Predicate(73, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(72, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom115Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition58 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition58(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(73, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(48, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelateds [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom116 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom116(Domain owner)
		{
			super(owner, new Predicate(73, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition58(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom116Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompetencesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom117 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompetencesH
	 */
		public Axiom117(Domain owner)
		{
			super(owner, new Predicate(78, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompetencesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom117Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGoalsByCompetencesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition59 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition59(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(78, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGoalsByCompetencesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompetencesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom118 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompetencesH
	 */
		public Axiom118(Domain owner)
		{
			super(owner, new Predicate(78, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompetencesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition59(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(78, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom118Branch0";
				case 1: return "Axiom118Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompetences
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom119 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompetences
	 */
		public Axiom119(Domain owner)
		{
			super(owner, new Predicate(79, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompetences [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(78, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom119Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition60 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition60(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(60, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(82) /*Level*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(83) /*hasSkillLevel*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom equivalent [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom120 extends Axiom
{
	/**
	 * Branch -1 for axiom equivalent
	 */
		public Axiom120(Domain owner)
		{
			super(owner, new Predicate(81, 3, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(80) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom equivalent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition60(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom120Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition61 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition61(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(60, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(82) /*Level*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(84) /*hasKnowledgeLevel*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom equivalent [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom121 extends Axiom
{
	/**
	 * Branch -1 for axiom equivalent
	 */
		public Axiom121(Domain owner)
		{
			super(owner, new Predicate(81, 3, new TermList(new TermList(owner.getTermConstant(80) /*any*/, new TermList(owner.getTermVariable(0), TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom equivalent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition61(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom121Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition62 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition62(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(60, 4, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(82) /*Level*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(83) /*hasSkillLevel*/, new TermList(owner.getTermVariable(0), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(84) /*hasKnowledgeLevel*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom equivalent [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom122 extends Axiom
{
	/**
	 * Branch -1 for axiom equivalent
	 */
		public Axiom122(Domain owner)
		{
			super(owner, new Predicate(81, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom equivalent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition62(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom122Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom123 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom123(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(22) /*s0k0*/, new TermList(new TermList(owner.getTermConstant(85) /*nothing*/, new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom123Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom124 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom124(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(24) /*s0k1*/, new TermList(new TermList(owner.getTermConstant(85) /*nothing*/, new TermList(owner.getTermConstant(87) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom124Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom125 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom125(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(25) /*s0k2*/, new TermList(new TermList(owner.getTermConstant(85) /*nothing*/, new TermList(owner.getTermConstant(88) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom125Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom126 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom126(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(26) /*s0k3*/, new TermList(new TermList(owner.getTermConstant(85) /*nothing*/, new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom126Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom127 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom127(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(27) /*s1k0*/, new TermList(new TermList(owner.getTermConstant(90) /*rough*/, new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom127Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom128 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom128(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(28) /*s1k1*/, new TermList(new TermList(owner.getTermConstant(90) /*rough*/, new TermList(owner.getTermConstant(87) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom128Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom129 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom129(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(29) /*s1k2*/, new TermList(new TermList(owner.getTermConstant(90) /*rough*/, new TermList(owner.getTermConstant(88) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom129Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom130 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom130(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(30) /*s1k3*/, new TermList(new TermList(owner.getTermConstant(90) /*rough*/, new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom130Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom131 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom131(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(31) /*s2k0*/, new TermList(new TermList(owner.getTermConstant(91) /*explanatory*/, new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom131Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom132 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom132(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(32) /*s2k1*/, new TermList(new TermList(owner.getTermConstant(91) /*explanatory*/, new TermList(owner.getTermConstant(87) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom132Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom133 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom133(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(33) /*s2k2*/, new TermList(new TermList(owner.getTermConstant(91) /*explanatory*/, new TermList(owner.getTermConstant(88) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom133Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom134 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom134(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(34) /*s2k3*/, new TermList(new TermList(owner.getTermConstant(91) /*explanatory*/, new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom134Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom135 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom135(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(35) /*s3k0*/, new TermList(new TermList(owner.getTermConstant(92) /*associative*/, new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom135Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom136 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom136(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(36) /*s3k1*/, new TermList(new TermList(owner.getTermConstant(92) /*associative*/, new TermList(owner.getTermConstant(87) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom136Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom137 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom137(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(37) /*s3k2*/, new TermList(new TermList(owner.getTermConstant(92) /*associative*/, new TermList(owner.getTermConstant(88) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom137Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom138 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom138(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(38) /*s3k3*/, new TermList(new TermList(owner.getTermConstant(92) /*associative*/, new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom138Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom139 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom139(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(39) /*s4k0*/, new TermList(new TermList(owner.getTermConstant(93) /*autonomous*/, new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom139Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom140 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom140(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(40) /*s4k1*/, new TermList(new TermList(owner.getTermConstant(93) /*autonomous*/, new TermList(owner.getTermConstant(87) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom140Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom141 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom141(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(41) /*s4k2*/, new TermList(new TermList(owner.getTermConstant(93) /*autonomous*/, new TermList(owner.getTermConstant(88) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom141Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom142 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom142(Domain owner)
		{
			super(owner, new Predicate(86, 0, new TermList(owner.getTermConstant(42) /*s4k3*/, new TermList(new TermList(owner.getTermConstant(93) /*autonomous*/, new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom142Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom143 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom143(Domain owner)
		{
			super(owner, new Predicate(94, 0, new TermList(new TermNumber(0.0), new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom143Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom144 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom144(Domain owner)
		{
			super(owner, new Predicate(94, 0, new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(90) /*rough*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom144Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom145 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom145(Domain owner)
		{
			super(owner, new Predicate(94, 0, new TermList(new TermNumber(2.0), new TermList(owner.getTermConstant(91) /*explanatory*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom145Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom146 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom146(Domain owner)
		{
			super(owner, new Predicate(94, 0, new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(92) /*associative*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom146Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom147 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom147(Domain owner)
		{
			super(owner, new Predicate(94, 0, new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(93) /*autonomous*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom147Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom148 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom148(Domain owner)
		{
			super(owner, new Predicate(94, 0, new TermList(new TermNumber(5.0), new TermList(owner.getTermConstant(93) /*autonomous*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom148Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom149 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom149(Domain owner)
		{
			super(owner, new Predicate(95, 0, new TermList(new TermNumber(0.0), new TermList(owner.getTermConstant(85) /*nothing*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom149Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom150 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom150(Domain owner)
		{
			super(owner, new Predicate(95, 0, new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(87) /*accretion*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom150Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom151 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom151(Domain owner)
		{
			super(owner, new Predicate(95, 0, new TermList(new TermNumber(2.0), new TermList(owner.getTermConstant(88) /*tuning*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom151Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom152 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom152(Domain owner)
		{
			super(owner, new Predicate(95, 0, new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom152Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom153 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom153(Domain owner)
		{
			super(owner, new Predicate(95, 0, new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(89) /*restructuring*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom153Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getNumericalLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition63 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition63(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(86, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(94, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(95, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getNumericalLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getNumericalLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom154 extends Axiom
{
	/**
	 * Branch -1 for axiom getNumericalLevel
	 */
		public Axiom154(Domain owner)
		{
			super(owner, new Predicate(96, 5, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getNumericalLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition63(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom154Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom hasKnowledgeType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition64 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition64(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(63, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom hasKnowledgeType [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom hasKnowledgeType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom155 extends Axiom
{
	/**
	 * Branch -1 for axiom hasKnowledgeType
	 */
		public Axiom155(Domain owner)
		{
			super(owner, new Predicate(97, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom hasKnowledgeType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition64(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom155Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom156 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 */
		public Axiom156(Domain owner)
		{
			super(owner, new Predicate(99, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom156Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #5 of Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition65 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition65(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition66 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition66(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(77, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition65(owner, unifier) /*Conjunct 6 of Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #5 of Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition67 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition67(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(14), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(15), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition68 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition68(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 19, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(77, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition67(owner, unifier) /*Conjunct 6 of Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition69 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition69(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new Precondition66(owner, unifier);

			p[1] = new Precondition68(owner, unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition70 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition70(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(17, 19, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(0, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(100) /*Competency*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition69(owner, unifier) /*Conjunct 4 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(99, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #5 of Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition71 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition71(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition72 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition72(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(98) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(77, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition71(owner, unifier) /*Conjunct 6 of Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #5 of Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition73 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition73(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(14), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(15), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition74 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition74(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 19, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(68, 19, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(77, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition73(owner, unifier) /*Conjunct 6 of Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition75 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition75(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new Precondition72(owner, unifier);

			p[1] = new Precondition74(owner, unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition76 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition76(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(0, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(100) /*Competency*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition75(owner, unifier) /*Conjunct 3 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(99, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #2 of Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition77 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition77(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition78 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition78(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(17, 19, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition77(owner, unifier) /*Conjunct 3 of Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(99, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #1 of Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition79 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition79(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition80 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition80(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(77, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition79(owner, unifier) /*Conjunct 2 of Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(99, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom157 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 */
		public Axiom157(Domain owner)
		{
			super(owner, new Predicate(99, 19, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 5);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition70(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition76(owner, unifier)).setComparator(null);
				break;
				case 2:
					p = (new Precondition78(owner, unifier)).setComparator(null);
				break;
				case 3:
					p = (new Precondition80(owner, unifier)).setComparator(null);
				break;
				case 4:
					p = (new PreconditionAtomic(new Predicate(99, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(5)), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom157Branch0";
				case 1: return "Axiom157Branch1";
				case 2: return "Axiom157Branch2";
				case 3: return "Axiom157Branch3";
				case 4: return "Axiom157Branch4";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsWithoutRelation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom158 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsWithoutRelation
	 */
		public Axiom158(Domain owner)
		{
			super(owner, new Predicate(102, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsWithoutRelation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(99, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom158Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortByH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom159 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByH
	 */
		public Axiom159(Domain owner)
		{
			super(owner, new Predicate(103, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom159Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom sortByH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition81 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition81(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(102, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(8, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(103, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom sortByH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom sortByH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom160 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByH
	 */
		public Axiom160(Domain owner)
		{
			super(owner, new Predicate(103, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition81(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom160Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortBy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom161 extends Axiom
{
	/**
	 * Branch -1 for axiom sortBy
	 */
		public Axiom161(Domain owner)
		{
			super(owner, new Predicate(104, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortBy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(103, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom161Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom alreadySeenByLearners
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition82 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition82(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(106) /*hasAlreadySeen*/, new TermList(owner.getTermVariable(0), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(0, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(107) /*true*/, TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom alreadySeenByLearners [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom alreadySeenByLearners
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom162 extends Axiom
{
	/**
	 * Branch -1 for axiom alreadySeenByLearners
	 */
		public Axiom162(Domain owner)
		{
			super(owner, new Predicate(105, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom alreadySeenByLearners [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition82(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(105, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom162Branch0";
				case 1: return "Axiom162Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom163 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 */
		public Axiom163(Domain owner)
		{
			super(owner, new Predicate(108, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByAlreadySeenH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom163Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom sortByAlreadySeenH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition83 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition83(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(105, 6, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(108, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom sortByAlreadySeenH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom164 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 */
		public Axiom164(Domain owner)
		{
			super(owner, new Predicate(108, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByAlreadySeenH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition83(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(108, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom164Branch0";
				case 1: return "Axiom164Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortByAlreadySeen
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom165 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByAlreadySeen
	 */
		public Axiom165(Domain owner)
		{
			super(owner, new Predicate(109, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByAlreadySeen [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(108, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom165Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom166 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom166(Domain owner)
		{
			super(owner, new Predicate(110, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom166Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom167 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom167(Domain owner)
		{
			super(owner, new Predicate(110, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(110, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(4)), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom167Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom168 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQuery
	 */
		public Axiom168(Domain owner)
		{
			super(owner, new Predicate(111, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(110, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom168Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom169 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom169(Domain owner)
		{
			super(owner, new Predicate(110, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom169Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom170 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom170(Domain owner)
		{
			super(owner, new Predicate(110, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(110, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), owner.getTermVariable(5)), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom170Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom171 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQuery
	 */
		public Axiom171(Domain owner)
		{
			super(owner, new Predicate(111, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(110, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom171Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildRelationQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom172 extends Axiom
{
	/**
	 * Branch -1 for axiom buildRelationQueryH
	 */
		public Axiom172(Domain owner)
		{
			super(owner, new Predicate(112, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildRelationQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom172Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildRelationQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom173 extends Axiom
{
	/**
	 * Branch -1 for axiom buildRelationQueryH
	 */
		public Axiom173(Domain owner)
		{
			super(owner, new Predicate(112, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildRelationQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(112, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(45) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(4)), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom173Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildRelationQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom174 extends Axiom
{
	/**
	 * Branch -1 for axiom buildRelationQuery
	 */
		public Axiom174(Domain owner)
		{
			super(owner, new Predicate(113, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildRelationQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(112, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom174Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLearnerFundCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom175 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerFundCompetencyLevel
	 */
		public Axiom175(Domain owner)
		{
			super(owner, new Predicate(114, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerFundCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(71, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(115) /*hasCompetencyLevel*/, new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(owner.getTermConstant(22) /*s0k0*/, unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom175Branch0";
				case 1: return "Axiom175Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getLearnerAuxCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition84 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition84(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(118) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(114, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getLearnerAuxCompetencyLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerAuxCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom176 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerAuxCompetencyLevel
	 */
		public Axiom176(Domain owner)
		{
			super(owner, new Predicate(116, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerAuxCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(115) /*hasCompetencyLevel*/, new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition84(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom176Branch0";
				case 1: return "Axiom176Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition85 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition85(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(97, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(120) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(116, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom177 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevel
	 */
		public Axiom177(Domain owner)
		{
			super(owner, new Predicate(119, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition85(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(114, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom177Branch0";
				case 1: return "Axiom177Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom178 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 */
		public Axiom178(Domain owner)
		{
			super(owner, new Predicate(121, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevelsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(10, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom178Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevelsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition86 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition86(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(119, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(121, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevelsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom179 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 */
		public Axiom179(Domain owner)
		{
			super(owner, new Predicate(121, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevelsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition86(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom179Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom180 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevels
	 */
		public Axiom180(Domain owner)
		{
			super(owner, new Predicate(122, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(121, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom180Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom181 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 */
		public Axiom181(Domain owner)
		{
			super(owner, new Predicate(123, 5, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom181Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition87 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition87(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(119, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(96, 10, new TermList(new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(9), TermList.NIL)), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[3] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(123, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevelH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom182 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 */
		public Axiom182(Domain owner)
		{
			super(owner, new Predicate(123, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition87(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(123, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom182Branch0";
				case 1: return "Axiom182Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition88 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition88(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(96, 6, new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(123, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom183 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevel
	 */
		public Axiom183(Domain owner)
		{
			super(owner, new Predicate(124, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition88(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom183Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom184 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 */
		public Axiom184(Domain owner)
		{
			super(owner, new Predicate(125, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedCompetencyLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom184Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom reachedCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition89 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition89(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(124, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(125, 7, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom reachedCompetencyLevels [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom185 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 */
		public Axiom185(Domain owner)
		{
			super(owner, new Predicate(125, 7, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedCompetencyLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition89(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom185Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom readyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition90 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition90(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(68, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(127) /*hasPrerequisite*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(125, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(1), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom readyAux [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom readyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom186 extends Axiom
{
	/**
	 * Branch -1 for axiom readyAux
	 */
		public Axiom186(Domain owner)
		{
			super(owner, new Predicate(126, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom readyAux [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition90(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(126, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom186Branch0";
				case 1: return "Axiom186Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getReadyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition91 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition91(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(60, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(109, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(126, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getReadyAux [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getReadyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom187 extends Axiom
{
	/**
	 * Branch -1 for axiom getReadyAux
	 */
		public Axiom187(Domain owner)
		{
			super(owner, new Predicate(128, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getReadyAux [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition91(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom187Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getOrBuildReadyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom188 extends Axiom
{
	/**
	 * Branch -1 for axiom getOrBuildReadyAux
	 */
		public Axiom188(Domain owner)
		{
			super(owner, new Predicate(129, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getOrBuildReadyAux [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(128, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(130) /*hasTitle*/, new TermList(owner.getTermConstant(131) /*temporarily-auxiliary*/, TermList.NIL))), owner.getTermVariable(1)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom188Branch0";
				case 1: return "Axiom188Branch1";
				default: return null;
			}
		}
	}

	/**
	 * consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition92 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition92(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(68, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(133) /*hasEducationalLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition93 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition93(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(133) /*hasEducationalLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[3] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), new Precondition92(owner, unifier), 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(134) /*hasContext*/, new TermList(owner.getTermVariable(4), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(135) /*hasDifficult*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL)), unifier, 0);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom189 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 */
		public Axiom189(Domain owner)
		{
			super(owner, new Predicate(132, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition93(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(135) /*hasDifficult*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom189Branch0";
				case 1: return "Axiom189Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition94 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition94(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(48, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermConstant(136) /*very-high*/, new TermList(owner.getTermConstant(137) /*high*/, TermList.NIL)), TermList.NIL)))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(132, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(138) /*very-difficult*/, new TermList(owner.getTermConstant(139) /*difficult*/, TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition95 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition95(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(48, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermConstant(140) /*medium*/, new TermList(owner.getTermConstant(141) /*low*/, TermList.NIL)), TermList.NIL)))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(8), new TermList(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(132, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(140) /*medium*/, new TermList(owner.getTermConstant(142) /*easy*/, TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom190 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 */
		public Axiom190(Domain owner)
		{
			super(owner, new Predicate(132, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 3);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition94(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition95(owner, unifier)).setComparator(null);
				break;
				case 2:
					p = (new PreconditionAtomic(new Predicate(132, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(142) /*easy*/, new TermList(owner.getTermConstant(143) /*very-easy*/, TermList.NIL)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom190Branch0";
				case 1: return "Axiom190Branch1";
				case 2: return "Axiom190Branch2";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom191 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 */
		public Axiom191(Domain owner)
		{
			super(owner, new Predicate(144, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom191Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getCompsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition96 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition96(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getCompsFromGoalsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom192 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 */
		public Axiom192(Domain owner)
		{
			super(owner, new Predicate(144, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition96(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(144, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom192Branch0";
				case 1: return "Axiom192Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getCompsFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom193 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompsFromGoals
	 */
		public Axiom193(Domain owner)
		{
			super(owner, new Predicate(145, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompsFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(144, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom193Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getCompFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom194 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompFromGoals
	 */
		public Axiom194(Domain owner)
		{
			super(owner, new Predicate(146, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom194Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom195 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 */
		public Axiom195(Domain owner)
		{
			super(owner, new Predicate(147, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom195Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLevelsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition97 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition97(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(147, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLevelsFromGoalsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom196 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 */
		public Axiom196(Domain owner)
		{
			super(owner, new Predicate(147, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition97(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom196Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevelsFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom197 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelsFromGoals
	 */
		public Axiom197(Domain owner)
		{
			super(owner, new Predicate(148, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelsFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(147, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom197Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLevelFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition98 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition98(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(148, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLevelFromGoals [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLevelFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom198 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelFromGoals
	 */
		public Axiom198(Domain owner)
		{
			super(owner, new Predicate(149, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition98(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom198Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition99 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition99(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(61, 8, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(100) /*Competency*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(151) /*ForAuxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(101) /*hasSkill*/, new TermList(owner.getTermVariable(4), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(98) /*hasKnowledge*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL)))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL)), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalFromAuxiliary [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getGoalFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition100 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition100(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(130) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(130) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(100) /*Competency*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(151) /*ForAuxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(130) /*hasTitle*/, new TermList(new TermCall(new List(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL)), ((domain)owner).calculateConcatText, "((domain)owner).calculateConcatText"), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(101) /*hasSkill*/, new TermList(owner.getTermVariable(4), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(98) /*hasKnowledge*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL))))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL)), unifier, 0);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getGoalFromAuxiliary [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom199 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalFromAuxiliary
	 */
		public Axiom199(Domain owner)
		{
			super(owner, new Predicate(150, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalFromAuxiliary [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition99(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition100(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom199Branch0";
				case 1: return "Axiom199Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom200 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 */
		public Axiom200(Domain owner)
		{
			super(owner, new Predicate(152, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliaryHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom200Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliaryHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition101 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition101(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(150, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(152, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliaryHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom201 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 */
		public Axiom201(Domain owner)
		{
			super(owner, new Predicate(152, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliaryHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition101(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom201Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom202 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliary
	 */
		public Axiom202(Domain owner)
		{
			super(owner, new Predicate(153, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliary [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(152, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom202Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom203 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 */
		public Axiom203(Domain owner)
		{
			super(owner, new Predicate(154, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliariesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom203Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliariesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition102 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition102(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(101) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(61, 8, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(100) /*Competency*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(151) /*ForAuxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(101) /*hasSkill*/, new TermList(owner.getTermVariable(5), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(46) /*property*/, new TermList(owner.getTermConstant(98) /*hasKnowledge*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL)))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(155) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(154, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL)), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliariesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom204 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 */
		public Axiom204(Domain owner)
		{
			super(owner, new Predicate(154, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliariesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition102(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom204Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaries
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom205 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaries
	 */
		public Axiom205(Domain owner)
		{
			super(owner, new Predicate(156, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliaries [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(154, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom205Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom206 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsHH
	 */
		public Axiom206(Domain owner)
		{
			super(owner, new Predicate(157, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom206Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition103 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition103(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(119, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetIndGoal, "((domain)owner).calculateGetIndGoal"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(157, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(7), TermList.NIL)), TermList.NIL)), owner.getTermVariable(5)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom207 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsHH
	 */
		public Axiom207(Domain owner)
		{
			super(owner, new Predicate(157, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition103(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom207Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom208 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsH
	 */
		public Axiom208(Domain owner)
		{
			super(owner, new Predicate(158, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom208Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition104 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition104(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(157, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(158, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom209 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsH
	 */
		public Axiom209(Domain owner)
		{
			super(owner, new Predicate(158, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition104(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom209Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom210 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom210(Domain owner)
		{
			super(owner, new Predicate(159, 1, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom210Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom211 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom211(Domain owner)
		{
			super(owner, new Predicate(159, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(158, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom211Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom212 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 */
		public Axiom212(Domain owner)
		{
			super(owner, new Predicate(160, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom212Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition105 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition105(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(119, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(7), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetIndGoal, "((domain)owner).calculateGetIndGoal"), unifier, 8);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(160, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL)), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom213 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 */
		public Axiom213(Domain owner)
		{
			super(owner, new Predicate(160, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition105(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(160, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom213Branch0";
				case 1: return "Axiom213Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom214 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 */
		public Axiom214(Domain owner)
		{
			super(owner, new Predicate(161, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom214Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition106 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition106(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(160, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(161, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(7), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom215 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 */
		public Axiom215(Domain owner)
		{
			super(owner, new Predicate(161, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition106(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom215Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom216 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom216(Domain owner)
		{
			super(owner, new Predicate(159, 2, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom216Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom217 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom217(Domain owner)
		{
			super(owner, new Predicate(159, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(161, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom217Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom218 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 */
		public Axiom218(Domain owner)
		{
			super(owner, new Predicate(162, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom218Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition107 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition107(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(119, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetIndGoal, "((domain)owner).calculateGetIndGoal"), unifier, 9);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(162, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL)), owner.getTermVariable(7)), TermList.NIL))))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom219 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 */
		public Axiom219(Domain owner)
		{
			super(owner, new Predicate(162, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition107(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(162, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom219Branch0";
				case 1: return "Axiom219Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom220 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 */
		public Axiom220(Domain owner)
		{
			super(owner, new Predicate(163, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom220Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition108 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition108(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(162, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(TermList.NIL, TermList.NIL))))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(163, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(new TermList(owner.getTermVariable(8), owner.getTermVariable(7)), TermList.NIL))))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom221 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 */
		public Axiom221(Domain owner)
		{
			super(owner, new Predicate(163, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition108(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom221Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom222 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom222(Domain owner)
		{
			super(owner, new Predicate(159, 3, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom222Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom223 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom223(Domain owner)
		{
			super(owner, new Predicate(159, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(163, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom223Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom224 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 */
		public Axiom224(Domain owner)
		{
			super(owner, new Predicate(164, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom224Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition109 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition109(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(164, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGoalsByCompH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom225 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 */
		public Axiom225(Domain owner)
		{
			super(owner, new Predicate(164, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition109(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(164, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom225Branch0";
				case 1: return "Axiom225Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByComp
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom226 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByComp
	 */
		public Axiom226(Domain owner)
		{
			super(owner, new Predicate(165, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByComp [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(164, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom226Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalByGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom227 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalByGroup
	 */
		public Axiom227(Domain owner)
		{
			super(owner, new Predicate(166, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalByGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom227Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterGoalByGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition110 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition110(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(1), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterGoalByGroup [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalByGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom228 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalByGroup
	 */
		public Axiom228(Domain owner)
		{
			super(owner, new Predicate(166, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalByGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(166, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition110(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom228Branch0";
				case 1: return "Axiom228Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom229 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 */
		public Axiom229(Domain owner)
		{
			super(owner, new Predicate(167, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom229Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGoalsByLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition111 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition111(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(167, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGoalsByLevelH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom230 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 */
		public Axiom230(Domain owner)
		{
			super(owner, new Predicate(167, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition111(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(167, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom230Branch0";
				case 1: return "Axiom230Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom231 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByLevel
	 */
		public Axiom231(Domain owner)
		{
			super(owner, new Predicate(168, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(167, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom231Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom232 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 */
		public Axiom232(Domain owner)
		{
			super(owner, new Predicate(169, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGroupsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom232Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGroupsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition112 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition112(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(169, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGroupsByCompH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom233 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 */
		public Axiom233(Domain owner)
		{
			super(owner, new Predicate(169, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGroupsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition112(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(169, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom233Branch0";
				case 1: return "Axiom233Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGroupsByComp
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom234 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGroupsByComp
	 */
		public Axiom234(Domain owner)
		{
			super(owner, new Predicate(170, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGroupsByComp [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(169, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom234Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getCurrentLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition113 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition113(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 2, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*class*/, new TermList(owner.getTermConstant(117) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(68, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(172) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getCurrentLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getCurrentLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom235 extends Axiom
{
	/**
	 * Branch -1 for axiom getCurrentLearningResourceType
	 */
		public Axiom235(Domain owner)
		{
			super(owner, new Predicate(171, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCurrentLearningResourceType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition113(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(172) /*hasLearningResourceType*/, TermList.NIL), ((domain)owner).calculateGetDefaultValue, "((domain)owner).calculateGetDefaultValue"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom235Branch0";
				case 1: return "Axiom235Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom236 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedGoals
	 */
		public Axiom236(Domain owner)
		{
			super(owner, new Predicate(173, 0, new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom236Branch0";
				default: return null;
			}
		}
	}

	/**
	 * premise of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition114 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition114(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(96, 11, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(10), TermList.NIL)), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "premise of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals [unknown source pos]";
		}
	}

	/**
	 * consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition115 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition115(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[1] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[2] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(10), new TermList(owner.getTermVariable(6), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition116 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition116(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(96, 11, new TermList(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(122, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[3] = new PreconditionForAll(new Precondition114(owner, unifier), new Precondition115(owner, unifier), 11);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(173, 11, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom reachedGoals [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom237 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedGoals
	 */
		public Axiom237(Domain owner)
		{
			super(owner, new Predicate(173, 11, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition116(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom237Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom238 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 */
		public Axiom238(Domain owner)
		{
			super(owner, new Predicate(174, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom238Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom239 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 */
		public Axiom239(Domain owner)
		{
			super(owner, new Predicate(174, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(174, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(5)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom239Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLStrategies
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom240 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLStrategies
	 */
		public Axiom240(Domain owner)
		{
			super(owner, new Predicate(175, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLStrategies [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(174, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom240Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom241 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLGrouping
	 */
		public Axiom241(Domain owner)
		{
			super(owner, new Predicate(176, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(175, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom241Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom242 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 */
		public Axiom242(Domain owner)
		{
			super(owner, new Predicate(177, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom242Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom243 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 */
		public Axiom243(Domain owner)
		{
			super(owner, new Predicate(177, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(177, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(5)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom243Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLStrategies
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom244 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLStrategies
	 */
		public Axiom244(Domain owner)
		{
			super(owner, new Predicate(178, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLStrategies [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(177, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom244Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom245 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLGrouping
	 */
		public Axiom245(Domain owner)
		{
			super(owner, new Predicate(179, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(178, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom245Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getEducationalLevelHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom246 extends Axiom
{
	/**
	 * Branch -1 for axiom getEducationalLevelHH
	 */
		public Axiom246(Domain owner)
		{
			super(owner, new Predicate(182, 1, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(133) /*hasEducationalLevel*/, new TermList(owner.getTermConstant(180) /*hasMotivation*/, new TermList(owner.getTermConstant(181) /*hasAnxiety*/, TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getEducationalLevelHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(7, 1, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(183) /*training*/, new TermList(owner.getTermConstant(184) /*higher-education*/, new TermList(owner.getTermConstant(185) /*school*/, new TermList(owner.getTermConstant(186) /*other*/, new TermList(owner.getTermConstant(136) /*very-high*/, new TermList(owner.getTermConstant(137) /*high*/, new TermList(owner.getTermConstant(138) /*very-difficult*/, new TermList(owner.getTermConstant(139) /*difficult*/, new TermList(owner.getTermConstant(140) /*medium*/, new TermList(owner.getTermConstant(141) /*low*/, new TermList(owner.getTermConstant(140) /*medium*/, new TermList(owner.getTermConstant(142) /*easy*/, TermList.NIL)))))))))))), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom246Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTitlesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom247 extends Axiom
{
	/**
	 * Branch -1 for axiom getTitlesH
	 */
		public Axiom247(Domain owner)
		{
			super(owner, new Predicate(257, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTitlesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom247Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTitlesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition163 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition163(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(130) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(257, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTitlesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTitlesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom248 extends Axiom
{
	/**
	 * Branch -1 for axiom getTitlesH
	 */
		public Axiom248(Domain owner)
		{
			super(owner, new Predicate(257, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTitlesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition163(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(257, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom248Branch0";
				case 1: return "Axiom248Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTitles
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom249 extends Axiom
{
	/**
	 * Branch -1 for axiom getTitles
	 */
		public Axiom249(Domain owner)
		{
			super(owner, new Predicate(258, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTitles [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(257, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom249Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom250 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 */
		public Axiom250(Domain owner)
		{
			super(owner, new Predicate(289, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(TermList.NIL, new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom250Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom251 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 */
		public Axiom251(Domain owner)
		{
			super(owner, new Predicate(289, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermNumber(0.0), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom251Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition179 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition179(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(94, 11, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(95, 11, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(86, 11, new TermList(owner.getTermVariable(8), new TermList(new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(124, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(8), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(8, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(289, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermCall(new List(owner.getTermVariable(2), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermVariable(9), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom252 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH
	 */
		public Axiom252(Domain owner)
		{
			super(owner, new Predicate(289, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition179(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom252Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom253 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevel
	 */
		public Axiom253(Domain owner)
		{
			super(owner, new Predicate(290, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualSkillLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(289, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom253Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom254 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 */
		public Axiom254(Domain owner)
		{
			super(owner, new Predicate(291, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(TermList.NIL, new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom254Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom255 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 */
		public Axiom255(Domain owner)
		{
			super(owner, new Predicate(291, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(new TermNumber(0.0), TermList.NIL)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom255Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition180 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition180(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(94, 11, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(95, 11, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(86, 11, new TermList(owner.getTermVariable(8), new TermList(new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(124, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(8), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(8, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(291, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), TermList.NIL)), new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermVariable(9), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom256 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH
	 */
		public Axiom256(Domain owner)
		{
			super(owner, new Predicate(291, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition180(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom256Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom257 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevel
	 */
		public Axiom257(Domain owner)
		{
			super(owner, new Predicate(292, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualKnowledgeLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(291, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom257Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLowEqualLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition181 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition181(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(290, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(292, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLowEqualLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom258 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLowEqualLevel
	 */
		public Axiom258(Domain owner)
		{
			super(owner, new Predicate(293, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLowEqualLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition181(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom258Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsWithIncreasedKnowledgesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom259 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsWithIncreasedKnowledgesH
	 */
		public Axiom259(Domain owner)
		{
			super(owner, new Predicate(297, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermNumber(-1.0), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsWithIncreasedKnowledgesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom259Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalsWithIncreasedKnowledgesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition184 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition184(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(94, 8, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(95, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(86, 8, new TermList(owner.getTermVariable(7), new TermList(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(297, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(7), TermList.NIL)), owner.getTermVariable(4)), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalsWithIncreasedKnowledgesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalsWithIncreasedKnowledgesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom260 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsWithIncreasedKnowledgesH
	 */
		public Axiom260(Domain owner)
		{
			super(owner, new Predicate(297, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsWithIncreasedKnowledgesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition184(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom260Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalsWithIncreasedKnowledges
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition185 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition185(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(96, 5, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(297, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalsWithIncreasedKnowledges [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalsWithIncreasedKnowledges
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom261 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsWithIncreasedKnowledges
	 */
		public Axiom261(Domain owner)
		{
			super(owner, new Predicate(298, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsWithIncreasedKnowledges [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition185(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom261Branch0";
				default: return null;
			}
		}
	}

	public static final String sourcePath = "/Users/gcc/Dropbox/test/arquive/coursegenerator/planner/build/domain.lisp";
	public static final long sourceLastModified = 1362533703000L;

	public Length calculateLength = new Length();

	public Remove calculateRemove = new Remove();

	public Reverse calculateReverse = new Reverse();

	public DivideList calculateDivideList = new DivideList();

	public GetType calculateGetType = new GetType();

	public GetRelated calculateGetRelated = new GetRelated();

	public GetPropertyValue calculateGetPropertyValue = new GetPropertyValue();

	public ConcatList calculateConcatList = new ConcatList();

	public GetElements calculateGetElements = new GetElements();

	public BuildElement calculateBuildElement = new BuildElement();

	public ConcatText calculateConcatText = new ConcatText();

	public GetIndGoal calculateGetIndGoal = new GetIndGoal();

	public GetDefaultValue calculateGetDefaultValue = new GetDefaultValue();

	public GetUUID calculateGetUUID = new GetUUID();

	public Union calculateUnion = new Union();

	public GetProduct calculateGetProduct = new GetProduct();

	public GetCLGrouping calculateGetCLGrouping = new GetCLGrouping();

	public domain()
	{
		constants = new String[311];
		constants[0] = "same";
		constants[1] = "different";
		constants[2] = "first";
		constants[3] = "last";
		constants[4] = "rest";
		constants[5] = "length";
		constants[6] = "exist";
		constants[7] = "assignIterator";
		constants[8] = "remove";
		constants[9] = "removeDuplicateH";
		constants[10] = "removeDuplicate";
		constants[11] = "divide";
		constants[12] = "duplicate";
		constants[13] = "sublistH";
		constants[14] = "sublist";
		constants[15] = "isPartOf";
		constants[16] = "inverseIsPartOf";
		constants[17] = "inverseOf";
		constants[18] = "isRequiredBy";
		constants[19] = "inverseIsRequiredBy";
		constants[20] = "isVariantOf";
		constants[21] = "inverseIsVariantOf";
		constants[22] = "s0k0";
		constants[23] = "isGoal";
		constants[24] = "s0k1";
		constants[25] = "s0k2";
		constants[26] = "s0k3";
		constants[27] = "s1k0";
		constants[28] = "s1k1";
		constants[29] = "s1k2";
		constants[30] = "s1k3";
		constants[31] = "s2k0";
		constants[32] = "s2k1";
		constants[33] = "s2k2";
		constants[34] = "s2k3";
		constants[35] = "s3k0";
		constants[36] = "s3k1";
		constants[37] = "s3k2";
		constants[38] = "s3k3";
		constants[39] = "s4k0";
		constants[40] = "s4k1";
		constants[41] = "s4k2";
		constants[42] = "s4k3";
		constants[43] = "filterElement";
		constants[44] = "class";
		constants[45] = "relation";
		constants[46] = "property";
		constants[47] = "filterByQueryH";
		constants[48] = "filterByQuery";
		constants[49] = "getElementsByTypeFromCurrentStateH";
		constants[50] = "getElementsByTypeFromCurrentState";
		constants[51] = "getElementsByPropertyFromCurrentStateH";
		constants[52] = "getElementsByPropertyFromCurrentState";
		constants[53] = "getElementsByPropertyDestValueFromCurrentStateH";
		constants[54] = "getElementsByPropertyDestValueFromCurrentState";
		constants[55] = "getElementsByRelationFromCurrentStateH";
		constants[56] = "getElementsByRelationFromCurrentState";
		constants[57] = "getElementsByInvRelationFromCurrentStateH";
		constants[58] = "getElementsFromCurrentStateH";
		constants[59] = "getElementsFromCurrentState";
		constants[60] = "getElements";
		constants[61] = "getElement";
		constants[62] = "getTypesH";
		constants[63] = "getTypes";
		constants[64] = "getTypesFromCurrentStateH";
		constants[65] = "getTypesFromCurrentState";
		constants[66] = "getType";
		constants[67] = "getPropertyValuesH";
		constants[68] = "getPropertyValues";
		constants[69] = "getPropertyValuesFromCurrentStateH";
		constants[70] = "getPropertyValuesFromCurrentState";
		constants[71] = "getPropertyValue";
		constants[72] = "getRelatedsH";
		constants[73] = "getRelateds";
		constants[74] = "getInvRelatedsFromCurrentStateH";
		constants[75] = "getRelatedsFromCurrentStateH";
		constants[76] = "getRelatedsFromCurrentState";
		constants[77] = "getRelated";
		constants[78] = "filterGoalsByCompetencesH";
		constants[79] = "filterGoalsByCompetences";
		constants[80] = "any";
		constants[81] = "equivalent";
		constants[82] = "Level";
		constants[83] = "hasSkillLevel";
		constants[84] = "hasKnowledgeLevel";
		constants[85] = "nothing";
		constants[86] = "getLevel";
		constants[87] = "accretion";
		constants[88] = "tuning";
		constants[89] = "restructuring";
		constants[90] = "rough";
		constants[91] = "explanatory";
		constants[92] = "associative";
		constants[93] = "autonomous";
		constants[94] = "slevel";
		constants[95] = "klevel";
		constants[96] = "getNumericalLevel";
		constants[97] = "hasKnowledgeType";
		constants[98] = "hasKnowledge";
		constants[99] = "getElementsWithoutRelationH";
		constants[100] = "Competency";
		constants[101] = "hasSkill";
		constants[102] = "getElementsWithoutRelation";
		constants[103] = "sortByH";
		constants[104] = "sortBy";
		constants[105] = "alreadySeenByLearners";
		constants[106] = "hasAlreadySeen";
		constants[107] = "true";
		constants[108] = "sortByAlreadySeenH";
		constants[109] = "sortByAlreadySeen";
		constants[110] = "buildPropertyQueryH";
		constants[111] = "buildPropertyQuery";
		constants[112] = "buildRelationQueryH";
		constants[113] = "buildRelationQuery";
		constants[114] = "getLearnerFundCompetencyLevel";
		constants[115] = "hasCompetencyLevel";
		constants[116] = "getLearnerAuxCompetencyLevel";
		constants[117] = "CurrentLDElement";
		constants[118] = "hasFundCompetency";
		constants[119] = "getLearnerCompetencyLevel";
		constants[120] = "Auxiliary";
		constants[121] = "getLearnerCompetencyLevelsH";
		constants[122] = "getLearnerCompetencyLevels";
		constants[123] = "filterLearnersByCompetencyLevelH";
		constants[124] = "filterLearnersByCompetencyLevel";
		constants[125] = "reachedCompetencyLevels";
		constants[126] = "readyAux";
		constants[127] = "hasPrerequisite";
		constants[128] = "getReadyAux";
		constants[129] = "getOrBuildReadyAux";
		constants[130] = "hasTitle";
		constants[131] = "temporarily-auxiliary";
		constants[132] = "getLearnerPropertyQuery";
		constants[133] = "hasEducationalLevel";
		constants[134] = "hasContext";
		constants[135] = "hasDifficult";
		constants[136] = "very-high";
		constants[137] = "high";
		constants[138] = "very-difficult";
		constants[139] = "difficult";
		constants[140] = "medium";
		constants[141] = "low";
		constants[142] = "easy";
		constants[143] = "very-easy";
		constants[144] = "getCompsFromGoalsH";
		constants[145] = "getCompsFromGoals";
		constants[146] = "getCompFromGoals";
		constants[147] = "getLevelsFromGoalsH";
		constants[148] = "getLevelsFromGoals";
		constants[149] = "getLevelFromGoals";
		constants[150] = "getGoalFromAuxiliary";
		constants[151] = "ForAuxiliary";
		constants[152] = "getGoalsFromAuxiliaryHH";
		constants[153] = "getGoalsFromAuxiliary";
		constants[154] = "getGoalsFromAuxiliariesH";
		constants[155] = "hasLearningObjective";
		constants[156] = "getGoalsFromAuxiliaries";
		constants[157] = "getIndGoalsHH";
		constants[158] = "getIndGoalsH";
		constants[159] = "getIndGoals";
		constants[160] = "getIndGoalsByCompHH";
		constants[161] = "getIndGoalsByCompH";
		constants[162] = "getIndGoalsByCompLearnersHH";
		constants[163] = "getIndGoalsByCompLearnersH";
		constants[164] = "filterGoalsByCompH";
		constants[165] = "filterGoalsByComp";
		constants[166] = "filterGoalByGroup";
		constants[167] = "filterGoalsByLevelH";
		constants[168] = "filterGoalsByLevel";
		constants[169] = "filterGroupsByCompH";
		constants[170] = "filterGroupsByComp";
		constants[171] = "getCurrentLearningResourceType";
		constants[172] = "hasLearningResourceType";
		constants[173] = "reachedGoals";
		constants[174] = "getGoalsFromCLStrategiesH";
		constants[175] = "getGoalsFromCLStrategies";
		constants[176] = "getGoalsFromCLGrouping";
		constants[177] = "getGroupsFromCLStrategiesH";
		constants[178] = "getGroupsFromCLStrategies";
		constants[179] = "getGroupsFromCLGrouping";
		constants[180] = "hasMotivation";
		constants[181] = "hasAnxiety";
		constants[182] = "getEducationalLevelHH";
		constants[183] = "training";
		constants[184] = "higher-education";
		constants[185] = "school";
		constants[186] = "other";
		constants[187] = "hasGoal";
		constants[188] = "hasCompetency";
		constants[189] = "hasParticipant";
		constants[190] = "hasCLGroupingTheory";
		constants[191] = "hasCLGroupingStrategy";
		constants[192] = "hasCLGroupingGoal";
		constants[193] = "hasCLGroupingLearners";
		constants[194] = "hasCurrentUoL";
		constants[195] = "hasAttitude";
		constants[196] = "hasIndGoal";
		constants[197] = "hasGoalStage";
		constants[198] = "hasGroup";
		constants[199] = "hasRole";
		constants[200] = "independent";
		constants[201] = "hasBeenSeen";
		constants[202] = "insertedIn";
		constants[203] = "hasType";
		constants[204] = "hasHref";
		constants[205] = "type";
		constants[206] = "href";
		constants[207] = "conditions";
		constants[208] = "ILEvent";
		constants[209] = "Conditions";
		constants[210] = "Role";
		constants[211] = "Instructional";
		constants[212] = "Learning";
		constants[213] = "ILEventItem";
		constants[214] = "Item";
		constants[215] = "if";
		constants[216] = "then";
		constants[217] = "show";
		constants[218] = "hide";
		constants[219] = "else";
		constants[220] = "_or";
		constants[221] = "is-member-of-role";
		constants[222] = "ref";
		constants[223] = "item-ref";
		constants[224] = "service";
		constants[225] = "identifier";
		constants[226] = "serv";
		constants[227] = "isvisible";
		constants[228] = "hasPersonality";
		constants[229] = "introversion";
		constants[230] = "Service";
		constants[231] = "asynchronous";
		constants[232] = "conference";
		constants[233] = "conference-type";
		constants[234] = "Asynchronous";
		constants[235] = "Conference";
		constants[236] = "synchronous";
		constants[237] = "Synchronous";
		constants[238] = "Group";
		constants[239] = "LDLearner";
		constants[240] = "participant";
		constants[241] = "role-ref";
		constants[242] = "env";
		constants[243] = "environment-ref";
		constants[244] = "environment";
		constants[245] = "Environment";
		constants[246] = "group";
		constants[247] = "learner";
		constants[248] = "information";
		constants[249] = "hasResource";
		constants[250] = "item";
		constants[251] = "identifierref";
		constants[252] = "Resource";
		constants[253] = "fall-back";
		constants[254] = "LearningObject";
		constants[255] = "lo";
		constants[256] = "learning-object";
		constants[257] = "getTitlesH";
		constants[258] = "getTitles";
		constants[259] = "title";
		constants[260] = "rp";
		constants[261] = "role-part";
		constants[262] = "Conclude";
		constants[263] = "GroupActivity";
		constants[264] = "Develop";
		constants[265] = "createLDDevelopSession";
		constants[266] = "Illustrate";
		constants[267] = "Introduction";
		constants[268] = "as";
		constants[269] = "activity-structure-ref";
		constants[270] = "activity-structure";
		constants[271] = "structure-type";
		constants[272] = "sequence";
		constants[273] = "Sessions";
		constants[274] = "very-low";
		constants[275] = "Practice";
		constants[276] = "PracticeWithExercise";
		constants[277] = "ShowConnections";
		constants[278] = "Fundamental";
		constants[279] = "theorem";
		constants[280] = "ShowConnectionsByTheoremWithProof";
		constants[281] = "ativity-structure-ref";
		constants[282] = "DevelopConnection";
		constants[283] = "act";
		constants[284] = "Phase";
		constants[285] = "play";
		constants[286] = "Script";
		constants[287] = "scenario-rehearse";
		constants[288] = "pgoals";
		constants[289] = "filterLearnersByCompetencyLowEqualSkillLevelH";
		constants[290] = "filterLearnersByCompetencyLowEqualSkillLevel";
		constants[291] = "filterLearnersByCompetencyLowEqualKnowledgeLevelH";
		constants[292] = "filterLearnersByCompetencyLowEqualKnowledgeLevel";
		constants[293] = "filterLearnersByCompetencyLowEqualLevel";
		constants[294] = "scenario-guided-tour";
		constants[295] = "goals";
		constants[296] = "scenario-discover";
		constants[297] = "getGoalsWithIncreasedKnowledgesH";
		constants[298] = "getGoalsWithIncreasedKnowledges";
		constants[299] = "scenario-train";
		constants[300] = "igoals";
		constants[301] = "PracticeWithExercises";
		constants[302] = "UoL";
		constants[303] = "ld";
		constants[304] = "learning-design";
		constants[305] = "uri";
		constants[306] = "level";
		constants[307] = "B";
		constants[308] = "method";
		constants[309] = "unit-of-learning-href";
		constants[310] = "exercise";

		compoundTasks = new String[91];
		compoundTasks[0] = "startLDElement!";
		compoundTasks[1] = "addUsersToGroup";
		compoundTasks[2] = "removeUsersFromGroup";
		compoundTasks[3] = "addUsersToRole";
		compoundTasks[4] = "removeUsersFromRole";
		compoundTasks[5] = "insertResourceOnce";
		compoundTasks[6] = "createLDILEventConditions!";
		compoundTasks[7] = "createLDILEventConditions";
		compoundTasks[8] = "createLDTitle";
		compoundTasks[9] = "createILEventConditions";
		compoundTasks[10] = "distributeLDMemberOfRole";
		compoundTasks[11] = "distributeItemRef";
		compoundTasks[12] = "distributeMemberOfRole";
		compoundTasks[13] = "createConferenceService";
		compoundTasks[14] = "createLDConferenceService";
		compoundTasks[15] = "createLDAsynchronousConference";
		compoundTasks[16] = "createLDSynchronousConference";
		compoundTasks[17] = "createConference";
		compoundTasks[18] = "createLDItem";
		compoundTasks[19] = "distributeParticipants";
		compoundTasks[20] = "createEnvironment";
		compoundTasks[21] = "createLDEnvironment";
		compoundTasks[22] = "distributeLearningObject";
		compoundTasks[23] = "createLDGroup!";
		compoundTasks[24] = "createLDGroup";
		compoundTasks[25] = "createGroup";
		compoundTasks[26] = "distributeItem";
		compoundTasks[27] = "createLDInformation";
		compoundTasks[28] = "createLDItem!";
		compoundTasks[29] = "createLDInstructItem";
		compoundTasks[30] = "createLDLearningItem";
		compoundTasks[31] = "createLDLearningObject";
		compoundTasks[32] = "createLDLearningObject!";
		compoundTasks[33] = "createLearningObject";
		compoundTasks[34] = "createConcludeGroupActivity";
		compoundTasks[35] = "createLDConcludeGroupActivity";
		compoundTasks[36] = "createLDConcludeWithSummarySession";
		compoundTasks[37] = "createDevelopGroupActivity";
		compoundTasks[38] = "createLDDevelopGroupActivity";
		compoundTasks[39] = "createIllustrateGroupActivity";
		compoundTasks[40] = "createLDIllustrateGroupActivity";
		compoundTasks[41] = "createLDIllustrateWithExampleSession";
		compoundTasks[42] = "createIntroductionGroupActivity";
		compoundTasks[43] = "createLDIntroductionGroupActivity";
		compoundTasks[44] = "createLDIntroductionSessions";
		compoundTasks[45] = "createIntroductionSessions";
		compoundTasks[46] = "createLDMotivationSession";
		compoundTasks[47] = "createLDShowProblemSession";
		compoundTasks[48] = "createPracticeGroupActivity";
		compoundTasks[49] = "createLDPracticeGroupActivity";
		compoundTasks[50] = "createLDPracticeWithExercisesUoL";
		compoundTasks[51] = "createPracticeWithExerciseGroupActivity";
		compoundTasks[52] = "createLDPracticeWithExerciseGroupActivity";
		compoundTasks[53] = "createLDPracticeWithExerciseSession";
		compoundTasks[54] = "createShowConnectionsGroupActivity";
		compoundTasks[55] = "createLDShowConnectionsGroupActivity";
		compoundTasks[56] = "createLDShowConnectionsByTheoremWithProofSessions";
		compoundTasks[57] = "createLDShowConnectionsByCMapSession";
		compoundTasks[58] = "createShowConnectionsByTheoremWithProofSessions";
		compoundTasks[59] = "distributeShowTheoremWithProofSessions";
		compoundTasks[60] = "createLDDevelopConnectionSessions";
		compoundTasks[61] = "createDevelopConnectionSessions";
		compoundTasks[62] = "createLDDevelopSession";
		compoundTasks[63] = "createConcludePhase";
		compoundTasks[64] = "createLDConcludePhase";
		compoundTasks[65] = "createDevelopPhase";
		compoundTasks[66] = "createLDDevelopPhase";
		compoundTasks[67] = "distributeDevelopGroupActivityByLevels";
		compoundTasks[68] = "createIllustratePhase";
		compoundTasks[69] = "createLDIllustratePhase";
		compoundTasks[70] = "distributeIllustrateGroupActivityByLevels";
		compoundTasks[71] = "createIntroductionPhase";
		compoundTasks[72] = "createLDIntroductionPhase";
		compoundTasks[73] = "distributeIntroductionGroupActivityByLevels";
		compoundTasks[74] = "createPracticePhase";
		compoundTasks[75] = "createLDPracticePhase";
		compoundTasks[76] = "createPracticeWithExercisePhase";
		compoundTasks[77] = "createLDPracticeWithExercisePhase";
		compoundTasks[78] = "distributePracticeWithExerciseGroupActivityByCLGroups";
		compoundTasks[79] = "createShowConnectionsPhase";
		compoundTasks[80] = "createLDShowConnectionsPhase";
		compoundTasks[81] = "createFundamentalScript";
		compoundTasks[82] = "createLDFundamentalScript";
		compoundTasks[83] = "distributePracticePhase";
		compoundTasks[84] = "createPracticeWithExercisesScript";
		compoundTasks[85] = "createLDPracticeWithExercisesScript";
		compoundTasks[86] = "distributePracticeWithExercisePhase";
		compoundTasks[87] = "createFundamentalUoL";
		compoundTasks[88] = "createLDFundamentalUoL";
		compoundTasks[89] = "distributeFundamentalScriptByComps";
		compoundTasks[90] = "createPracticeWithExercisesUoL";

		primitiveTasks = new String[17];
		primitiveTasks[0] = "!!addInWorldState";
		primitiveTasks[1] = "!!removeFromWorldState";
		primitiveTasks[2] = "!startLDElement";
		primitiveTasks[3] = "!endLDElement";
		primitiveTasks[4] = "!!changeIndGoals";
		primitiveTasks[5] = "!!changeCurrentLDElement";
		primitiveTasks[6] = "!!changeLearningResourceType";
		primitiveTasks[7] = "!!changeFundCompetency";
		primitiveTasks[8] = "!addUserToGroup";
		primitiveTasks[9] = "!removeUserFromGroup";
		primitiveTasks[10] = "!addUserToRole";
		primitiveTasks[11] = "!removeUserFromRole";
		primitiveTasks[12] = "!!changeCLGrouping";
		primitiveTasks[13] = "!text";
		primitiveTasks[14] = "!insertElement";
		primitiveTasks[15] = "!insertResource";
		primitiveTasks[16] = "!!addInWorldStateAsAlreadySeen";

		initializeTermVariables(21);

		initializeTermConstants();

		methods = new Method[91][];

		methods[0] = new Method[1];
		methods[0][0] = new Method0(this);

		methods[1] = new Method[2];
		methods[1][0] = new Method1(this);
		methods[1][1] = new Method2(this);

		methods[2] = new Method[2];
		methods[2][0] = new Method3(this);
		methods[2][1] = new Method4(this);

		methods[3] = new Method[2];
		methods[3][0] = new Method5(this);
		methods[3][1] = new Method6(this);

		methods[4] = new Method[2];
		methods[4][0] = new Method7(this);
		methods[4][1] = new Method8(this);

		methods[5] = new Method[1];
		methods[5][0] = new Method9(this);

		methods[6] = new Method[1];
		methods[6][0] = new Method12(this);

		methods[7] = new Method[2];
		methods[7][0] = new Method10(this);
		methods[7][1] = new Method11(this);

		methods[8] = new Method[3];
		methods[8][0] = new Method49(this);
		methods[8][1] = new Method50(this);
		methods[8][2] = new Method51(this);

		methods[9] = new Method[1];
		methods[9][0] = new Method13(this);

		methods[10] = new Method[1];
		methods[10][0] = new Method14(this);

		methods[11] = new Method[2];
		methods[11][0] = new Method17(this);
		methods[11][1] = new Method18(this);

		methods[12] = new Method[2];
		methods[12][0] = new Method15(this);
		methods[12][1] = new Method16(this);

		methods[13] = new Method[1];
		methods[13][0] = new Method20(this);

		methods[14] = new Method[1];
		methods[14][0] = new Method19(this);

		methods[15] = new Method[1];
		methods[15][0] = new Method21(this);

		methods[16] = new Method[1];
		methods[16][0] = new Method22(this);

		methods[17] = new Method[1];
		methods[17][0] = new Method23(this);

		methods[18] = new Method[3];
		methods[18][0] = new Method33(this);
		methods[18][1] = new Method35(this);
		methods[18][2] = new Method38(this);

		methods[19] = new Method[2];
		methods[19][0] = new Method24(this);
		methods[19][1] = new Method25(this);

		methods[20] = new Method[1];
		methods[20][0] = new Method27(this);

		methods[21] = new Method[1];
		methods[21][0] = new Method26(this);

		methods[22] = new Method[2];
		methods[22][0] = new Method43(this);
		methods[22][1] = new Method44(this);

		methods[23] = new Method[1];
		methods[23][0] = new Method29(this);

		methods[24] = new Method[2];
		methods[24][0] = new Method28(this);
		methods[24][1] = new Method30(this);

		methods[25] = new Method[1];
		methods[25][0] = new Method31(this);

		methods[26] = new Method[4];
		methods[26][0] = new Method36(this);
		methods[26][1] = new Method37(this);
		methods[26][2] = new Method39(this);
		methods[26][3] = new Method40(this);

		methods[27] = new Method[1];
		methods[27][0] = new Method32(this);

		methods[28] = new Method[1];
		methods[28][0] = new Method34(this);

		methods[29] = new Method[1];
		methods[29][0] = new Method41(this);

		methods[30] = new Method[1];
		methods[30][0] = new Method42(this);

		methods[31] = new Method[2];
		methods[31][0] = new Method45(this);
		methods[31][1] = new Method47(this);

		methods[32] = new Method[1];
		methods[32][0] = new Method46(this);

		methods[33] = new Method[1];
		methods[33][0] = new Method48(this);

		methods[34] = new Method[1];
		methods[34][0] = new Method53(this);

		methods[35] = new Method[1];
		methods[35][0] = new Method52(this);

		methods[36] = new Method[0];

		methods[37] = new Method[1];
		methods[37][0] = new Method55(this);

		methods[38] = new Method[1];
		methods[38][0] = new Method54(this);

		methods[39] = new Method[1];
		methods[39][0] = new Method57(this);

		methods[40] = new Method[1];
		methods[40][0] = new Method56(this);

		methods[41] = new Method[0];

		methods[42] = new Method[1];
		methods[42][0] = new Method59(this);

		methods[43] = new Method[1];
		methods[43][0] = new Method58(this);

		methods[44] = new Method[1];
		methods[44][0] = new Method60(this);

		methods[45] = new Method[2];
		methods[45][0] = new Method61(this);
		methods[45][1] = new Method62(this);

		methods[46] = new Method[0];

		methods[47] = new Method[0];

		methods[48] = new Method[1];
		methods[48][0] = new Method64(this);

		methods[49] = new Method[1];
		methods[49][0] = new Method63(this);

		methods[50] = new Method[1];
		methods[50][0] = new Method112(this);

		methods[51] = new Method[1];
		methods[51][0] = new Method66(this);

		methods[52] = new Method[1];
		methods[52][0] = new Method65(this);

		methods[53] = new Method[0];

		methods[54] = new Method[2];
		methods[54][0] = new Method68(this);
		methods[54][1] = new Method69(this);

		methods[55] = new Method[1];
		methods[55][0] = new Method67(this);

		methods[56] = new Method[1];
		methods[56][0] = new Method70(this);

		methods[57] = new Method[0];

		methods[58] = new Method[1];
		methods[58][0] = new Method71(this);

		methods[59] = new Method[2];
		methods[59][0] = new Method72(this);
		methods[59][1] = new Method73(this);

		methods[60] = new Method[1];
		methods[60][0] = new Method74(this);

		methods[61] = new Method[1];
		methods[61][0] = new Method75(this);

		methods[62] = new Method[0];

		methods[63] = new Method[1];
		methods[63][0] = new Method77(this);

		methods[64] = new Method[1];
		methods[64][0] = new Method76(this);

		methods[65] = new Method[1];
		methods[65][0] = new Method79(this);

		methods[66] = new Method[1];
		methods[66][0] = new Method78(this);

		methods[67] = new Method[2];
		methods[67][0] = new Method80(this);
		methods[67][1] = new Method81(this);

		methods[68] = new Method[1];
		methods[68][0] = new Method83(this);

		methods[69] = new Method[1];
		methods[69][0] = new Method82(this);

		methods[70] = new Method[2];
		methods[70][0] = new Method84(this);
		methods[70][1] = new Method85(this);

		methods[71] = new Method[1];
		methods[71][0] = new Method87(this);

		methods[72] = new Method[1];
		methods[72][0] = new Method86(this);

		methods[73] = new Method[2];
		methods[73][0] = new Method88(this);
		methods[73][1] = new Method89(this);

		methods[74] = new Method[1];
		methods[74][0] = new Method91(this);

		methods[75] = new Method[1];
		methods[75][0] = new Method90(this);

		methods[76] = new Method[1];
		methods[76][0] = new Method93(this);

		methods[77] = new Method[1];
		methods[77][0] = new Method92(this);

		methods[78] = new Method[2];
		methods[78][0] = new Method94(this);
		methods[78][1] = new Method95(this);

		methods[79] = new Method[1];
		methods[79][0] = new Method97(this);

		methods[80] = new Method[1];
		methods[80][0] = new Method96(this);

		methods[81] = new Method[4];
		methods[81][0] = new Method99(this);
		methods[81][1] = new Method100(this);
		methods[81][2] = new Method101(this);
		methods[81][3] = new Method102(this);

		methods[82] = new Method[1];
		methods[82][0] = new Method98(this);

		methods[83] = new Method[2];
		methods[83][0] = new Method103(this);
		methods[83][1] = new Method104(this);

		methods[84] = new Method[1];
		methods[84][0] = new Method106(this);

		methods[85] = new Method[1];
		methods[85][0] = new Method105(this);

		methods[86] = new Method[1];
		methods[86][0] = new Method107(this);

		methods[87] = new Method[1];
		methods[87][0] = new Method109(this);

		methods[88] = new Method[1];
		methods[88][0] = new Method108(this);

		methods[89] = new Method[2];
		methods[89][0] = new Method110(this);
		methods[89][1] = new Method111(this);

		methods[90] = new Method[1];
		methods[90][0] = new Method113(this);


		ops = new Operator[17][];

		ops[0] = new Operator[1];
		ops[0][0] = new Operator0(this);

		ops[1] = new Operator[1];
		ops[1][0] = new Operator1(this);

		ops[2] = new Operator[4];
		ops[2][0] = new Operator2(this);
		ops[2][1] = new Operator3(this);
		ops[2][2] = new Operator5(this);
		ops[2][3] = new Operator6(this);

		ops[3] = new Operator[2];
		ops[3][0] = new Operator4(this);
		ops[3][1] = new Operator7(this);

		ops[4] = new Operator[1];
		ops[4][0] = new Operator8(this);

		ops[5] = new Operator[1];
		ops[5][0] = new Operator9(this);

		ops[6] = new Operator[1];
		ops[6][0] = new Operator10(this);

		ops[7] = new Operator[1];
		ops[7][0] = new Operator11(this);

		ops[8] = new Operator[1];
		ops[8][0] = new Operator12(this);

		ops[9] = new Operator[1];
		ops[9][0] = new Operator13(this);

		ops[10] = new Operator[1];
		ops[10][0] = new Operator14(this);

		ops[11] = new Operator[1];
		ops[11][0] = new Operator15(this);

		ops[12] = new Operator[4];
		ops[12][0] = new Operator16(this);
		ops[12][1] = new Operator17(this);
		ops[12][2] = new Operator18(this);
		ops[12][3] = new Operator19(this);

		ops[13] = new Operator[1];
		ops[13][0] = new Operator20(this);

		ops[14] = new Operator[1];
		ops[14][0] = new Operator21(this);

		ops[15] = new Operator[1];
		ops[15][0] = new Operator22(this);

		ops[16] = new Operator[1];
		ops[16][0] = new Operator23(this);

		axioms = new Axiom[311][];

		axioms[0] = new Axiom[1];
		axioms[0][0] = new Axiom0(this);

		axioms[1] = new Axiom[1];
		axioms[1][0] = new Axiom1(this);

		axioms[2] = new Axiom[1];
		axioms[2][0] = new Axiom2(this);

		axioms[3] = new Axiom[2];
		axioms[3][0] = new Axiom3(this);
		axioms[3][1] = new Axiom4(this);

		axioms[4] = new Axiom[1];
		axioms[4][0] = new Axiom5(this);

		axioms[5] = new Axiom[1];
		axioms[5][0] = new Axiom6(this);

		axioms[6] = new Axiom[2];
		axioms[6][0] = new Axiom7(this);
		axioms[6][1] = new Axiom8(this);

		axioms[7] = new Axiom[2];
		axioms[7][0] = new Axiom9(this);
		axioms[7][1] = new Axiom10(this);

		axioms[8] = new Axiom[1];
		axioms[8][0] = new Axiom11(this);

		axioms[9] = new Axiom[2];
		axioms[9][0] = new Axiom12(this);
		axioms[9][1] = new Axiom13(this);

		axioms[10] = new Axiom[1];
		axioms[10][0] = new Axiom14(this);

		axioms[11] = new Axiom[1];
		axioms[11][0] = new Axiom15(this);

		axioms[12] = new Axiom[3];
		axioms[12][0] = new Axiom16(this);
		axioms[12][1] = new Axiom17(this);
		axioms[12][2] = new Axiom18(this);

		axioms[13] = new Axiom[3];
		axioms[13][0] = new Axiom19(this);
		axioms[13][1] = new Axiom20(this);
		axioms[13][2] = new Axiom21(this);

		axioms[14] = new Axiom[1];
		axioms[14][0] = new Axiom22(this);

		axioms[15] = new Axiom[0];

		axioms[16] = new Axiom[0];

		axioms[17] = new Axiom[3];
		axioms[17][0] = new Axiom23(this);
		axioms[17][1] = new Axiom24(this);
		axioms[17][2] = new Axiom25(this);

		axioms[18] = new Axiom[0];

		axioms[19] = new Axiom[0];

		axioms[20] = new Axiom[0];

		axioms[21] = new Axiom[0];

		axioms[22] = new Axiom[0];

		axioms[23] = new Axiom[20];
		axioms[23][0] = new Axiom26(this);
		axioms[23][1] = new Axiom27(this);
		axioms[23][2] = new Axiom28(this);
		axioms[23][3] = new Axiom29(this);
		axioms[23][4] = new Axiom30(this);
		axioms[23][5] = new Axiom31(this);
		axioms[23][6] = new Axiom32(this);
		axioms[23][7] = new Axiom33(this);
		axioms[23][8] = new Axiom34(this);
		axioms[23][9] = new Axiom35(this);
		axioms[23][10] = new Axiom36(this);
		axioms[23][11] = new Axiom37(this);
		axioms[23][12] = new Axiom38(this);
		axioms[23][13] = new Axiom39(this);
		axioms[23][14] = new Axiom40(this);
		axioms[23][15] = new Axiom41(this);
		axioms[23][16] = new Axiom42(this);
		axioms[23][17] = new Axiom43(this);
		axioms[23][18] = new Axiom44(this);
		axioms[23][19] = new Axiom45(this);

		axioms[24] = new Axiom[0];

		axioms[25] = new Axiom[0];

		axioms[26] = new Axiom[0];

		axioms[27] = new Axiom[0];

		axioms[28] = new Axiom[0];

		axioms[29] = new Axiom[0];

		axioms[30] = new Axiom[0];

		axioms[31] = new Axiom[0];

		axioms[32] = new Axiom[0];

		axioms[33] = new Axiom[0];

		axioms[34] = new Axiom[0];

		axioms[35] = new Axiom[0];

		axioms[36] = new Axiom[0];

		axioms[37] = new Axiom[0];

		axioms[38] = new Axiom[0];

		axioms[39] = new Axiom[0];

		axioms[40] = new Axiom[0];

		axioms[41] = new Axiom[0];

		axioms[42] = new Axiom[0];

		axioms[43] = new Axiom[9];
		axioms[43][0] = new Axiom46(this);
		axioms[43][1] = new Axiom47(this);
		axioms[43][2] = new Axiom48(this);
		axioms[43][3] = new Axiom49(this);
		axioms[43][4] = new Axiom50(this);
		axioms[43][5] = new Axiom51(this);
		axioms[43][6] = new Axiom52(this);
		axioms[43][7] = new Axiom53(this);
		axioms[43][8] = new Axiom54(this);

		axioms[44] = new Axiom[0];

		axioms[45] = new Axiom[0];

		axioms[46] = new Axiom[0];

		axioms[47] = new Axiom[2];
		axioms[47][0] = new Axiom55(this);
		axioms[47][1] = new Axiom56(this);

		axioms[48] = new Axiom[2];
		axioms[48][0] = new Axiom57(this);
		axioms[48][1] = new Axiom58(this);

		axioms[49] = new Axiom[3];
		axioms[49][0] = new Axiom59(this);
		axioms[49][1] = new Axiom60(this);
		axioms[49][2] = new Axiom61(this);

		axioms[50] = new Axiom[1];
		axioms[50][0] = new Axiom62(this);

		axioms[51] = new Axiom[3];
		axioms[51][0] = new Axiom63(this);
		axioms[51][1] = new Axiom64(this);
		axioms[51][2] = new Axiom65(this);

		axioms[52] = new Axiom[1];
		axioms[52][0] = new Axiom66(this);

		axioms[53] = new Axiom[3];
		axioms[53][0] = new Axiom67(this);
		axioms[53][1] = new Axiom68(this);
		axioms[53][2] = new Axiom69(this);

		axioms[54] = new Axiom[1];
		axioms[54][0] = new Axiom70(this);

		axioms[55] = new Axiom[3];
		axioms[55][0] = new Axiom71(this);
		axioms[55][1] = new Axiom72(this);
		axioms[55][2] = new Axiom73(this);

		axioms[56] = new Axiom[1];
		axioms[56][0] = new Axiom75(this);

		axioms[57] = new Axiom[1];
		axioms[57][0] = new Axiom74(this);

		axioms[58] = new Axiom[4];
		axioms[58][0] = new Axiom76(this);
		axioms[58][1] = new Axiom77(this);
		axioms[58][2] = new Axiom78(this);
		axioms[58][3] = new Axiom79(this);

		axioms[59] = new Axiom[1];
		axioms[59][0] = new Axiom80(this);

		axioms[60] = new Axiom[1];
		axioms[60][0] = new Axiom81(this);

		axioms[61] = new Axiom[1];
		axioms[61][0] = new Axiom82(this);

		axioms[62] = new Axiom[2];
		axioms[62][0] = new Axiom83(this);
		axioms[62][1] = new Axiom84(this);

		axioms[63] = new Axiom[2];
		axioms[63][0] = new Axiom85(this);
		axioms[63][1] = new Axiom88(this);

		axioms[64] = new Axiom[1];
		axioms[64][0] = new Axiom86(this);

		axioms[65] = new Axiom[1];
		axioms[65][0] = new Axiom87(this);

		axioms[66] = new Axiom[1];
		axioms[66][0] = new Axiom89(this);

		axioms[67] = new Axiom[4];
		axioms[67][0] = new Axiom90(this);
		axioms[67][1] = new Axiom91(this);
		axioms[67][2] = new Axiom97(this);
		axioms[67][3] = new Axiom98(this);

		axioms[68] = new Axiom[4];
		axioms[68][0] = new Axiom92(this);
		axioms[68][1] = new Axiom95(this);
		axioms[68][2] = new Axiom99(this);
		axioms[68][3] = new Axiom102(this);

		axioms[69] = new Axiom[2];
		axioms[69][0] = new Axiom93(this);
		axioms[69][1] = new Axiom100(this);

		axioms[70] = new Axiom[2];
		axioms[70][0] = new Axiom94(this);
		axioms[70][1] = new Axiom101(this);

		axioms[71] = new Axiom[2];
		axioms[71][0] = new Axiom96(this);
		axioms[71][1] = new Axiom103(this);

		axioms[72] = new Axiom[5];
		axioms[72][0] = new Axiom104(this);
		axioms[72][1] = new Axiom105(this);
		axioms[72][2] = new Axiom112(this);
		axioms[72][3] = new Axiom113(this);
		axioms[72][4] = new Axiom114(this);

		axioms[73] = new Axiom[4];
		axioms[73][0] = new Axiom106(this);
		axioms[73][1] = new Axiom110(this);
		axioms[73][2] = new Axiom115(this);
		axioms[73][3] = new Axiom116(this);

		axioms[74] = new Axiom[1];
		axioms[74][0] = new Axiom107(this);

		axioms[75] = new Axiom[1];
		axioms[75][0] = new Axiom108(this);

		axioms[76] = new Axiom[1];
		axioms[76][0] = new Axiom109(this);

		axioms[77] = new Axiom[1];
		axioms[77][0] = new Axiom111(this);

		axioms[78] = new Axiom[2];
		axioms[78][0] = new Axiom117(this);
		axioms[78][1] = new Axiom118(this);

		axioms[79] = new Axiom[1];
		axioms[79][0] = new Axiom119(this);

		axioms[80] = new Axiom[0];

		axioms[81] = new Axiom[3];
		axioms[81][0] = new Axiom120(this);
		axioms[81][1] = new Axiom121(this);
		axioms[81][2] = new Axiom122(this);

		axioms[82] = new Axiom[0];

		axioms[83] = new Axiom[0];

		axioms[84] = new Axiom[0];

		axioms[85] = new Axiom[0];

		axioms[86] = new Axiom[20];
		axioms[86][0] = new Axiom123(this);
		axioms[86][1] = new Axiom124(this);
		axioms[86][2] = new Axiom125(this);
		axioms[86][3] = new Axiom126(this);
		axioms[86][4] = new Axiom127(this);
		axioms[86][5] = new Axiom128(this);
		axioms[86][6] = new Axiom129(this);
		axioms[86][7] = new Axiom130(this);
		axioms[86][8] = new Axiom131(this);
		axioms[86][9] = new Axiom132(this);
		axioms[86][10] = new Axiom133(this);
		axioms[86][11] = new Axiom134(this);
		axioms[86][12] = new Axiom135(this);
		axioms[86][13] = new Axiom136(this);
		axioms[86][14] = new Axiom137(this);
		axioms[86][15] = new Axiom138(this);
		axioms[86][16] = new Axiom139(this);
		axioms[86][17] = new Axiom140(this);
		axioms[86][18] = new Axiom141(this);
		axioms[86][19] = new Axiom142(this);

		axioms[87] = new Axiom[0];

		axioms[88] = new Axiom[0];

		axioms[89] = new Axiom[0];

		axioms[90] = new Axiom[0];

		axioms[91] = new Axiom[0];

		axioms[92] = new Axiom[0];

		axioms[93] = new Axiom[0];

		axioms[94] = new Axiom[6];
		axioms[94][0] = new Axiom143(this);
		axioms[94][1] = new Axiom144(this);
		axioms[94][2] = new Axiom145(this);
		axioms[94][3] = new Axiom146(this);
		axioms[94][4] = new Axiom147(this);
		axioms[94][5] = new Axiom148(this);

		axioms[95] = new Axiom[5];
		axioms[95][0] = new Axiom149(this);
		axioms[95][1] = new Axiom150(this);
		axioms[95][2] = new Axiom151(this);
		axioms[95][3] = new Axiom152(this);
		axioms[95][4] = new Axiom153(this);

		axioms[96] = new Axiom[1];
		axioms[96][0] = new Axiom154(this);

		axioms[97] = new Axiom[1];
		axioms[97][0] = new Axiom155(this);

		axioms[98] = new Axiom[0];

		axioms[99] = new Axiom[2];
		axioms[99][0] = new Axiom156(this);
		axioms[99][1] = new Axiom157(this);

		axioms[100] = new Axiom[0];

		axioms[101] = new Axiom[0];

		axioms[102] = new Axiom[1];
		axioms[102][0] = new Axiom158(this);

		axioms[103] = new Axiom[2];
		axioms[103][0] = new Axiom159(this);
		axioms[103][1] = new Axiom160(this);

		axioms[104] = new Axiom[1];
		axioms[104][0] = new Axiom161(this);

		axioms[105] = new Axiom[1];
		axioms[105][0] = new Axiom162(this);

		axioms[106] = new Axiom[0];

		axioms[107] = new Axiom[0];

		axioms[108] = new Axiom[2];
		axioms[108][0] = new Axiom163(this);
		axioms[108][1] = new Axiom164(this);

		axioms[109] = new Axiom[1];
		axioms[109][0] = new Axiom165(this);

		axioms[110] = new Axiom[4];
		axioms[110][0] = new Axiom166(this);
		axioms[110][1] = new Axiom167(this);
		axioms[110][2] = new Axiom169(this);
		axioms[110][3] = new Axiom170(this);

		axioms[111] = new Axiom[2];
		axioms[111][0] = new Axiom168(this);
		axioms[111][1] = new Axiom171(this);

		axioms[112] = new Axiom[2];
		axioms[112][0] = new Axiom172(this);
		axioms[112][1] = new Axiom173(this);

		axioms[113] = new Axiom[1];
		axioms[113][0] = new Axiom174(this);

		axioms[114] = new Axiom[1];
		axioms[114][0] = new Axiom175(this);

		axioms[115] = new Axiom[0];

		axioms[116] = new Axiom[1];
		axioms[116][0] = new Axiom176(this);

		axioms[117] = new Axiom[0];

		axioms[118] = new Axiom[0];

		axioms[119] = new Axiom[1];
		axioms[119][0] = new Axiom177(this);

		axioms[120] = new Axiom[0];

		axioms[121] = new Axiom[2];
		axioms[121][0] = new Axiom178(this);
		axioms[121][1] = new Axiom179(this);

		axioms[122] = new Axiom[1];
		axioms[122][0] = new Axiom180(this);

		axioms[123] = new Axiom[2];
		axioms[123][0] = new Axiom181(this);
		axioms[123][1] = new Axiom182(this);

		axioms[124] = new Axiom[1];
		axioms[124][0] = new Axiom183(this);

		axioms[125] = new Axiom[2];
		axioms[125][0] = new Axiom184(this);
		axioms[125][1] = new Axiom185(this);

		axioms[126] = new Axiom[1];
		axioms[126][0] = new Axiom186(this);

		axioms[127] = new Axiom[0];

		axioms[128] = new Axiom[1];
		axioms[128][0] = new Axiom187(this);

		axioms[129] = new Axiom[1];
		axioms[129][0] = new Axiom188(this);

		axioms[130] = new Axiom[0];

		axioms[131] = new Axiom[0];

		axioms[132] = new Axiom[2];
		axioms[132][0] = new Axiom189(this);
		axioms[132][1] = new Axiom190(this);

		axioms[133] = new Axiom[0];

		axioms[134] = new Axiom[0];

		axioms[135] = new Axiom[0];

		axioms[136] = new Axiom[0];

		axioms[137] = new Axiom[0];

		axioms[138] = new Axiom[0];

		axioms[139] = new Axiom[0];

		axioms[140] = new Axiom[0];

		axioms[141] = new Axiom[0];

		axioms[142] = new Axiom[0];

		axioms[143] = new Axiom[0];

		axioms[144] = new Axiom[2];
		axioms[144][0] = new Axiom191(this);
		axioms[144][1] = new Axiom192(this);

		axioms[145] = new Axiom[1];
		axioms[145][0] = new Axiom193(this);

		axioms[146] = new Axiom[1];
		axioms[146][0] = new Axiom194(this);

		axioms[147] = new Axiom[2];
		axioms[147][0] = new Axiom195(this);
		axioms[147][1] = new Axiom196(this);

		axioms[148] = new Axiom[1];
		axioms[148][0] = new Axiom197(this);

		axioms[149] = new Axiom[1];
		axioms[149][0] = new Axiom198(this);

		axioms[150] = new Axiom[1];
		axioms[150][0] = new Axiom199(this);

		axioms[151] = new Axiom[0];

		axioms[152] = new Axiom[2];
		axioms[152][0] = new Axiom200(this);
		axioms[152][1] = new Axiom201(this);

		axioms[153] = new Axiom[1];
		axioms[153][0] = new Axiom202(this);

		axioms[154] = new Axiom[2];
		axioms[154][0] = new Axiom203(this);
		axioms[154][1] = new Axiom204(this);

		axioms[155] = new Axiom[0];

		axioms[156] = new Axiom[1];
		axioms[156][0] = new Axiom205(this);

		axioms[157] = new Axiom[2];
		axioms[157][0] = new Axiom206(this);
		axioms[157][1] = new Axiom207(this);

		axioms[158] = new Axiom[2];
		axioms[158][0] = new Axiom208(this);
		axioms[158][1] = new Axiom209(this);

		axioms[159] = new Axiom[6];
		axioms[159][0] = new Axiom210(this);
		axioms[159][1] = new Axiom211(this);
		axioms[159][2] = new Axiom216(this);
		axioms[159][3] = new Axiom217(this);
		axioms[159][4] = new Axiom222(this);
		axioms[159][5] = new Axiom223(this);

		axioms[160] = new Axiom[2];
		axioms[160][0] = new Axiom212(this);
		axioms[160][1] = new Axiom213(this);

		axioms[161] = new Axiom[2];
		axioms[161][0] = new Axiom214(this);
		axioms[161][1] = new Axiom215(this);

		axioms[162] = new Axiom[2];
		axioms[162][0] = new Axiom218(this);
		axioms[162][1] = new Axiom219(this);

		axioms[163] = new Axiom[2];
		axioms[163][0] = new Axiom220(this);
		axioms[163][1] = new Axiom221(this);

		axioms[164] = new Axiom[2];
		axioms[164][0] = new Axiom224(this);
		axioms[164][1] = new Axiom225(this);

		axioms[165] = new Axiom[1];
		axioms[165][0] = new Axiom226(this);

		axioms[166] = new Axiom[2];
		axioms[166][0] = new Axiom227(this);
		axioms[166][1] = new Axiom228(this);

		axioms[167] = new Axiom[2];
		axioms[167][0] = new Axiom229(this);
		axioms[167][1] = new Axiom230(this);

		axioms[168] = new Axiom[1];
		axioms[168][0] = new Axiom231(this);

		axioms[169] = new Axiom[2];
		axioms[169][0] = new Axiom232(this);
		axioms[169][1] = new Axiom233(this);

		axioms[170] = new Axiom[1];
		axioms[170][0] = new Axiom234(this);

		axioms[171] = new Axiom[1];
		axioms[171][0] = new Axiom235(this);

		axioms[172] = new Axiom[0];

		axioms[173] = new Axiom[2];
		axioms[173][0] = new Axiom236(this);
		axioms[173][1] = new Axiom237(this);

		axioms[174] = new Axiom[2];
		axioms[174][0] = new Axiom238(this);
		axioms[174][1] = new Axiom239(this);

		axioms[175] = new Axiom[1];
		axioms[175][0] = new Axiom240(this);

		axioms[176] = new Axiom[1];
		axioms[176][0] = new Axiom241(this);

		axioms[177] = new Axiom[2];
		axioms[177][0] = new Axiom242(this);
		axioms[177][1] = new Axiom243(this);

		axioms[178] = new Axiom[1];
		axioms[178][0] = new Axiom244(this);

		axioms[179] = new Axiom[1];
		axioms[179][0] = new Axiom245(this);

		axioms[180] = new Axiom[0];

		axioms[181] = new Axiom[0];

		axioms[182] = new Axiom[1];
		axioms[182][0] = new Axiom246(this);

		axioms[183] = new Axiom[0];

		axioms[184] = new Axiom[0];

		axioms[185] = new Axiom[0];

		axioms[186] = new Axiom[0];

		axioms[187] = new Axiom[0];

		axioms[188] = new Axiom[0];

		axioms[189] = new Axiom[0];

		axioms[190] = new Axiom[0];

		axioms[191] = new Axiom[0];

		axioms[192] = new Axiom[0];

		axioms[193] = new Axiom[0];

		axioms[194] = new Axiom[0];

		axioms[195] = new Axiom[0];

		axioms[196] = new Axiom[0];

		axioms[197] = new Axiom[0];

		axioms[198] = new Axiom[0];

		axioms[199] = new Axiom[0];

		axioms[200] = new Axiom[0];

		axioms[201] = new Axiom[0];

		axioms[202] = new Axiom[0];

		axioms[203] = new Axiom[0];

		axioms[204] = new Axiom[0];

		axioms[205] = new Axiom[0];

		axioms[206] = new Axiom[0];

		axioms[207] = new Axiom[0];

		axioms[208] = new Axiom[0];

		axioms[209] = new Axiom[0];

		axioms[210] = new Axiom[0];

		axioms[211] = new Axiom[0];

		axioms[212] = new Axiom[0];

		axioms[213] = new Axiom[0];

		axioms[214] = new Axiom[0];

		axioms[215] = new Axiom[0];

		axioms[216] = new Axiom[0];

		axioms[217] = new Axiom[0];

		axioms[218] = new Axiom[0];

		axioms[219] = new Axiom[0];

		axioms[220] = new Axiom[0];

		axioms[221] = new Axiom[0];

		axioms[222] = new Axiom[0];

		axioms[223] = new Axiom[0];

		axioms[224] = new Axiom[0];

		axioms[225] = new Axiom[0];

		axioms[226] = new Axiom[0];

		axioms[227] = new Axiom[0];

		axioms[228] = new Axiom[0];

		axioms[229] = new Axiom[0];

		axioms[230] = new Axiom[0];

		axioms[231] = new Axiom[0];

		axioms[232] = new Axiom[0];

		axioms[233] = new Axiom[0];

		axioms[234] = new Axiom[0];

		axioms[235] = new Axiom[0];

		axioms[236] = new Axiom[0];

		axioms[237] = new Axiom[0];

		axioms[238] = new Axiom[0];

		axioms[239] = new Axiom[0];

		axioms[240] = new Axiom[0];

		axioms[241] = new Axiom[0];

		axioms[242] = new Axiom[0];

		axioms[243] = new Axiom[0];

		axioms[244] = new Axiom[0];

		axioms[245] = new Axiom[0];

		axioms[246] = new Axiom[0];

		axioms[247] = new Axiom[0];

		axioms[248] = new Axiom[0];

		axioms[249] = new Axiom[0];

		axioms[250] = new Axiom[0];

		axioms[251] = new Axiom[0];

		axioms[252] = new Axiom[0];

		axioms[253] = new Axiom[0];

		axioms[254] = new Axiom[0];

		axioms[255] = new Axiom[0];

		axioms[256] = new Axiom[0];

		axioms[257] = new Axiom[2];
		axioms[257][0] = new Axiom247(this);
		axioms[257][1] = new Axiom248(this);

		axioms[258] = new Axiom[1];
		axioms[258][0] = new Axiom249(this);

		axioms[259] = new Axiom[0];

		axioms[260] = new Axiom[0];

		axioms[261] = new Axiom[0];

		axioms[262] = new Axiom[0];

		axioms[263] = new Axiom[0];

		axioms[264] = new Axiom[0];

		axioms[265] = new Axiom[0];

		axioms[266] = new Axiom[0];

		axioms[267] = new Axiom[0];

		axioms[268] = new Axiom[0];

		axioms[269] = new Axiom[0];

		axioms[270] = new Axiom[0];

		axioms[271] = new Axiom[0];

		axioms[272] = new Axiom[0];

		axioms[273] = new Axiom[0];

		axioms[274] = new Axiom[0];

		axioms[275] = new Axiom[0];

		axioms[276] = new Axiom[0];

		axioms[277] = new Axiom[0];

		axioms[278] = new Axiom[0];

		axioms[279] = new Axiom[0];

		axioms[280] = new Axiom[0];

		axioms[281] = new Axiom[0];

		axioms[282] = new Axiom[0];

		axioms[283] = new Axiom[0];

		axioms[284] = new Axiom[0];

		axioms[285] = new Axiom[0];

		axioms[286] = new Axiom[0];

		axioms[287] = new Axiom[0];

		axioms[288] = new Axiom[0];

		axioms[289] = new Axiom[3];
		axioms[289][0] = new Axiom250(this);
		axioms[289][1] = new Axiom251(this);
		axioms[289][2] = new Axiom252(this);

		axioms[290] = new Axiom[1];
		axioms[290][0] = new Axiom253(this);

		axioms[291] = new Axiom[3];
		axioms[291][0] = new Axiom254(this);
		axioms[291][1] = new Axiom255(this);
		axioms[291][2] = new Axiom256(this);

		axioms[292] = new Axiom[1];
		axioms[292][0] = new Axiom257(this);

		axioms[293] = new Axiom[1];
		axioms[293][0] = new Axiom258(this);

		axioms[294] = new Axiom[0];

		axioms[295] = new Axiom[0];

		axioms[296] = new Axiom[0];

		axioms[297] = new Axiom[2];
		axioms[297][0] = new Axiom259(this);
		axioms[297][1] = new Axiom260(this);

		axioms[298] = new Axiom[1];
		axioms[298][0] = new Axiom261(this);

		axioms[299] = new Axiom[0];

		axioms[300] = new Axiom[0];

		axioms[301] = new Axiom[0];

		axioms[302] = new Axiom[0];

		axioms[303] = new Axiom[0];

		axioms[304] = new Axiom[0];

		axioms[305] = new Axiom[0];

		axioms[306] = new Axiom[0];

		axioms[307] = new Axiom[0];

		axioms[308] = new Axiom[0];

		axioms[309] = new Axiom[0];

		axioms[310] = new Axiom[0];

	}
}