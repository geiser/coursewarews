package br.usp.ime.lapessc.courseware.planner.jshop2ip;

import br.usp.ime.lapessc.courseware.mediator.*;

import com.gamalocus.jshop2rt.*;

public class domain extends Domain
{
	private static final long serialVersionUID = 1566633903872749890L;


	/**
	 * Operator #-1 for primitive task !!addInWorldState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator0 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!addInWorldState
	 */
		public Operator0(Domain owner)
		{
			super(owner, new Predicate(0, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(0, 1));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!addInWorldState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !!removeFromWorldState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator1 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!removeFromWorldState
	 */
		public Operator1(Domain owner)
		{
			super(owner, new Predicate(1, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[1];
			delIn[0] = new DelAddAtomic(new Predicate(0, 1));

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!removeFromWorldState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator2 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator2(Domain owner)
		{
			super(owner, new Predicate(2, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator3 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator3(Domain owner)
		{
			super(owner, new Predicate(2, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(2)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator4 extends Operator
{
	/**
	 * Operator #-1 for primitive task !endLDElement
	 */
		public Operator4(Domain owner)
		{
			super(owner, new Predicate(3, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(1)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition115 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition115(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(5), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(58, 18, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition116 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition116(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 18, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition117 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition117(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(11), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition118 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition118(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition119 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition119(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(14), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(15), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(16), TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #7 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition120 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition120(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(17), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #7 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator5 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator5(Domain owner)
		{
			super(owner, new Predicate(2, 18, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), TermList.NIL)))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms0 = {
			new Predicate(42, 18, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(8), TermList.NIL))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(42, 18, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(8), TermList.NIL))), unifier), atoms0);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[9];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms1 = {
			new Predicate(42, 18, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(3), TermList.NIL))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms1);
		// Add list of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms2 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(10), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(184) /*hasCompetency*/, new TermList(owner.getTermVariable(11), TermList.NIL)))) };
			addIn[1] = new DelAddForAll(new Precondition116(owner, unifier), atoms2);
		// Add list of DelAddElement #3 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms3 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(12), TermList.NIL)))) };
			addIn[2] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier), atoms3);
		// Add list of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms4 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(11), TermList.NIL)))) };
			addIn[3] = new DelAddForAll(new Precondition117(owner, unifier), atoms4);
		// Add list of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms5 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(9), TermList.NIL)))) };
			addIn[4] = new DelAddForAll(new Precondition118(owner, unifier), atoms5);
		// Add list of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms6 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(14), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(15), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(16), TermList.NIL)), TermList.NIL)))) };
			addIn[5] = new DelAddForAll(new Precondition119(owner, unifier), atoms6);
		// Add list of DelAddElement #7 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms7 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(17), TermList.NIL)))) };
			addIn[6] = new DelAddForAll(new Precondition120(owner, unifier), atoms7);
		// Add list of DelAddElement #8 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms8 = {
			new Predicate(43, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			addIn[7] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier), atoms8);
			addIn[8] = new DelAddAtomic(new Predicate(42, 18, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(3), TermList.NIL))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition115(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition121 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition121(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(7), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 8);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(58, 21, new TermList(owner.getTermVariable(9), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition122 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition122(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 21, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #2 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition123 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition123(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(13), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #4 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition124 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition124(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(11), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #5 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition125 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition125(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(16), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(17), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(18), TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #6 of Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !startLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator6 extends Operator
{
	/**
	 * Operator #-1 for primitive task !startLDElement
	 */
		public Operator6(Domain owner)
		{
			super(owner, new Predicate(2, 21, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL)))))), TermList.NIL)))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms9 = {
			new Predicate(42, 21, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(10), TermList.NIL))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(42, 21, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(10), TermList.NIL))), unifier), atoms9);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[11];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms10 = {
			new Predicate(42, 21, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(3), TermList.NIL))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms10);
		// Add list of DelAddElement #2 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms11 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(12), TermList.NIL)))),
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(184) /*hasCompetency*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			addIn[1] = new DelAddForAll(new Precondition122(owner, unifier), atoms11);
		// Add list of DelAddElement #3 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms12 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(14), TermList.NIL)))) };
			addIn[2] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier), atoms12);
		// Add list of DelAddElement #4 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms13 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			addIn[3] = new DelAddForAll(new Precondition123(owner, unifier), atoms13);
		// Add list of DelAddElement #5 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms14 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(11), TermList.NIL)))) };
			addIn[4] = new DelAddForAll(new Precondition124(owner, unifier), atoms14);
		// Add list of DelAddElement #6 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms15 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(16), TermList.NIL)))),
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(17), TermList.NIL)))),
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))),
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(18), TermList.NIL)), TermList.NIL)))) };
			addIn[5] = new DelAddForAll(new Precondition125(owner, unifier), atoms15);
		// Add list of DelAddElement #7 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms16 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, new TermList(owner.getTermVariable(19), TermList.NIL)))) };
			addIn[6] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier), atoms16);
		// Add list of DelAddElement #8 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms17 = {
			new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, new TermList(owner.getTermVariable(20), TermList.NIL)))) };
			addIn[7] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(20), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier), atoms17);
			addIn[8] = new DelAddAtomic(new Predicate(44, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL)))));
		// Add list of DelAddElement #10 of Operator #-1 for primitive task !startLDElement
		unifier = new Term[21];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;
		unifier[19] = null;
		unifier[20] = null;

		Predicate[] atoms18 = {
			new Predicate(43, 21, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermVariable(15), TermList.NIL)))) };
			addIn[9] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 21, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier), atoms18);
			addIn[10] = new DelAddAtomic(new Predicate(42, 21, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(3), TermList.NIL))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !startLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition121(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition126 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition126(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasIndGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #2 of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition127 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition127(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(3, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(44, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(111) /*hasCompetencyLevel*/, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #2 of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #3 of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition128 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition128(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #3 of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition129 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition129(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(3, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(3, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(193) /*hasGoalStage*/, TermList.NIL)))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !endLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator7 extends Operator
{
	/**
	 * Operator #-1 for primitive task !endLDElement
	 */
		public Operator7(Domain owner)
		{
			super(owner, new Predicate(3, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[4];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms19 = {
			new Predicate(44, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasIndGoal*/, new TermList(owner.getTermVariable(7), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms19);
		// Delete list of DelAddElement #2 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms20 = {
			new Predicate(44, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(111) /*hasCompetencyLevel*/, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(12), TermList.NIL)), TermList.NIL)))) };
			delIn[1] = new DelAddForAll(new Precondition127(owner, unifier), atoms20);
		// Delete list of DelAddElement #3 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms21 = {
			new Predicate(44, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(13), TermList.NIL)))),
			new Predicate(44, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(14), TermList.NIL)))),
			new Predicate(44, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(15), TermList.NIL)))),
			new Predicate(44, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(16), TermList.NIL)))) };
			delIn[2] = new DelAddForAll(new Precondition128(owner, unifier), atoms21);
		// Delete list of DelAddElement #4 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms22 = {
			new Predicate(42, 19, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(17), TermList.NIL))) };
			delIn[3] = new DelAddForAll(new PreconditionAtomic(new Predicate(42, 19, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(17), TermList.NIL))), unifier), atoms22);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[2];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms23 = {
			new Predicate(44, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(111) /*hasCompetencyLevel*/, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition129(owner, unifier), atoms23);
		// Add list of DelAddElement #2 of Operator #-1 for primitive task !endLDElement
		unifier = new Term[19];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;
		unifier[18] = null;

		Predicate[] atoms24 = {
			new Predicate(42, 19, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(18), TermList.NIL))) };
			addIn[1] = new DelAddForAll(new PreconditionAtomic(new Predicate(43, 19, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermVariable(18), TermList.NIL)))), unifier), atoms24);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !endLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition126(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition130 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition130(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasIndGoal*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeIndGoals [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator8 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeIndGoals
	 */
		public Operator8(Domain owner)
		{
			super(owner, new Predicate(4, 5, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeIndGoals
		unifier = new Term[5];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;

		Predicate[] atoms25 = {
			new Predicate(44, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasIndGoal*/, new TermList(owner.getTermVariable(3), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), atoms25);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeIndGoals
		unifier = new Term[5];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;

		Predicate[] atoms26 = {
			new Predicate(44, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(192) /*hasIndGoal*/, new TermList(owner.getTermVariable(4), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier), atoms26);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition130(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCurrentLDElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator9 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCurrentLDElement
	 */
		public Operator9(Domain owner)
		{
			super(owner, new Predicate(5, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCurrentLDElement
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms27 = {
			new Predicate(42, 4, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(2), TermList.NIL))) };
			delIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), atoms27);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeCurrentLDElement
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms28 = {
			new Predicate(42, 4, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, new TermList(owner.getTermVariable(3), TermList.NIL))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier), atoms28);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCurrentLDElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(58, 4, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition131 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition131(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 6, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition132 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition132(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition133 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition133(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator10 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeLearningResourceType
	 */
		public Operator10(Domain owner)
		{
			super(owner, new Predicate(6, 6, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
		unifier = new Term[6];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;

		Predicate[] atoms29 = {
			new Predicate(44, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(4), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition132(owner, unifier), atoms29);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeLearningResourceType
		unifier = new Term[6];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;

		Predicate[] atoms30 = {
			new Predicate(44, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition133(owner, unifier), atoms30);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeLearningResourceType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition131(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition134 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition134(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeFundCompetency
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator11 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeFundCompetency
	 */
		public Operator11(Domain owner)
		{
			super(owner, new Predicate(7, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms31 = {
			new Predicate(44, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(3), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition134(owner, unifier), atoms31);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeFundCompetency
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms32 = {
			new Predicate(44, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, new TermList(owner.getTermVariable(0), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), atoms32);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeFundCompetency [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(58, 4, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !addUserToGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator12 extends Operator
{
	/**
	 * Operator #-1 for primitive task !addUserToGroup
	 */
		public Operator12(Domain owner)
		{
			super(owner, new Predicate(8, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(194) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !addUserToGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNegation(new PreconditionAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(194) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier), 2)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !removeUserFromGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator13 extends Operator
{
	/**
	 * Operator #-1 for primitive task !removeUserFromGroup
	 */
		public Operator13(Domain owner)
		{
			super(owner, new Predicate(9, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[1];
			delIn[0] = new DelAddAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(194) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !removeUserFromGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(194) /*hasGroup*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !addUserToRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator14 extends Operator
{
	/**
	 * Operator #-1 for primitive task !addUserToRole
	 */
		public Operator14(Domain owner)
		{
			super(owner, new Predicate(10, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !addUserToRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNegation(new PreconditionAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier), 2)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !removeUserFromRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator15 extends Operator
{
	/**
	 * Operator #-1 for primitive task !removeUserFromRole
	 */
		public Operator15(Domain owner)
		{
			super(owner, new Predicate(11, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[1];
			delIn[0] = new DelAddAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))));

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !removeUserFromRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionAtomic(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition135 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition135(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition136 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition136(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator16 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator16(Domain owner)
		{
			super(owner, new Predicate(12, 9, new TermList(TermList.NIL, TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[9];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;

		Predicate[] atoms33 = {
			new Predicate(44, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(5), TermList.NIL)))),
			new Predicate(44, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(6), TermList.NIL)))),
			new Predicate(44, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(7), TermList.NIL)))),
			new Predicate(44, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(8), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition136(owner, unifier), atoms33);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition135(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition137 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition137(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 10, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition138 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition138(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator17 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator17(Domain owner)
		{
			super(owner, new Predicate(12, 10, new TermList(new TermList(owner.getTermConstant(196) /*independent*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[10];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;

		Predicate[] atoms34 = {
			new Predicate(44, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(6), TermList.NIL)))),
			new Predicate(44, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(7), TermList.NIL)))),
			new Predicate(44, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(8), TermList.NIL)))),
			new Predicate(44, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(9), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition138(owner, unifier), atoms34);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition137(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition139 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition139(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 16, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 16, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 16, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 16, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition140 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition140(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition141 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition141(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(2, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(4, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 16, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(3, 16, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(13), TermList.NIL))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator18 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator18(Domain owner)
		{
			super(owner, new Predicate(12, 16, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[16];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;

		Predicate[] atoms35 = {
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(7), TermList.NIL)))),
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(8), TermList.NIL)))),
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(9), TermList.NIL)))),
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(10), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition140(owner, unifier), atoms35);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[16];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;

		Predicate[] atoms36 = {
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(0), TermList.NIL)))),
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(12), TermList.NIL)))),
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL)))),
			new Predicate(44, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(15), TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition141(owner, unifier), atoms36);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition139(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition142 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition142(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 18, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, TermList.NIL)))), unifier);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition143 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition143(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for preconditions of delete part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition144 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition144(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator19 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!changeCLGrouping
	 */
		public Operator19(Domain owner)
		{
			super(owner, new Predicate(12, 18, new TermList(owner.getTermVariable(0), TermList.NIL)), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[1];
		// Delete list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms37 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(10), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(11), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(12), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(13), TermList.NIL)))) };
			delIn[0] = new DelAddForAll(new Precondition143(owner, unifier), atoms37);

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!changeCLGrouping
		unifier = new Term[18];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;
		unifier[4] = null;
		unifier[5] = null;
		unifier[6] = null;
		unifier[7] = null;
		unifier[8] = null;
		unifier[9] = null;
		unifier[10] = null;
		unifier[11] = null;
		unifier[12] = null;
		unifier[13] = null;
		unifier[14] = null;
		unifier[15] = null;
		unifier[16] = null;
		unifier[17] = null;

		Predicate[] atoms38 = {
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, new TermList(owner.getTermVariable(14), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(187) /*hasCLGroupingStrategy*/, new TermList(owner.getTermVariable(15), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(16), TermList.NIL)))),
			new Predicate(44, 18, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(17), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition144(owner, unifier), atoms38);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!changeCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition142(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !text
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator20 extends Operator
{
	/**
	 * Operator #-1 for primitive task !text
	 */
		public Operator20(Domain owner)
		{
			super(owner, new Predicate(13, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[0];

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !text [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(3)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Operator #-1 for primitive task !insertElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator21 extends Operator
{
	/**
	 * Operator #-1 for primitive task !insertElement
	 */
		public Operator21(Domain owner)
		{
			super(owner, new Predicate(14, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !insertElement
		unifier = new Term[3];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;

		Predicate[] atoms39 = {
			new Predicate(44, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(197) /*hasBeenSeen*/, new TermList(owner.getTermVariable(2), TermList.NIL)))),
			new Predicate(44, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(102) /*hasAlreadySeen*/, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(103) /*true*/, TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), atoms39);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !insertElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(3)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Precondition of Operator #-1 for primitive task !insertResource
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition145 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition145(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 4, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of Operator #-1 for primitive task !insertResource [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !insertResource
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator22 extends Operator
{
	/**
	 * Operator #-1 for primitive task !insertResource
	 */
		public Operator22(Domain owner)
		{
			super(owner, new Predicate(15, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
			addIn[0] = new DelAddAtomic(new Predicate(198, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))));

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !insertResource [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new Precondition145(owner, unifier)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition147 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition147(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Bindings for precondition of add part of DelAddElement #1 of Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen [unknown source pos]";
		}
	}

	/**
	 * Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalOperator)
	 */
	public static class Operator23 extends Operator
{
	/**
	 * Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
	 */
		public Operator23(Domain owner)
		{
			super(owner, new Predicate(16, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), -1, -1, new TermNumber(1.0));

			Term[] unifier;


			DelAddElement[] delIn = new DelAddElement[0];

			setDel(delIn);

			DelAddElement[] addIn = new DelAddElement[1];
		// Add list of DelAddElement #1 of Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen
		unifier = new Term[4];

		unifier[0] = null;
		unifier[1] = null;
		unifier[2] = null;
		unifier[3] = null;

		Predicate[] atoms40 = {
			new Predicate(44, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(197) /*hasBeenSeen*/, new TermList(owner.getTermVariable(3), TermList.NIL)))),
			new Predicate(44, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(102) /*hasAlreadySeen*/, new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(103) /*true*/, TermList.NIL)), TermList.NIL)))) };
			addIn[0] = new DelAddForAll(new Precondition147(owner, unifier), atoms40);

			setAdd(addIn);
		}

		@Override
		public String toString()
		{
			return "Operator #-1 for primitive task !!addInWorldStateAsAlreadySeen [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			p = (new PreconditionNil(4)).setComparator(null);
			p.reset(state);

			return p;
		}
	}

	/**
	 * Method -1 for compound task startLDElement!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method0 extends Method
	{
	/**
	 * Method -1 for compound task startLDElement!
	 */
		public Method0(Domain owner)
		{
			super(owner, new Predicate(0, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(4, 7, new TermList(owner.getTermVariable(6), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task startLDElement! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(155, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method0Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method1 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToGroup
	 */
		public Method1(Domain owner)
		{
			super(owner, new Predicate(1, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method1Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method2 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToGroup
	 */
		public Method2(Domain owner)
		{
			super(owner, new Predicate(1, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(1, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method2Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method3 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromGroup
	 */
		public Method3(Domain owner)
		{
			super(owner, new Predicate(2, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method3Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method4 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromGroup
	 */
		public Method4(Domain owner)
		{
			super(owner, new Predicate(2, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(9, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method4Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method5 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToRole
	 */
		public Method5(Domain owner)
		{
			super(owner, new Predicate(3, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method5Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task addUsersToRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method6 extends Method
	{
	/**
	 * Method -1 for compound task addUsersToRole
	 */
		public Method6(Domain owner)
		{
			super(owner, new Predicate(3, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(10, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task addUsersToRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method6Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method7 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromRole
	 */
		public Method7(Domain owner)
		{
			super(owner, new Predicate(4, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method7Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task removeUsersFromRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method8 extends Method
	{
	/**
	 * Method -1 for compound task removeUsersFromRole
	 */
		public Method8(Domain owner)
		{
			super(owner, new Predicate(4, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(11, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(4, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task removeUsersFromRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method8Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task insertResourceOnce
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition146 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition146(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[3] = new PreconditionNegation(new PreconditionAtomic(new Predicate(198, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(199) /*hasType*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task insertResourceOnce [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task insertResourceOnce
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method9 extends Method
	{
	/**
	 * Method -1 for compound task insertResourceOnce
	 */
		public Method9(Domain owner)
		{
			super(owner, new Predicate(5, 5, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = TaskList.empty;

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(15, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(201) /*type*/, new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(202) /*href*/, new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task insertResourceOnce [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition146(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(5)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method9Branch0";
				case 1: return "Method9Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method10 extends Method
	{
	/**
	 * Method -1 for compound task createLDILEventConditions
	 */
		public Method10(Domain owner)
		{
			super(owner, new Predicate(7, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(6, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDILEventConditions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method10Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method11 extends Method
	{
	/**
	 * Method -1 for compound task createLDILEventConditions
	 */
		public Method11(Domain owner)
		{
			super(owner, new Predicate(7, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDILEventConditions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method11Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDILEventConditions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method12 extends Method
	{
	/**
	 * Method -1 for compound task createLDILEventConditions!
	 */
		public Method12(Domain owner)
		{
			super(owner, new Predicate(6, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 1, new TermList(owner.getTermConstant(203) /*conditions*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 1, new TermList(new TermList(owner.getTermConstant(204) /*ILEvent*/, new TermList(owner.getTermConstant(205) /*Conditions*/, TermList.NIL)), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(9, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 1, new TermList(owner.getTermConstant(203) /*conditions*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDILEventConditions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method12Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition148 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition148(Domain owner, Term[] unifier)
		{
			p = new Precondition[15];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 12, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 12, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 12, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(46, 12, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(207) /*Instructional*/, TermList.NIL)), TermList.NIL))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 12, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(46, 12, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(208) /*Learning*/, TermList.NIL)), TermList.NIL))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(107, 12, new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(58, 12, new TermList(owner.getTermVariable(9), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(209) /*ILEventItem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(207) /*Instructional*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(210) /*Item*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(8))))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(107, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(58, 12, new TermList(owner.getTermVariable(11), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(209) /*ILEventItem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(208) /*Learning*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(210) /*Item*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(10))))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(5), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(7), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(9), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(11), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[15][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[14] == null)
			{
				boolean b13changed = false;
				while (b[13] == null)
				{
					boolean b12changed = false;
					while (b[12] == null)
					{
						boolean b11changed = false;
						while (b[11] == null)
						{
							boolean b10changed = false;
							while (b[10] == null)
							{
								boolean b9changed = false;
								while (b[9] == null)
								{
									boolean b8changed = false;
									while (b[8] == null)
									{
										boolean b7changed = false;
										while (b[7] == null)
										{
											boolean b6changed = false;
											while (b[6] == null)
											{
												boolean b5changed = false;
												while (b[5] == null)
												{
													boolean b4changed = false;
													while (b[4] == null)
													{
														boolean b3changed = false;
														while (b[3] == null)
														{
															boolean b2changed = false;
															while (b[2] == null)
															{
																boolean b1changed = false;
																while (b[1] == null)
																{
																	b[1] = p[1].nextBinding(state);
																	if (b[1] == null)
																		return null;
																	else
																		bestMatch = Math.max(bestMatch, 1);
																	b1changed = true;
																}
																if ( b1changed ) {
																	p[2].reset(state);
																	p[2].bind(Term.merge(b, 2));
																}
																b[2] = p[2].nextBinding(state);
																if (b[2] == null)
																	b[1] = null;
																else
																	bestMatch = Math.max(bestMatch, 2);
																b2changed = true;
															}
															if ( b2changed ) {
																p[3].reset(state);
																p[3].bind(Term.merge(b, 3));
															}
															b[3] = p[3].nextBinding(state);
															if (b[3] == null)
																b[2] = null;
															else
																bestMatch = Math.max(bestMatch, 3);
															b3changed = true;
														}
														if ( b3changed ) {
															p[4].reset(state);
															p[4].bind(Term.merge(b, 4));
														}
														b[4] = p[4].nextBinding(state);
														if (b[4] == null)
															b[3] = null;
														else
															bestMatch = Math.max(bestMatch, 4);
														b4changed = true;
													}
													if ( b4changed ) {
														p[5].reset(state);
														p[5].bind(Term.merge(b, 5));
													}
													b[5] = p[5].nextBinding(state);
													if (b[5] == null)
														b[4] = null;
													else
														bestMatch = Math.max(bestMatch, 5);
													b5changed = true;
												}
												if ( b5changed ) {
													p[6].reset(state);
													p[6].bind(Term.merge(b, 6));
												}
												b[6] = p[6].nextBinding(state);
												if (b[6] == null)
													b[5] = null;
												else
													bestMatch = Math.max(bestMatch, 6);
												b6changed = true;
											}
											if ( b6changed ) {
												p[7].reset(state);
												p[7].bind(Term.merge(b, 7));
											}
											b[7] = p[7].nextBinding(state);
											if (b[7] == null)
												b[6] = null;
											else
												bestMatch = Math.max(bestMatch, 7);
											b7changed = true;
										}
										if ( b7changed ) {
											p[8].reset(state);
											p[8].bind(Term.merge(b, 8));
										}
										b[8] = p[8].nextBinding(state);
										if (b[8] == null)
											b[7] = null;
										else
											bestMatch = Math.max(bestMatch, 8);
										b8changed = true;
									}
									if ( b8changed ) {
										p[9].reset(state);
										p[9].bind(Term.merge(b, 9));
									}
									b[9] = p[9].nextBinding(state);
									if (b[9] == null)
										b[8] = null;
									else
										bestMatch = Math.max(bestMatch, 9);
									b9changed = true;
								}
								if ( b9changed ) {
									p[10].reset(state);
									p[10].bind(Term.merge(b, 10));
								}
								b[10] = p[10].nextBinding(state);
								if (b[10] == null)
									b[9] = null;
								else
									bestMatch = Math.max(bestMatch, 10);
								b10changed = true;
							}
							if ( b10changed ) {
								p[11].reset(state);
								p[11].bind(Term.merge(b, 11));
							}
							b[11] = p[11].nextBinding(state);
							if (b[11] == null)
								b[10] = null;
							else
								bestMatch = Math.max(bestMatch, 11);
							b11changed = true;
						}
						if ( b11changed ) {
							p[12].reset(state);
							p[12].bind(Term.merge(b, 12));
						}
						b[12] = p[12].nextBinding(state);
						if (b[12] == null)
							b[11] = null;
						else
							bestMatch = Math.max(bestMatch, 12);
						b12changed = true;
					}
					if ( b12changed ) {
						p[13].reset(state);
						p[13].bind(Term.merge(b, 13));
					}
					b[13] = p[13].nextBinding(state);
					if (b[13] == null)
						b[12] = null;
					else
						bestMatch = Math.max(bestMatch, 13);
					b13changed = true;
				}
				if ( b13changed ) {
					p[14].reset(state);
					p[14].bind(Term.merge(b, 14));
				}
				b[14] = p[14].nextBinding(state);
				if (b[14] == null)
					b[13] = null;
				else
					bestMatch = Math.max(bestMatch, 14);
			}

			Term[] retVal = Term.merge(b, 15);
			b[14] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createILEventConditions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createILEventConditions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method13 extends Method
	{
	/**
	 * Method -1 for compound task createILEventConditions
	 */
		public Method13(Domain owner)
		{
			super(owner, new Predicate(9, 12, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(24, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(211) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(10, 12, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(211) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(212) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(213) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(9), TermList.NIL)), false, false));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(213) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(214) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[8] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(11), TermList.NIL)), false, false));
			retVal.subtasks[9] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(214) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[10] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(212) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[11] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(215) /*else*/, TermList.NIL)), false, true));
			retVal.subtasks[12] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(211) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[13] = new TaskList(new TaskAtom(new Predicate(10, 12, new TermList(owner.getTermVariable(7), TermList.NIL)), false, false));
			retVal.subtasks[14] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(211) /*if*/, TermList.NIL)), false, true));
			retVal.subtasks[15] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(212) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[16] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(213) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[17] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(11), TermList.NIL)), false, false));
			retVal.subtasks[18] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(213) /*show*/, TermList.NIL)), false, true));
			retVal.subtasks[19] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(214) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[20] = new TaskList(new TaskAtom(new Predicate(11, 12, new TermList(owner.getTermVariable(9), TermList.NIL)), false, false));
			retVal.subtasks[21] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(214) /*hide*/, TermList.NIL)), false, true));
			retVal.subtasks[22] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(212) /*then*/, TermList.NIL)), false, true));
			retVal.subtasks[23] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(215) /*else*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createILEventConditions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition148(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method13Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeLDMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition149 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition149(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[2] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(1), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeLDMemberOfRole [unknown source pos]";
		}
	}

	/**
	 * Precondition #1 of Method -1 for compound task distributeLDMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition150 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition150(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[2] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(1), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.equal, "StdLib.equal"), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #1 of Method -1 for compound task distributeLDMemberOfRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeLDMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method14 extends Method
	{
	/**
	 * Method -1 for compound task distributeLDMemberOfRole
	 */
		public Method14(Domain owner)
		{
			super(owner, new Predicate(10, 2, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(216) /*_or*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(216) /*_or*/, TermList.NIL)), false, true));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeLDMemberOfRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition149(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition150(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method14Branch0";
				case 1: return "Method14Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method15 extends Method
	{
	/**
	 * Method -1 for compound task distributeMemberOfRole
	 */
		public Method15(Domain owner)
		{
			super(owner, new Predicate(12, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeMemberOfRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method15Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeMemberOfRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method16 extends Method
	{
	/**
	 * Method -1 for compound task distributeMemberOfRole
	 */
		public Method16(Domain owner)
		{
			super(owner, new Predicate(12, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(217) /*is-member-of-role*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(217) /*is-member-of-role*/, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(12, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeMemberOfRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method16Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItemRef
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method17 extends Method
	{
	/**
	 * Method -1 for compound task distributeItemRef
	 */
		public Method17(Domain owner)
		{
			super(owner, new Predicate(11, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItemRef [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method17Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItemRef
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method18 extends Method
	{
	/**
	 * Method -1 for compound task distributeItemRef
	 */
		public Method18(Domain owner)
		{
			super(owner, new Predicate(11, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(219) /*item-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(219) /*item-ref*/, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(11, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItemRef [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method18Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDConferenceService
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method19 extends Method
	{
	/**
	 * Method -1 for compound task createLDConferenceService
	 */
		public Method19(Domain owner)
		{
			super(owner, new Predicate(14, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(220) /*service*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(new TermCall(new List(owner.getTermConstant(222) /*serv*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(223) /*isvisible*/, new TermList(owner.getTermConstant(103) /*true*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(220) /*service*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDConferenceService [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method19Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createConferenceService
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition151 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition151(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(224) /*hasPersonality*/, new TermList(owner.getTermConstant(225) /*introversion*/, TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createConferenceService [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createConferenceService
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method20 extends Method
	{
	/**
	 * Method -1 for compound task createConferenceService
	 */
		public Method20(Domain owner)
		{
			super(owner, new Predicate(13, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(15, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(16, 6, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createConferenceService [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition151(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(6)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method20Branch0";
				case 1: return "Method20Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAsynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition152 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition152(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(107, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(226) /*Service*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(199) /*hasType*/, new TermList(owner.getTermConstant(227) /*asynchronous*/, TermList.NIL))), owner.getTermVariable(4)))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAsynchronousConference [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAsynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method21 extends Method
	{
	/**
	 * Method -1 for compound task createLDAsynchronousConference
	 */
		public Method21(Domain owner)
		{
			super(owner, new Predicate(15, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 6, new TermList(owner.getTermConstant(228) /*conference*/, new TermList(new TermList(new TermList(owner.getTermConstant(229) /*conference-type*/, new TermList(owner.getTermConstant(227) /*asynchronous*/, TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 6, new TermList(new TermList(owner.getTermConstant(230) /*Asynchronous*/, new TermList(owner.getTermConstant(231) /*Conference*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(17, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(18, 6, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 6, new TermList(owner.getTermConstant(228) /*conference*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAsynchronousConference [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition152(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method21Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDSynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition153 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition153(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(107, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(226) /*Service*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(199) /*hasType*/, new TermList(owner.getTermConstant(232) /*synchronous*/, TermList.NIL))), owner.getTermVariable(4)))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDSynchronousConference [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDSynchronousConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method22 extends Method
	{
	/**
	 * Method -1 for compound task createLDSynchronousConference
	 */
		public Method22(Domain owner)
		{
			super(owner, new Predicate(16, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 6, new TermList(owner.getTermConstant(228) /*conference*/, new TermList(new TermList(new TermList(owner.getTermConstant(229) /*conference-type*/, new TermList(owner.getTermConstant(232) /*synchronous*/, TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 6, new TermList(new TermList(owner.getTermConstant(233) /*Synchronous*/, new TermList(owner.getTermConstant(231) /*Conference*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(17, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(18, 6, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 6, new TermList(owner.getTermConstant(228) /*conference*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSynchronousConference [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition153(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method22Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition154 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition154(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 10, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(2, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(194) /*hasGroup*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(46, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(234) /*Group*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[8] = new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), ((domain)owner).calculateUnion, "((domain)owner).calculateUnion"), unifier, 9);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createConference [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createConference
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method23 extends Method
	{
	/**
	 * Method -1 for compound task createConference
	 */
		public Method23(Domain owner)
		{
			super(owner, new Predicate(17, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(19, 10, new TermList(owner.getTermVariable(9), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createConference [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition154(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method23Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeParticipants
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method24 extends Method
	{
	/**
	 * Method -1 for compound task distributeParticipants
	 */
		public Method24(Domain owner)
		{
			super(owner, new Predicate(19, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeParticipants [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method24Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeParticipants
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method25 extends Method
	{
	/**
	 * Method -1 for compound task distributeParticipants
	 */
		public Method25(Domain owner)
		{
			super(owner, new Predicate(19, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(236) /*participant*/, new TermList(new TermList(new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(236) /*participant*/, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(19, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeParticipants [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method25Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method26 extends Method
	{
	/**
	 * Method -1 for compound task createLDEnvironment
	 */
		public Method26(Domain owner)
		{
			super(owner, new Predicate(21, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method26Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method27 extends Method
	{
	/**
	 * Method -1 for compound task createEnvironment
	 */
		public Method27(Domain owner)
		{
			super(owner, new Predicate(20, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(22, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(14, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method27Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method28 extends Method
	{
	/**
	 * Method -1 for compound task createLDGroup
	 */
		public Method28(Domain owner)
		{
			super(owner, new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(23, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method28Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDGroup!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition155 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition155(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(194) /*hasGroup*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(234) /*Group*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(194) /*hasGroup*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDGroup! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDGroup!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method29 extends Method
	{
	/**
	 * Method -1 for compound task createLDGroup!
	 */
		public Method29(Domain owner)
		{
			super(owner, new Predicate(23, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDGroup! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition155(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method29Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition156 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition156(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(242) /*group*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDGroup [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method30 extends Method
	{
	/**
	 * Method -1 for compound task createLDGroup
	 */
		public Method30(Domain owner)
		{
			super(owner, new Predicate(24, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(234) /*Group*/, TermList.NIL), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(234) /*Group*/, TermList.NIL), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(25, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition156(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method30Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method31 extends Method
	{
	/**
	 * Method -1 for compound task createGroup
	 */
		public Method31(Domain owner)
		{
			super(owner, new Predicate(25, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(1, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method31Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method32 extends Method
	{
	/**
	 * Method -1 for compound task createLDInformation
	 */
		public Method32(Domain owner)
		{
			super(owner, new Predicate(27, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method32Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method33 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem
	 */
		public Method33(Domain owner)
		{
			super(owner, new Predicate(18, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(28, 1, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method33Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method34 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem!
	 */
		public Method34(Domain owner)
		{
			super(owner, new Predicate(28, 2, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(246) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(new TermCall(new List(owner.getTermConstant(246) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(247) /*identifierref*/, new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 2, new TermList(new TermList(owner.getTermConstant(248) /*Resource*/, TermList.NIL), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(5, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(246) /*item*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(69, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method34Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method35 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem
	 */
		public Method35(Domain owner)
		{
			super(owner, new Predicate(18, 1, new TermList(owner.getTermVariable(0), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 1, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method35Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method36 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method36(Domain owner)
		{
			super(owner, new Predicate(26, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method36Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method37 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method37(Domain owner)
		{
			super(owner, new Predicate(26, 2, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 2, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method37Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method38 extends Method
	{
	/**
	 * Method -1 for compound task createLDItem
	 */
		public Method38(Domain owner)
		{
			super(owner, new Predicate(18, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(246) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(new TermCall(new List(owner.getTermConstant(246) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(247) /*identifierref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(248) /*Resource*/, TermList.NIL), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(14, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(5, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(246) /*item*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(69, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method38Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method39 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method39(Domain owner)
		{
			super(owner, new Predicate(26, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method39Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method40 extends Method
	{
	/**
	 * Method -1 for compound task distributeItem
	 */
		public Method40(Domain owner)
		{
			super(owner, new Predicate(26, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method40Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDInstructItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition157 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition157(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(246) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDInstructItem [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDInstructItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method41 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstructItem
	 */
		public Method41(Domain owner)
		{
			super(owner, new Predicate(29, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(246) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(247) /*identifierref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(209) /*ILEventItem*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(210) /*Item*/, TermList.NIL))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(210) /*Item*/, TermList.NIL)), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(5, 4, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(246) /*item*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstructItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition157(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method41Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLearningItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition158 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition158(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(246) /*item*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLearningItem [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLearningItem
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method42 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningItem
	 */
		public Method42(Domain owner)
		{
			super(owner, new Predicate(30, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(246) /*item*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(247) /*identifierref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(209) /*ILEventItem*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(210) /*Item*/, TermList.NIL))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(210) /*Item*/, TermList.NIL)), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(5, 4, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(246) /*item*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningItem [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition158(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method42Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method43 extends Method
	{
	/**
	 * Method -1 for compound task distributeLearningObject
	 */
		public Method43(Domain owner)
		{
			super(owner, new Predicate(22, 0, new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method43Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method44 extends Method
	{
	/**
	 * Method -1 for compound task distributeLearningObject
	 */
		public Method44(Domain owner)
		{
			super(owner, new Predicate(22, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(31, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(22, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method44Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method45 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningObject
	 */
		public Method45(Domain owner)
		{
			super(owner, new Predicate(31, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(32, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method45Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLearningObject!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition159 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition159(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 6, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(250) /*LearningObject*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(184) /*hasCompetency*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 6, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLearningObject! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLearningObject!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method46 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningObject!
	 */
		public Method46(Domain owner)
		{
			super(owner, new Predicate(32, 6, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(16, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningObject! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition159(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method46Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method47 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningObject
	 */
		public Method47(Domain owner)
		{
			super(owner, new Predicate(31, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(252) /*learning-object*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(250) /*LearningObject*/, TermList.NIL), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(250) /*LearningObject*/, TermList.NIL), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(33, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(252) /*learning-object*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(251) /*lo*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method47Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition160 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition160(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLearningObject [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLearningObject
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method48 extends Method
	{
	/**
	 * Method -1 for compound task createLearningObject
	 */
		public Method48(Domain owner)
		{
			super(owner, new Predicate(33, 5, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(26, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningObject [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition160(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method48Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition162 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition162(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(141, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(254, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDTitle [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method49 extends Method
	{
	/**
	 * Method -1 for compound task createLDTitle
	 */
		public Method49(Domain owner)
		{
			super(owner, new Predicate(8, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(255) /*title*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(255) /*title*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDTitle [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition162(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method49Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition163 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition163(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(141, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(254, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(254, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDTitle [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method50 extends Method
	{
	/**
	 * Method -1 for compound task createLDTitle
	 */
		public Method50(Domain owner)
		{
			super(owner, new Predicate(8, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 6, new TermList(owner.getTermConstant(255) /*title*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 6, new TermList(owner.getTermConstant(255) /*title*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDTitle [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition163(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method50Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition164 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition164(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(141, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(254, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(254, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDTitle [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDTitle
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method51 extends Method
	{
	/**
	 * Method -1 for compound task createLDTitle
	 */
		public Method51(Domain owner)
		{
			super(owner, new Predicate(8, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermConstant(255) /*title*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(13, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(new TermCall(new List(new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 7, new TermList(owner.getTermConstant(255) /*title*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDTitle [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition164(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method51Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDClarifyingProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method52 extends Method
	{
	/**
	 * Method -1 for compound task createLDClarifyingProblemILEvent
	 */
		public Method52(Domain owner)
		{
			super(owner, new Predicate(35, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(259) /*ClarifyingProblem*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(259) /*ClarifyingProblem*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(34, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDClarifyingProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method52Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createClarifyingProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method53 extends Method
	{
	/**
	 * Method -1 for compound task createClarifyingProblemILEvent
	 */
		public Method53(Domain owner)
		{
			super(owner, new Predicate(34, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(36, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createClarifyingProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method53Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createClarifyingProblemILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition165 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition165(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createClarifyingProblemILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createClarifyingProblemILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method54 extends Method
	{
	/**
	 * Method -1 for compound task createClarifyingProblemILEvent!
	 */
		public Method54(Domain owner)
		{
			super(owner, new Predicate(36, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(37, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createClarifyingProblemILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition165(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method54Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createClarifyingProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method55 extends Method
	{
	/**
	 * Method -1 for compound task createClarifyingProblemILEvent
	 */
		public Method55(Domain owner)
		{
			super(owner, new Predicate(34, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(38, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(37, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createClarifyingProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method55Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDClarifyingProblemILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method56 extends Method
	{
	/**
	 * Method -1 for compound task createLDClarifyingProblemILEnvironment
	 */
		public Method56(Domain owner)
		{
			super(owner, new Predicate(38, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(259) /*ClarifyingProblem*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(259) /*ClarifyingProblem*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDClarifyingProblemILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method56Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDClarifyingProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method57 extends Method
	{
	/**
	 * Method -1 for compound task createLDClarifyingProblemILEventDescription
	 */
		public Method57(Domain owner)
		{
			super(owner, new Predicate(37, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(39, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDClarifyingProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method57Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createClarifyingProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method58 extends Method
	{
	/**
	 * Method -1 for compound task createClarifyingProblemILEventDescription
	 */
		public Method58(Domain owner)
		{
			super(owner, new Predicate(39, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(40, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createClarifyingProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method58Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createClarifyingProblemILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition166 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition166(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(264) /*IdentifyingProblem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(266) /*ExternalizationProblem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createClarifyingProblemILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createClarifyingProblemILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method59 extends Method
	{
	/**
	 * Method -1 for compound task createClarifyingProblemILEventDescription!
	 */
		public Method59(Domain owner)
		{
			super(owner, new Predicate(40, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createClarifyingProblemILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition166(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method59Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createClarifyingProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition167 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition167(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(264) /*IdentifyingProblem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(266) /*ExternalizationProblem*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createClarifyingProblemILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createClarifyingProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method60 extends Method
	{
	/**
	 * Method -1 for compound task createClarifyingProblemILEventDescription
	 */
		public Method60(Domain owner)
		{
			super(owner, new Predicate(39, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createClarifyingProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition167(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method60Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method61 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemILEvent
	 */
		public Method61(Domain owner)
		{
			super(owner, new Predicate(42, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(41, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method61Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method62 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEvent
	 */
		public Method62(Domain owner)
		{
			super(owner, new Predicate(41, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(43, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method62Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDemonHowSolveProblemILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition168 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition168(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDemonHowSolveProblemILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method63 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEvent!
	 */
		public Method63(Domain owner)
		{
			super(owner, new Predicate(43, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(44, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition168(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method63Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method64 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEvent
	 */
		public Method64(Domain owner)
		{
			super(owner, new Predicate(41, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(45, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method64Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method65 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemILEnvironment
	 */
		public Method65(Domain owner)
		{
			super(owner, new Predicate(45, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method65Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method66 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemILEventDescription
	 */
		public Method66(Domain owner)
		{
			super(owner, new Predicate(44, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method66Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method67 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEventDescription
	 */
		public Method67(Domain owner)
		{
			super(owner, new Predicate(46, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(47, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method67Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDemonHowSolveProblemILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition169 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition169(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(268) /*Demonstration*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(269) /*ObservingDemonstration*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDemonHowSolveProblemILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method68 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEventDescription!
	 */
		public Method68(Domain owner)
		{
			super(owner, new Predicate(47, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition169(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method68Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDemonHowSolveProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition170 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition170(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(268) /*Demonstration*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(269) /*ObservingDemonstration*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDemonHowSolveProblemILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method69 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemILEventDescription
	 */
		public Method69(Domain owner)
		{
			super(owner, new Predicate(46, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition170(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method69Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiagProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method70 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiagProblemILEvent
	 */
		public Method70(Domain owner)
		{
			super(owner, new Predicate(49, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(270) /*DiagProblem*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(270) /*DiagProblem*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(48, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiagProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method70Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiagProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method71 extends Method
	{
	/**
	 * Method -1 for compound task createDiagProblemILEvent
	 */
		public Method71(Domain owner)
		{
			super(owner, new Predicate(48, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(50, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiagProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method71Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiagProblemILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition171 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition171(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiagProblemILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiagProblemILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method72 extends Method
	{
	/**
	 * Method -1 for compound task createDiagProblemILEvent!
	 */
		public Method72(Domain owner)
		{
			super(owner, new Predicate(50, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(51, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiagProblemILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition171(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method72Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiagProblemILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method73 extends Method
	{
	/**
	 * Method -1 for compound task createDiagProblemILEvent
	 */
		public Method73(Domain owner)
		{
			super(owner, new Predicate(48, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(52, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(51, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiagProblemILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method73Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiagProblemILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method74 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiagProblemILEnvironment
	 */
		public Method74(Domain owner)
		{
			super(owner, new Predicate(52, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(270) /*DiagProblem*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(270) /*DiagProblem*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiagProblemILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method74Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiagProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method75 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiagProblemILEventDescription
	 */
		public Method75(Domain owner)
		{
			super(owner, new Predicate(51, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(53, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiagProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method75Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiagProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method76 extends Method
	{
	/**
	 * Method -1 for compound task createDiagProblemILEventDescription
	 */
		public Method76(Domain owner)
		{
			super(owner, new Predicate(53, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(54, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiagProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method76Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiagProblemILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition172 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition172(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(271) /*Diagnosis*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(272) /*ReceivingDiagnosis*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiagProblemILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiagProblemILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method77 extends Method
	{
	/**
	 * Method -1 for compound task createDiagProblemILEventDescription!
	 */
		public Method77(Domain owner)
		{
			super(owner, new Predicate(54, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiagProblemILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition172(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method77Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiagProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition173 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition173(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(271) /*Diagnosis*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(272) /*ReceivingDiagnosis*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiagProblemILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiagProblemILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method78 extends Method
	{
	/**
	 * Method -1 for compound task createDiagProblemILEventDescription
	 */
		public Method78(Domain owner)
		{
			super(owner, new Predicate(53, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiagProblemILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition173(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method78Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDElicitPerformanceILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method79 extends Method
	{
	/**
	 * Method -1 for compound task createLDElicitPerformanceILEvent
	 */
		public Method79(Domain owner)
		{
			super(owner, new Predicate(56, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(273) /*ElicitPerformance*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(273) /*ElicitPerformance*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(55, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDElicitPerformanceILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method79Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createElicitPerformanceILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method80 extends Method
	{
	/**
	 * Method -1 for compound task createElicitPerformanceILEvent
	 */
		public Method80(Domain owner)
		{
			super(owner, new Predicate(55, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(57, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createElicitPerformanceILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method80Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createElicitPerformanceILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition174 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition174(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createElicitPerformanceILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createElicitPerformanceILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method81 extends Method
	{
	/**
	 * Method -1 for compound task createElicitPerformanceILEvent!
	 */
		public Method81(Domain owner)
		{
			super(owner, new Predicate(57, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(58, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createElicitPerformanceILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition174(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method81Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createElicitPerformanceILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method82 extends Method
	{
	/**
	 * Method -1 for compound task createElicitPerformanceILEvent
	 */
		public Method82(Domain owner)
		{
			super(owner, new Predicate(55, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(59, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(58, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createElicitPerformanceILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method82Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDElicitPerformanceILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method83 extends Method
	{
	/**
	 * Method -1 for compound task createLDElicitPerformanceILEnvironment
	 */
		public Method83(Domain owner)
		{
			super(owner, new Predicate(59, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(273) /*ElicitPerformance*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(273) /*ElicitPerformance*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDElicitPerformanceILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method83Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDElicitPerformanceILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method84 extends Method
	{
	/**
	 * Method -1 for compound task createLDElicitPerformanceILEventDescription
	 */
		public Method84(Domain owner)
		{
			super(owner, new Predicate(58, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(60, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDElicitPerformanceILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method84Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createElicitPerformanceILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method85 extends Method
	{
	/**
	 * Method -1 for compound task createElicitPerformanceILEventDescription
	 */
		public Method85(Domain owner)
		{
			super(owner, new Predicate(60, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(61, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createElicitPerformanceILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method85Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createElicitPerformanceILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition175 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition175(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(274) /*GivingPerformance*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(275) /*ReceivingPerformance*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createElicitPerformanceILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createElicitPerformanceILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method86 extends Method
	{
	/**
	 * Method -1 for compound task createElicitPerformanceILEventDescription!
	 */
		public Method86(Domain owner)
		{
			super(owner, new Predicate(61, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createElicitPerformanceILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition175(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method86Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createElicitPerformanceILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition176 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition176(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(274) /*GivingPerformance*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(275) /*ReceivingPerformance*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createElicitPerformanceILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createElicitPerformanceILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method87 extends Method
	{
	/**
	 * Method -1 for compound task createElicitPerformanceILEventDescription
	 */
		public Method87(Domain owner)
		{
			super(owner, new Predicate(60, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createElicitPerformanceILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition176(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method87Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInstDiscussionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method88 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstDiscussionILEvent
	 */
		public Method88(Domain owner)
		{
			super(owner, new Predicate(63, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(62, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstDiscussionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method88Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInstDiscussionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method89 extends Method
	{
	/**
	 * Method -1 for compound task createInstDiscussionILEvent
	 */
		public Method89(Domain owner)
		{
			super(owner, new Predicate(62, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(64, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstDiscussionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method89Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createInstDiscussionILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition177 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition177(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createInstDiscussionILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createInstDiscussionILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method90 extends Method
	{
	/**
	 * Method -1 for compound task createInstDiscussionILEvent!
	 */
		public Method90(Domain owner)
		{
			super(owner, new Predicate(64, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(65, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstDiscussionILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition177(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method90Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInstDiscussionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method91 extends Method
	{
	/**
	 * Method -1 for compound task createInstDiscussionILEvent
	 */
		public Method91(Domain owner)
		{
			super(owner, new Predicate(62, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(66, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(65, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstDiscussionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method91Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInstDiscussionILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method92 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstDiscussionILEnvironment
	 */
		public Method92(Domain owner)
		{
			super(owner, new Predicate(66, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstDiscussionILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method92Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInstDiscussionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method93 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstDiscussionILEventDescription
	 */
		public Method93(Domain owner)
		{
			super(owner, new Predicate(65, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(67, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstDiscussionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method93Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInstDiscussionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method94 extends Method
	{
	/**
	 * Method -1 for compound task createInstDiscussionILEventDescription
	 */
		public Method94(Domain owner)
		{
			super(owner, new Predicate(67, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(68, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstDiscussionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method94Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createInstDiscussionILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition178 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition178(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(277) /*RequestOpinion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(278) /*ExposingOpinion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createInstDiscussionILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createInstDiscussionILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method95 extends Method
	{
	/**
	 * Method -1 for compound task createInstDiscussionILEventDescription!
	 */
		public Method95(Domain owner)
		{
			super(owner, new Predicate(68, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstDiscussionILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition178(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method95Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createInstDiscussionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition179 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition179(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(277) /*RequestOpinion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(278) /*ExposingOpinion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createInstDiscussionILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createInstDiscussionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method96 extends Method
	{
	/**
	 * Method -1 for compound task createInstDiscussionILEventDescription
	 */
		public Method96(Domain owner)
		{
			super(owner, new Predicate(67, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstDiscussionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition179(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method96Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInstThinkingILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method97 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstThinkingILEvent
	 */
		public Method97(Domain owner)
		{
			super(owner, new Predicate(70, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(69, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstThinkingILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method97Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInstThinkingILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method98 extends Method
	{
	/**
	 * Method -1 for compound task createInstThinkingILEvent
	 */
		public Method98(Domain owner)
		{
			super(owner, new Predicate(69, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(71, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstThinkingILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method98Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createInstThinkingILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition180 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition180(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createInstThinkingILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createInstThinkingILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method99 extends Method
	{
	/**
	 * Method -1 for compound task createInstThinkingILEvent!
	 */
		public Method99(Domain owner)
		{
			super(owner, new Predicate(71, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(72, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstThinkingILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition180(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method99Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInstThinkingILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method100 extends Method
	{
	/**
	 * Method -1 for compound task createInstThinkingILEvent
	 */
		public Method100(Domain owner)
		{
			super(owner, new Predicate(69, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(73, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(72, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstThinkingILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method100Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInstThinkingILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method101 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstThinkingILEnvironment
	 */
		public Method101(Domain owner)
		{
			super(owner, new Predicate(73, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstThinkingILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method101Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInstThinkingILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method102 extends Method
	{
	/**
	 * Method -1 for compound task createLDInstThinkingILEventDescription
	 */
		public Method102(Domain owner)
		{
			super(owner, new Predicate(72, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(74, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInstThinkingILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method102Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInstThinkingILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method103 extends Method
	{
	/**
	 * Method -1 for compound task createInstThinkingILEventDescription
	 */
		public Method103(Domain owner)
		{
			super(owner, new Predicate(74, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(75, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstThinkingILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method103Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createInstThinkingILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition181 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition181(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(280) /*Argumentation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(281) /*ReceivingArguments*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createInstThinkingILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createInstThinkingILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method104 extends Method
	{
	/**
	 * Method -1 for compound task createInstThinkingILEventDescription!
	 */
		public Method104(Domain owner)
		{
			super(owner, new Predicate(75, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstThinkingILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition181(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method104Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createInstThinkingILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition182 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition182(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(280) /*Argumentation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(281) /*ReceivingArguments*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createInstThinkingILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createInstThinkingILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method105 extends Method
	{
	/**
	 * Method -1 for compound task createInstThinkingILEventDescription
	 */
		public Method105(Domain owner)
		{
			super(owner, new Predicate(74, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInstThinkingILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition182(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method105Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDKnowlTransmissionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method106 extends Method
	{
	/**
	 * Method -1 for compound task createLDKnowlTransmissionILEvent
	 */
		public Method106(Domain owner)
		{
			super(owner, new Predicate(77, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(282) /*KnowlTransmission*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(282) /*KnowlTransmission*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(76, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDKnowlTransmissionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method106Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method107 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionILEvent
	 */
		public Method107(Domain owner)
		{
			super(owner, new Predicate(76, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(78, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method107Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createKnowlTransmissionILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition183 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition183(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createKnowlTransmissionILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method108 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionILEvent!
	 */
		public Method108(Domain owner)
		{
			super(owner, new Predicate(78, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(79, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition183(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method108Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method109 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionILEvent
	 */
		public Method109(Domain owner)
		{
			super(owner, new Predicate(76, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(80, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(79, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method109Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDKnowlTransmissionILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method110 extends Method
	{
	/**
	 * Method -1 for compound task createLDKnowlTransmissionILEnvironment
	 */
		public Method110(Domain owner)
		{
			super(owner, new Predicate(80, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(282) /*KnowlTransmission*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(282) /*KnowlTransmission*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDKnowlTransmissionILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method110Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDKnowlTransmissionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method111 extends Method
	{
	/**
	 * Method -1 for compound task createLDKnowlTransmissionILEventDescription
	 */
		public Method111(Domain owner)
		{
			super(owner, new Predicate(79, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(81, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDKnowlTransmissionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method111Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method112 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionILEventDescription
	 */
		public Method112(Domain owner)
		{
			super(owner, new Predicate(81, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(82, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method112Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createKnowlTransmissionILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition184 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition184(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(283) /*Explanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(284) /*ReceivingExplanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createKnowlTransmissionILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method113 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionILEventDescription!
	 */
		public Method113(Domain owner)
		{
			super(owner, new Predicate(82, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition184(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method113Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createKnowlTransmissionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition185 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition185(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(283) /*Explanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(284) /*ReceivingExplanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createKnowlTransmissionILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method114 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionILEventDescription
	 */
		public Method114(Domain owner)
		{
			super(owner, new Predicate(81, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition185(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method114Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method115 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringILEvent
	 */
		public Method115(Domain owner)
		{
			super(owner, new Predicate(84, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(83, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method115Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method116 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringILEvent
	 */
		public Method116(Domain owner)
		{
			super(owner, new Predicate(83, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(85, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method116Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMonitoringILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition186 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition186(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMonitoringILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMonitoringILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method117 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringILEvent!
	 */
		public Method117(Domain owner)
		{
			super(owner, new Predicate(85, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(86, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition186(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method117Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method118 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringILEvent
	 */
		public Method118(Domain owner)
		{
			super(owner, new Predicate(83, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(87, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(86, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method118Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method119 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringILEnvironment
	 */
		public Method119(Domain owner)
		{
			super(owner, new Predicate(87, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method119Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method120 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringILEventDescription
	 */
		public Method120(Domain owner)
		{
			super(owner, new Predicate(86, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(88, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method120Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method121 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringILEventDescription
	 */
		public Method121(Domain owner)
		{
			super(owner, new Predicate(88, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(89, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method121Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMonitoringILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition187 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition187(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(286) /*Checking*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(287) /*BeingChecked*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMonitoringILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMonitoringILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method122 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringILEventDescription!
	 */
		public Method122(Domain owner)
		{
			super(owner, new Predicate(89, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition187(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method122Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMonitoringILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition188 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition188(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(286) /*Checking*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(287) /*BeingChecked*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMonitoringILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMonitoringILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method123 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringILEventDescription
	 */
		public Method123(Domain owner)
		{
			super(owner, new Predicate(88, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition188(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method123Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDNotifyHowLearnerIsILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method124 extends Method
	{
	/**
	 * Method -1 for compound task createLDNotifyHowLearnerIsILEvent
	 */
		public Method124(Domain owner)
		{
			super(owner, new Predicate(91, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(90, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDNotifyHowLearnerIsILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method124Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method125 extends Method
	{
	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEvent
	 */
		public Method125(Domain owner)
		{
			super(owner, new Predicate(90, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(92, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createNotifyHowLearnerIsILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method125Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createNotifyHowLearnerIsILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition189 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition189(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createNotifyHowLearnerIsILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method126 extends Method
	{
	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEvent!
	 */
		public Method126(Domain owner)
		{
			super(owner, new Predicate(92, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(93, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createNotifyHowLearnerIsILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition189(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method126Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method127 extends Method
	{
	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEvent
	 */
		public Method127(Domain owner)
		{
			super(owner, new Predicate(90, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(94, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(93, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createNotifyHowLearnerIsILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method127Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDNotifyHowLearnerIsILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method128 extends Method
	{
	/**
	 * Method -1 for compound task createLDNotifyHowLearnerIsILEnvironment
	 */
		public Method128(Domain owner)
		{
			super(owner, new Predicate(94, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDNotifyHowLearnerIsILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method128Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDNotifyHowLearnerIsILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method129 extends Method
	{
	/**
	 * Method -1 for compound task createLDNotifyHowLearnerIsILEventDescription
	 */
		public Method129(Domain owner)
		{
			super(owner, new Predicate(93, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(95, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDNotifyHowLearnerIsILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method129Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method130 extends Method
	{
	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEventDescription
	 */
		public Method130(Domain owner)
		{
			super(owner, new Predicate(95, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(96, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createNotifyHowLearnerIsILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method130Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createNotifyHowLearnerIsILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition190 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition190(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(289) /*GivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(290) /*ReceivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createNotifyHowLearnerIsILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method131 extends Method
	{
	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEventDescription!
	 */
		public Method131(Domain owner)
		{
			super(owner, new Predicate(96, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createNotifyHowLearnerIsILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition190(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method131Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createNotifyHowLearnerIsILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition191 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition191(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(289) /*GivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(290) /*ReceivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createNotifyHowLearnerIsILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method132 extends Method
	{
	/**
	 * Method -1 for compound task createNotifyHowLearnerIsILEventDescription
	 */
		public Method132(Domain owner)
		{
			super(owner, new Predicate(95, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createNotifyHowLearnerIsILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition191(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method132Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method133 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailILEvent
	 */
		public Method133(Domain owner)
		{
			super(owner, new Predicate(98, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(97, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method133Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method134 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailILEvent
	 */
		public Method134(Domain owner)
		{
			super(owner, new Predicate(97, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(99, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method134Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createReqProblemDetailILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition192 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition192(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createReqProblemDetailILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method135 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailILEvent!
	 */
		public Method135(Domain owner)
		{
			super(owner, new Predicate(99, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(100, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition192(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method135Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method136 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailILEvent
	 */
		public Method136(Domain owner)
		{
			super(owner, new Predicate(97, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(101, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(100, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method136Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method137 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailILEnvironment
	 */
		public Method137(Domain owner)
		{
			super(owner, new Predicate(101, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method137Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method138 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailILEventDescription
	 */
		public Method138(Domain owner)
		{
			super(owner, new Predicate(100, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(102, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method138Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method139 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailILEventDescription
	 */
		public Method139(Domain owner)
		{
			super(owner, new Predicate(102, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(103, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method139Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createReqProblemDetailILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition193 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition193(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(292) /*AskProblems*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(293) /*PointProblems*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createReqProblemDetailILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method140 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailILEventDescription!
	 */
		public Method140(Domain owner)
		{
			super(owner, new Predicate(103, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition193(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method140Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createReqProblemDetailILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition194 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition194(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(292) /*AskProblems*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(293) /*PointProblems*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createReqProblemDetailILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method141 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailILEventDescription
	 */
		public Method141(Domain owner)
		{
			super(owner, new Predicate(102, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition194(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method141Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSetLearningContextILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method142 extends Method
	{
	/**
	 * Method -1 for compound task createLDSetLearningContextILEvent
	 */
		public Method142(Domain owner)
		{
			super(owner, new Predicate(105, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(294) /*SetLearningContext*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(294) /*SetLearningContext*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(104, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSetLearningContextILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method142Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSetLearningContextILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method143 extends Method
	{
	/**
	 * Method -1 for compound task createSetLearningContextILEvent
	 */
		public Method143(Domain owner)
		{
			super(owner, new Predicate(104, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(106, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSetLearningContextILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method143Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSetLearningContextILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition195 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition195(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSetLearningContextILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSetLearningContextILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method144 extends Method
	{
	/**
	 * Method -1 for compound task createSetLearningContextILEvent!
	 */
		public Method144(Domain owner)
		{
			super(owner, new Predicate(106, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(107, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSetLearningContextILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition195(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method144Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSetLearningContextILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method145 extends Method
	{
	/**
	 * Method -1 for compound task createSetLearningContextILEvent
	 */
		public Method145(Domain owner)
		{
			super(owner, new Predicate(104, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(108, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(107, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSetLearningContextILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method145Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSetLearningContextILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method146 extends Method
	{
	/**
	 * Method -1 for compound task createLDSetLearningContextILEnvironment
	 */
		public Method146(Domain owner)
		{
			super(owner, new Predicate(108, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(294) /*SetLearningContext*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(294) /*SetLearningContext*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSetLearningContextILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method146Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSetLearningContextILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method147 extends Method
	{
	/**
	 * Method -1 for compound task createLDSetLearningContextILEventDescription
	 */
		public Method147(Domain owner)
		{
			super(owner, new Predicate(107, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(109, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSetLearningContextILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method147Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSetLearningContextILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method148 extends Method
	{
	/**
	 * Method -1 for compound task createSetLearningContextILEventDescription
	 */
		public Method148(Domain owner)
		{
			super(owner, new Predicate(109, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(110, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSetLearningContextILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method148Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSetLearningContextILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition196 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition196(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(289) /*GivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(290) /*ReceivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSetLearningContextILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSetLearningContextILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method149 extends Method
	{
	/**
	 * Method -1 for compound task createSetLearningContextILEventDescription!
	 */
		public Method149(Domain owner)
		{
			super(owner, new Predicate(110, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSetLearningContextILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition196(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method149Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSetLearningContextILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition197 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition197(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(289) /*GivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(290) /*ReceivingInformation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSetLearningContextILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSetLearningContextILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method150 extends Method
	{
	/**
	 * Method -1 for compound task createSetLearningContextILEventDescription
	 */
		public Method150(Domain owner)
		{
			super(owner, new Predicate(109, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSetLearningContextILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition197(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method150Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowSolutionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method151 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowSolutionILEvent
	 */
		public Method151(Domain owner)
		{
			super(owner, new Predicate(112, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(204) /*ILEvent*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(111, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowSolutionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method151Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method152 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionILEvent
	 */
		public Method152(Domain owner)
		{
			super(owner, new Predicate(111, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(113, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method152Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowSolutionILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition198 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition198(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowSolutionILEvent! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionILEvent!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method153 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionILEvent!
	 */
		public Method153(Domain owner)
		{
			super(owner, new Predicate(113, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(114, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionILEvent! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition198(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method153Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionILEvent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method154 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionILEvent
	 */
		public Method154(Domain owner)
		{
			super(owner, new Predicate(111, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(115, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(114, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionILEvent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method154Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowSolutionILEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method155 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowSolutionILEnvironment
	 */
		public Method155(Domain owner)
		{
			super(owner, new Predicate(115, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(262) /*ILEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowSolutionILEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method155Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowSolutionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method156 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowSolutionILEventDescription
	 */
		public Method156(Domain owner)
		{
			super(owner, new Predicate(114, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(116, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowSolutionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method156Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method157 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionILEventDescription
	 */
		public Method157(Domain owner)
		{
			super(owner, new Predicate(116, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(117, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method157Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowSolutionILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition199 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition199(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(283) /*Explanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(284) /*ReceivingExplanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowSolutionILEventDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionILEventDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method158 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionILEventDescription!
	 */
		public Method158(Domain owner)
		{
			super(owner, new Predicate(117, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionILEventDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition199(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method158Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowSolutionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition200 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition200(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(283) /*Explanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(284) /*ReceivingExplanation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(265) /*ILEventDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowSolutionILEventDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionILEventDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method159 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionILEventDescription
	 */
		public Method159(Domain owner)
		{
			super(owner, new Predicate(116, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(29, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(30, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionILEventDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition200(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method159Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemClarifyingProblemInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method160 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemClarifyingProblemInteractions
	 */
		public Method160(Domain owner)
		{
			super(owner, new Predicate(119, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(301) /*DemonHowSolveProblemClarifyingProblem*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(302) /*ProblemDetail*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(118, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemClarifyingProblemInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method160Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method161 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions
	 */
		public Method161(Domain owner)
		{
			super(owner, new Predicate(118, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(120, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method161Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition201 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition201(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method162 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions!
	 */
		public Method162(Domain owner)
		{
			super(owner, new Predicate(120, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(42, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(35, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition201(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method162Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method163 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions
	 */
		public Method163(Domain owner)
		{
			super(owner, new Predicate(118, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(121, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(42, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(35, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemClarifyingProblemInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method163Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemClarifyingProblemInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method164 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemClarifyingProblemInteractionEnvironment
	 */
		public Method164(Domain owner)
		{
			super(owner, new Predicate(121, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(301) /*DemonHowSolveProblemClarifyingProblem*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(259) /*ClarifyingProblem*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemClarifyingProblemInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method164Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemInstDiscussionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method165 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemInstDiscussionInteractions
	 */
		public Method165(Domain owner)
		{
			super(owner, new Predicate(123, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(304) /*DemonHowSolveProblemInstDiscussion*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(302) /*ProblemDetail*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(122, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemInstDiscussionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method165Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method166 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions
	 */
		public Method166(Domain owner)
		{
			super(owner, new Predicate(122, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(124, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method166Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition202 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition202(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method167 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions!
	 */
		public Method167(Domain owner)
		{
			super(owner, new Predicate(124, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(42, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(63, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition202(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method167Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method168 extends Method
	{
	/**
	 * Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions
	 */
		public Method168(Domain owner)
		{
			super(owner, new Predicate(122, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(125, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(42, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDemonHowSolveProblemInstDiscussionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method168Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemInstDiscussionInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method169 extends Method
	{
	/**
	 * Method -1 for compound task createLDDemonHowSolveProblemInstDiscussionInteractionEnvironment
	 */
		public Method169(Domain owner)
		{
			super(owner, new Predicate(125, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(304) /*DemonHowSolveProblemInstDiscussion*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(267) /*DemonHowSolveProblem*/, new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDemonHowSolveProblemInstDiscussionInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method169Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDKnowlTransmissionReqProblemDetailInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method170 extends Method
	{
	/**
	 * Method -1 for compound task createLDKnowlTransmissionReqProblemDetailInteractions
	 */
		public Method170(Domain owner)
		{
			super(owner, new Predicate(127, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(305) /*KnowlTransmissionReqProblemDetail*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(282) /*KnowlTransmission*/, new TermList(owner.getTermConstant(302) /*ProblemDetail*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(126, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDKnowlTransmissionReqProblemDetailInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method170Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method171 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions
	 */
		public Method171(Domain owner)
		{
			super(owner, new Predicate(126, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(128, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method171Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition203 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition203(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method172 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions!
	 */
		public Method172(Domain owner)
		{
			super(owner, new Predicate(128, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(77, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(98, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition203(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method172Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method173 extends Method
	{
	/**
	 * Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions
	 */
		public Method173(Domain owner)
		{
			super(owner, new Predicate(126, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(129, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(77, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(98, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createKnowlTransmissionReqProblemDetailInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method173Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDKnowlTransmissionReqProblemDetailInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method174 extends Method
	{
	/**
	 * Method -1 for compound task createLDKnowlTransmissionReqProblemDetailInteractionEnvironment
	 */
		public Method174(Domain owner)
		{
			super(owner, new Predicate(129, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(305) /*KnowlTransmissionReqProblemDetail*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(282) /*KnowlTransmission*/, new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDKnowlTransmissionReqProblemDetailInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method174Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetadiagElicitPerformanceInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method175 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetadiagElicitPerformanceInteractions
	 */
		public Method175(Domain owner)
		{
			super(owner, new Predicate(131, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(307) /*MetadiagElicitPerformance*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(307) /*MetadiagElicitPerformance*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(130, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetadiagElicitPerformanceInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method175Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetadiagElicitPerformanceInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method176 extends Method
	{
	/**
	 * Method -1 for compound task createMetadiagElicitPerformanceInteractions
	 */
		public Method176(Domain owner)
		{
			super(owner, new Predicate(130, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(132, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetadiagElicitPerformanceInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method176Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMetadiagElicitPerformanceInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition204 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition204(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMetadiagElicitPerformanceInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMetadiagElicitPerformanceInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method177 extends Method
	{
	/**
	 * Method -1 for compound task createMetadiagElicitPerformanceInteractions!
	 */
		public Method177(Domain owner)
		{
			super(owner, new Predicate(132, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(105, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(56, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(84, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetadiagElicitPerformanceInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition204(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method177Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetadiagElicitPerformanceInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method178 extends Method
	{
	/**
	 * Method -1 for compound task createMetadiagElicitPerformanceInteractions
	 */
		public Method178(Domain owner)
		{
			super(owner, new Predicate(130, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(133, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(105, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(56, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(84, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetadiagElicitPerformanceInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method178Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetadiagElicitPerformanceInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method179 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetadiagElicitPerformanceInteractionEnvironment
	 */
		public Method179(Domain owner)
		{
			super(owner, new Predicate(133, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(307) /*MetadiagElicitPerformance*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(307) /*MetadiagElicitPerformance*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetadiagElicitPerformanceInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method179Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetadiagnosingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method180 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetadiagnosingInteractions
	 */
		public Method180(Domain owner)
		{
			super(owner, new Predicate(135, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(308) /*Metadiagnosing*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(308) /*Metadiagnosing*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(134, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetadiagnosingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method180Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetadiagnosingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method181 extends Method
	{
	/**
	 * Method -1 for compound task createMetadiagnosingInteractions
	 */
		public Method181(Domain owner)
		{
			super(owner, new Predicate(134, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(136, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetadiagnosingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method181Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMetadiagnosingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition205 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition205(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMetadiagnosingInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMetadiagnosingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method182 extends Method
	{
	/**
	 * Method -1 for compound task createMetadiagnosingInteractions!
	 */
		public Method182(Domain owner)
		{
			super(owner, new Predicate(136, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(131, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(137, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetadiagnosingInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition205(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method182Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetadiagnosingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method183 extends Method
	{
	/**
	 * Method -1 for compound task createMetadiagnosingInteractions
	 */
		public Method183(Domain owner)
		{
			super(owner, new Predicate(134, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(138, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(131, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(137, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetadiagnosingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method183Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetadiagnosingInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method184 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetadiagnosingInteractionEnvironment
	 */
		public Method184(Domain owner)
		{
			super(owner, new Predicate(138, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(308) /*Metadiagnosing*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(308) /*Metadiagnosing*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetadiagnosingInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method184Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithInstigatingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method185 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithInstigatingInteractions
	 */
		public Method185(Domain owner)
		{
			super(owner, new Predicate(140, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(310) /*WithInstigating*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(310) /*WithInstigating*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(139, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeCommunicationWithInstigatingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method185Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method186 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions
	 */
		public Method186(Domain owner)
		{
			super(owner, new Predicate(139, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(141, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method186Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition206 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition206(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method187 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions!
	 */
		public Method187(Domain owner)
		{
			super(owner, new Predicate(141, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(105, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(63, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(70, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition206(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method187Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method188 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions
	 */
		public Method188(Domain owner)
		{
			super(owner, new Predicate(139, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(142, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(105, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(70, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationWithInstigatingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method188Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithInstigatingInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method189 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithInstigatingInteractionEnvironment
	 */
		public Method189(Domain owner)
		{
			super(owner, new Predicate(142, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(310) /*WithInstigating*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(310) /*WithInstigating*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeCommunicationWithInstigatingInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method189Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithMonitoringInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method190 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithMonitoringInteractions
	 */
		public Method190(Domain owner)
		{
			super(owner, new Predicate(144, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(311) /*WithMonitoring*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(311) /*WithMonitoring*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(143, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeCommunicationWithMonitoringInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method190Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method191 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions
	 */
		public Method191(Domain owner)
		{
			super(owner, new Predicate(143, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(145, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method191Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition207 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition207(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method192 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions!
	 */
		public Method192(Domain owner)
		{
			super(owner, new Predicate(145, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(105, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(56, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(84, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition207(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method192Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method193 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions
	 */
		public Method193(Domain owner)
		{
			super(owner, new Predicate(143, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(146, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(105, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(56, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(84, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationWithMonitoringInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method193Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithMonitoringInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method194 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationWithMonitoringInteractionEnvironment
	 */
		public Method194(Domain owner)
		{
			super(owner, new Predicate(146, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(311) /*WithMonitoring*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(311) /*WithMonitoring*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeCommunicationWithMonitoringInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method194Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method195 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationInteractions
	 */
		public Method195(Domain owner)
		{
			super(owner, new Predicate(148, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(147, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeCommunicationInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method195Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method196 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationInteractions
	 */
		public Method196(Domain owner)
		{
			super(owner, new Predicate(147, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(149, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method196Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMetarecognizeCommunicationInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition208 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition208(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMetarecognizeCommunicationInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method197 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationInteractions!
	 */
		public Method197(Domain owner)
		{
			super(owner, new Predicate(149, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(144, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(140, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition208(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method197Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeCommunicationInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method198 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeCommunicationInteractions
	 */
		public Method198(Domain owner)
		{
			super(owner, new Predicate(147, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(150, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(144, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(140, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeCommunicationInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method198Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method199 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeCommunicationInteractionEnvironment
	 */
		public Method199(Domain owner)
		{
			super(owner, new Predicate(150, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(309) /*MetarecognizeCommunication*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeCommunicationInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method199Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeProgressInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method200 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeProgressInteractions
	 */
		public Method200(Domain owner)
		{
			super(owner, new Predicate(152, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(312) /*MetarecognizeProgress*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(312) /*MetarecognizeProgress*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(151, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeProgressInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method200Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeProgressInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method201 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeProgressInteractions
	 */
		public Method201(Domain owner)
		{
			super(owner, new Predicate(151, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(153, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeProgressInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method201Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMetarecognizeProgressInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition209 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition209(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMetarecognizeProgressInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeProgressInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method202 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeProgressInteractions!
	 */
		public Method202(Domain owner)
		{
			super(owner, new Predicate(153, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(42, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(84, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(91, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeProgressInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition209(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method202Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMetarecognizeProgressInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method203 extends Method
	{
	/**
	 * Method -1 for compound task createMetarecognizeProgressInteractions
	 */
		public Method203(Domain owner)
		{
			super(owner, new Predicate(151, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(154, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(42, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(84, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(91, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMetarecognizeProgressInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method203Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMetarecognizeProgressInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method204 extends Method
	{
	/**
	 * Method -1 for compound task createLDMetarecognizeProgressInteractionEnvironment
	 */
		public Method204(Domain owner)
		{
			super(owner, new Predicate(154, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(312) /*MetarecognizeProgress*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(312) /*MetarecognizeProgress*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMetarecognizeProgressInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method204Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitInstThinkWithMetademonInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method205 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitInstThinkWithMetademonInteractions
	 */
		public Method205(Domain owner)
		{
			super(owner, new Predicate(156, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(313) /*MonitInstThinkWithMetademon*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(314) /*WithMetademon*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL)))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(155, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitInstThinkWithMetademonInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method205Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitInstThinkWithMetademonInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method206 extends Method
	{
	/**
	 * Method -1 for compound task createMonitInstThinkWithMetademonInteractions
	 */
		public Method206(Domain owner)
		{
			super(owner, new Predicate(155, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(157, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitInstThinkWithMetademonInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method206Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMonitInstThinkWithMetademonInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition210 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition210(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMonitInstThinkWithMetademonInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMonitInstThinkWithMetademonInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method207 extends Method
	{
	/**
	 * Method -1 for compound task createMonitInstThinkWithMetademonInteractions!
	 */
		public Method207(Domain owner)
		{
			super(owner, new Predicate(157, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(158, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(159, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(119, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitInstThinkWithMetademonInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition210(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method207Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitInstThinkWithMetademonInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method208 extends Method
	{
	/**
	 * Method -1 for compound task createMonitInstThinkWithMetademonInteractions
	 */
		public Method208(Domain owner)
		{
			super(owner, new Predicate(155, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(160, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(158, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(159, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(119, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitInstThinkWithMetademonInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method208Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitInstThinkWithMetademonInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method209 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitInstThinkWithMetademonInteractionEnvironment
	 */
		public Method209(Domain owner)
		{
			super(owner, new Predicate(160, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(313) /*MonitInstThinkWithMetademon*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(314) /*WithMetademon*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitInstThinkWithMetademonInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method209Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringInstThinkingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method210 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringInstThinkingInteractions
	 */
		public Method210(Domain owner)
		{
			super(owner, new Predicate(158, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(315) /*MonitoringInstThinking*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(161, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringInstThinkingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method210Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringInstThinkingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method211 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringInstThinkingInteractions
	 */
		public Method211(Domain owner)
		{
			super(owner, new Predicate(161, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(162, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringInstThinkingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method211Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMonitoringInstThinkingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition211 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition211(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMonitoringInstThinkingInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMonitoringInstThinkingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method212 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringInstThinkingInteractions!
	 */
		public Method212(Domain owner)
		{
			super(owner, new Predicate(162, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(84, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(70, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringInstThinkingInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition211(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method212Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringInstThinkingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method213 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringInstThinkingInteractions
	 */
		public Method213(Domain owner)
		{
			super(owner, new Predicate(161, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(163, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(84, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(70, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringInstThinkingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method213Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringInstThinkingInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method214 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringInstThinkingInteractionEnvironment
	 */
		public Method214(Domain owner)
		{
			super(owner, new Predicate(163, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(315) /*MonitoringInstThinking*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringInstThinkingInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method214Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringNotifyHowLearnerIsInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method215 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringNotifyHowLearnerIsInteractions
	 */
		public Method215(Domain owner)
		{
			super(owner, new Predicate(165, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(316) /*MonitoringNotifyHowLearnerIs*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(302) /*ProblemDetail*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(164, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringNotifyHowLearnerIsInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method215Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method216 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions
	 */
		public Method216(Domain owner)
		{
			super(owner, new Predicate(164, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(166, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method216Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition212 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition212(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method217 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions!
	 */
		public Method217(Domain owner)
		{
			super(owner, new Predicate(166, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(84, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(91, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition212(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method217Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method218 extends Method
	{
	/**
	 * Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions
	 */
		public Method218(Domain owner)
		{
			super(owner, new Predicate(164, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(167, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(84, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(91, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMonitoringNotifyHowLearnerIsInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method218Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMonitoringNotifyHowLearnerIsInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method219 extends Method
	{
	/**
	 * Method -1 for compound task createLDMonitoringNotifyHowLearnerIsInteractionEnvironment
	 */
		public Method219(Domain owner)
		{
			super(owner, new Predicate(167, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(316) /*MonitoringNotifyHowLearnerIs*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(285) /*Monitoring*/, new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMonitoringNotifyHowLearnerIsInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method219Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailInstThinkingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method220 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailInstThinkingInteractions
	 */
		public Method220(Domain owner)
		{
			super(owner, new Predicate(169, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(317) /*ReqProblemDetailInstThinking*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(168, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailInstThinkingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method220Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailInstThinkingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method221 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailInstThinkingInteractions
	 */
		public Method221(Domain owner)
		{
			super(owner, new Predicate(168, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(170, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailInstThinkingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method221Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createReqProblemDetailInstThinkingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition213 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition213(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createReqProblemDetailInstThinkingInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailInstThinkingInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method222 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailInstThinkingInteractions!
	 */
		public Method222(Domain owner)
		{
			super(owner, new Predicate(170, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(98, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(70, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailInstThinkingInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition213(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method222Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailInstThinkingInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method223 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailInstThinkingInteractions
	 */
		public Method223(Domain owner)
		{
			super(owner, new Predicate(168, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(171, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(98, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(70, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailInstThinkingInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method223Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailInstThinkingInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method224 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailInstThinkingInteractionEnvironment
	 */
		public Method224(Domain owner)
		{
			super(owner, new Predicate(171, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(317) /*ReqProblemDetailInstThinking*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(279) /*InstThinking*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailInstThinkingInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method224Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailNotifyHowLearnerIsInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method225 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailNotifyHowLearnerIsInteractions
	 */
		public Method225(Domain owner)
		{
			super(owner, new Predicate(173, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(318) /*ReqProblemDetailNotifyHowLearnerIs*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(172, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailNotifyHowLearnerIsInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method225Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method226 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions
	 */
		public Method226(Domain owner)
		{
			super(owner, new Predicate(172, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(174, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method226Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition214 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition214(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method227 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions!
	 */
		public Method227(Domain owner)
		{
			super(owner, new Predicate(174, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(98, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(91, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition214(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method227Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method228 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions
	 */
		public Method228(Domain owner)
		{
			super(owner, new Predicate(172, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(175, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(98, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(91, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailNotifyHowLearnerIsInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method228Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailNotifyHowLearnerIsInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method229 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailNotifyHowLearnerIsInteractionEnvironment
	 */
		public Method229(Domain owner)
		{
			super(owner, new Predicate(175, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(318) /*ReqProblemDetailNotifyHowLearnerIs*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(288) /*NotifyHowLearnerIs*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailNotifyHowLearnerIsInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method229Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailShowSolutionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method230 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailShowSolutionInteractions
	 */
		public Method230(Domain owner)
		{
			super(owner, new Predicate(159, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(319) /*ReqProblemDetailShowSolution*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(176, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailShowSolutionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method230Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailShowSolutionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method231 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailShowSolutionInteractions
	 */
		public Method231(Domain owner)
		{
			super(owner, new Predicate(176, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(177, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailShowSolutionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method231Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createReqProblemDetailShowSolutionInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition215 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition215(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createReqProblemDetailShowSolutionInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailShowSolutionInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method232 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailShowSolutionInteractions!
	 */
		public Method232(Domain owner)
		{
			super(owner, new Predicate(177, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(98, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(112, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailShowSolutionInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition215(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method232Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createReqProblemDetailShowSolutionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method233 extends Method
	{
	/**
	 * Method -1 for compound task createReqProblemDetailShowSolutionInteractions
	 */
		public Method233(Domain owner)
		{
			super(owner, new Predicate(176, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(178, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(98, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(112, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createReqProblemDetailShowSolutionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method233Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDReqProblemDetailShowSolutionInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method234 extends Method
	{
	/**
	 * Method -1 for compound task createLDReqProblemDetailShowSolutionInteractionEnvironment
	 */
		public Method234(Domain owner)
		{
			super(owner, new Predicate(178, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(319) /*ReqProblemDetailShowSolution*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(291) /*ReqProblemDetail*/, new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDReqProblemDetailShowSolutionInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method234Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowSolutionInstDiscussionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method235 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowSolutionInstDiscussionInteractions
	 */
		public Method235(Domain owner)
		{
			super(owner, new Predicate(137, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(320) /*ShowSolutionInstDiscussion*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(303) /*Iteractions*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(179, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowSolutionInstDiscussionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method235Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionInstDiscussionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method236 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionInstDiscussionInteractions
	 */
		public Method236(Domain owner)
		{
			super(owner, new Predicate(179, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(180, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionInstDiscussionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method236Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowSolutionInstDiscussionInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition216 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition216(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(6), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(owner.getTermVariable(7), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 9, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowSolutionInstDiscussionInteractions! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionInstDiscussionInteractions!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method237 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionInstDiscussionInteractions!
	 */
		public Method237(Domain owner)
		{
			super(owner, new Predicate(180, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(112, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(63, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionInstDiscussionInteractions! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition216(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method237Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowSolutionInstDiscussionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method238 extends Method
	{
	/**
	 * Method -1 for compound task createShowSolutionInstDiscussionInteractions
	 */
		public Method238(Domain owner)
		{
			super(owner, new Predicate(179, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(181, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(112, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowSolutionInstDiscussionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method238Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowSolutionInstDiscussionInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method239 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowSolutionInstDiscussionInteractionEnvironment
	 */
		public Method239(Domain owner)
		{
			super(owner, new Predicate(181, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(320) /*ShowSolutionInstDiscussion*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(295) /*ShowSolution*/, new TermList(owner.getTermConstant(276) /*InstDiscussion*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowSolutionInstDiscussionInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method239Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchoredInstructionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition217 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition217(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchoredInstructionInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method240 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructionInteractions
	 */
		public Method240(Domain owner)
		{
			super(owner, new Predicate(183, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(owner.getTermVariable(3), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 5, new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(182, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition217(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method240Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition218 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition218(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method241 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionInteractions
	 */
		public Method241(Domain owner)
		{
			super(owner, new Predicate(182, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(184, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(173, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition218(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method241Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition219 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition219(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method242 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionInteractions
	 */
		public Method242(Domain owner)
		{
			super(owner, new Predicate(182, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(184, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(49, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(135, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition219(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method242Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructionInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method243 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructionInteractionEnvironment
	 */
		public Method243(Domain owner)
		{
			super(owner, new Predicate(184, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructionInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method243Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition220 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition220(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCogApprenticeshipInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method244 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogApprenticeshipInteractions
	 */
		public Method244(Domain owner)
		{
			super(owner, new Predicate(186, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(owner.getTermVariable(3), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 5, new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(185, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogApprenticeshipInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition220(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method244Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition221 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition221(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition222 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition222(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition221(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions*/;
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method245 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipInteractions
	 */
		public Method245(Domain owner)
		{
			super(owner, new Predicate(185, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(187, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(105, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(119, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition222(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method245Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition223 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition223(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createCogApprenticeshipInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method246 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipInteractions
	 */
		public Method246(Domain owner)
		{
			super(owner, new Predicate(185, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(187, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(156, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(165, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(158, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition223(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method246Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogApprenticeshipInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method247 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogApprenticeshipInteractionEnvironment
	 */
		public Method247(Domain owner)
		{
			super(owner, new Predicate(187, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogApprenticeshipInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method247Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCogFlexibilityInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition224 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition224(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCogFlexibilityInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method248 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityInteractions
	 */
		public Method248(Domain owner)
		{
			super(owner, new Predicate(189, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(owner.getTermVariable(3), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 5, new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(188, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition224(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method248Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createCogFlexibilityInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method249 extends Method
	{
	/**
	 * Method -1 for compound task createCogFlexibilityInteractions
	 */
		public Method249(Domain owner)
		{
			super(owner, new Predicate(188, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(190, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(77, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(148, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogFlexibilityInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method249Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method250 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityInteractionEnvironment
	 */
		public Method250(Domain owner)
		{
			super(owner, new Predicate(190, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method250Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDDistCognitionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition225 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition225(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDDistCognitionInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDDistCognitionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method251 extends Method
	{
	/**
	 * Method -1 for compound task createLDDistCognitionInteractions
	 */
		public Method251(Domain owner)
		{
			super(owner, new Predicate(192, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(owner.getTermVariable(3), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 5, new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(191, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDistCognitionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition225(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method251Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDistCognitionInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method252 extends Method
	{
	/**
	 * Method -1 for compound task createDistCognitionInteractions
	 */
		public Method252(Domain owner)
		{
			super(owner, new Predicate(191, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(193, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(123, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(169, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(91, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDistCognitionInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method252Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDistCognitionInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method253 extends Method
	{
	/**
	 * Method -1 for compound task createLDDistCognitionInteractionEnvironment
	 */
		public Method253(Domain owner)
		{
			super(owner, new Predicate(193, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDistCognitionInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method253Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLPPInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition226 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition226(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLPPInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLPPInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method254 extends Method
	{
	/**
	 * Method -1 for compound task createLDLPPInteractions
	 */
		public Method254(Domain owner)
		{
			super(owner, new Predicate(195, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(owner.getTermVariable(3), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 5, new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(194, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLPPInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition226(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method254Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLPPInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition227 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition227(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLPPInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLPPInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method255 extends Method
	{
	/**
	 * Method -1 for compound task createLPPInteractions
	 */
		public Method255(Domain owner)
		{
			super(owner, new Predicate(194, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(196, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(123, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(98, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition227(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method255Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLPPInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition228 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition228(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 4, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLPPInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLPPInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method256 extends Method
	{
	/**
	 * Method -1 for compound task createLPPInteractions
	 */
		public Method256(Domain owner)
		{
			super(owner, new Predicate(194, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(196, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(91, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(123, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition228(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method256Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLPPInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method257 extends Method
	{
	/**
	 * Method -1 for compound task createLDLPPInteractionEnvironment
	 */
		public Method257(Domain owner)
		{
			super(owner, new Predicate(196, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLPPInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method257Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTutoringInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition229 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition229(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTutoringInteractions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutoringInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method258 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutoringInteractions
	 */
		public Method258(Domain owner)
		{
			super(owner, new Predicate(198, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(owner.getTermVariable(3), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(300) /*selection*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 5, new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(260) /*Interactions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(197, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 5, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(5, 5, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutoringInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition229(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method258Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeerTutoringInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method259 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTutoringInteractions
	 */
		public Method259(Domain owner)
		{
			super(owner, new Predicate(197, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(199, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(127, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(152, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTutoringInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method259Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutoringInteractionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method260 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutoringInteractionEnvironment
	 */
		public Method260(Domain owner)
		{
			super(owner, new Predicate(199, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(261) /*InteractionEnvironment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutoringInteractionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method260Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method261 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorRole
	 */
		public Method261(Domain owner)
		{
			super(owner, new Predicate(201, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(200, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method261Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchoredInstructorRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition230 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition230(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(329) /*AnchoredInstructor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchoredInstructorRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method262 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorRole!
	 */
		public Method262(Domain owner)
		{
			super(owner, new Predicate(200, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition230(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method262Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchoredInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition231 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition231(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchoredInstructorRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method263 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorRole
	 */
		public Method263(Domain owner)
		{
			super(owner, new Predicate(201, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(329) /*AnchoredInstructor*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(329) /*AnchoredInstructor*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(202, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition231(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method263Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method264 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructorRole
	 */
		public Method264(Domain owner)
		{
			super(owner, new Predicate(202, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method264Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method265 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorInformation
	 */
		public Method265(Domain owner)
		{
			super(owner, new Predicate(204, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(203, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method265Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method266 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorInformation!
	 */
		public Method266(Domain owner)
		{
			super(owner, new Predicate(203, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(329) /*AnchoredInstructor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method266Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method267 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorInformation
	 */
		public Method267(Domain owner)
		{
			super(owner, new Predicate(204, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(329) /*AnchoredInstructor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method267Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method268 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderRole
	 */
		public Method268(Domain owner)
		{
			super(owner, new Predicate(206, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(205, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method268Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchorHolderRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition232 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition232(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(332) /*AnchorHolder*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchorHolderRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method269 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderRole!
	 */
		public Method269(Domain owner)
		{
			super(owner, new Predicate(205, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition232(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method269Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchorHolderRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition233 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition233(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchorHolderRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method270 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderRole
	 */
		public Method270(Domain owner)
		{
			super(owner, new Predicate(206, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(332) /*AnchorHolder*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(332) /*AnchorHolder*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(207, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition233(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method270Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createAnchorHolderRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method271 extends Method
	{
	/**
	 * Method -1 for compound task createAnchorHolderRole
	 */
		public Method271(Domain owner)
		{
			super(owner, new Predicate(207, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchorHolderRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method271Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method272 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderInformation
	 */
		public Method272(Domain owner)
		{
			super(owner, new Predicate(209, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(208, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method272Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method273 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderInformation!
	 */
		public Method273(Domain owner)
		{
			super(owner, new Predicate(208, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(332) /*AnchorHolder*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method273Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method274 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderInformation
	 */
		public Method274(Domain owner)
		{
			super(owner, new Predicate(209, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(332) /*AnchorHolder*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method274Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method275 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipRole
	 */
		public Method275(Domain owner)
		{
			super(owner, new Predicate(211, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(210, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method275Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDApprenticeshipRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition234 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition234(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(333) /*Apprenticeship*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDApprenticeshipRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method276 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipRole!
	 */
		public Method276(Domain owner)
		{
			super(owner, new Predicate(210, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition234(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method276Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDApprenticeshipRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition235 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition235(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDApprenticeshipRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method277 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipRole
	 */
		public Method277(Domain owner)
		{
			super(owner, new Predicate(211, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(333) /*Apprenticeship*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(333) /*Apprenticeship*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(212, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition235(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method277Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createApprenticeshipRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method278 extends Method
	{
	/**
	 * Method -1 for compound task createApprenticeshipRole
	 */
		public Method278(Domain owner)
		{
			super(owner, new Predicate(212, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createApprenticeshipRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method278Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method279 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipInformation
	 */
		public Method279(Domain owner)
		{
			super(owner, new Predicate(214, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(213, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method279Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method280 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipInformation!
	 */
		public Method280(Domain owner)
		{
			super(owner, new Predicate(213, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(333) /*Apprenticeship*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method280Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method281 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipInformation
	 */
		public Method281(Domain owner)
		{
			super(owner, new Predicate(214, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(333) /*Apprenticeship*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method281Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method282 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceRole
	 */
		public Method282(Domain owner)
		{
			super(owner, new Predicate(216, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(215, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method282Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAudienceRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition236 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition236(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(334) /*Audience*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAudienceRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method283 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceRole!
	 */
		public Method283(Domain owner)
		{
			super(owner, new Predicate(215, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition236(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method283Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAudienceRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition237 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition237(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAudienceRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method284 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceRole
	 */
		public Method284(Domain owner)
		{
			super(owner, new Predicate(216, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(334) /*Audience*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(334) /*Audience*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(217, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition237(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method284Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createAudienceRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method285 extends Method
	{
	/**
	 * Method -1 for compound task createAudienceRole
	 */
		public Method285(Domain owner)
		{
			super(owner, new Predicate(217, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAudienceRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method285Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method286 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceInformation
	 */
		public Method286(Domain owner)
		{
			super(owner, new Predicate(219, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(218, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method286Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method287 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceInformation!
	 */
		public Method287(Domain owner)
		{
			super(owner, new Predicate(218, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(334) /*Audience*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method287Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method288 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceInformation
	 */
		public Method288(Domain owner)
		{
			super(owner, new Predicate(219, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(334) /*Audience*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method288Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantLearnerRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method289 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantLearnerRole
	 */
		public Method289(Domain owner)
		{
			super(owner, new Predicate(221, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(220, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantLearnerRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method289Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFullParticipantLearnerRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition238 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition238(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(335) /*FullParticipantLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFullParticipantLearnerRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantLearnerRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method290 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantLearnerRole!
	 */
		public Method290(Domain owner)
		{
			super(owner, new Predicate(220, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantLearnerRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition238(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method290Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFullParticipantLearnerRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition239 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition239(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFullParticipantLearnerRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantLearnerRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method291 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantLearnerRole
	 */
		public Method291(Domain owner)
		{
			super(owner, new Predicate(221, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(335) /*FullParticipantLearner*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(335) /*FullParticipantLearner*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(222, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantLearnerRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition239(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method291Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createFullParticipantRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method292 extends Method
	{
	/**
	 * Method -1 for compound task createFullParticipantRole
	 */
		public Method292(Domain owner)
		{
			super(owner, new Predicate(222, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFullParticipantRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method292Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method293 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInstructorRole
	 */
		public Method293(Domain owner)
		{
			super(owner, new Predicate(224, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(223, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInstructorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method293Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFullParticipantInstructorRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition240 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition240(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(336) /*FullParticipantInstructor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFullParticipantInstructorRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInstructorRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method294 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInstructorRole!
	 */
		public Method294(Domain owner)
		{
			super(owner, new Predicate(223, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInstructorRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition240(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method294Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFullParticipantInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition241 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition241(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFullParticipantInstructorRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInstructorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method295 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInstructorRole
	 */
		public Method295(Domain owner)
		{
			super(owner, new Predicate(224, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(336) /*FullParticipantInstructor*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(336) /*FullParticipantInstructor*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(222, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInstructorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition241(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method295Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method296 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInformation
	 */
		public Method296(Domain owner)
		{
			super(owner, new Predicate(226, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(225, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method296Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method297 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInformation!
	 */
		public Method297(Domain owner)
		{
			super(owner, new Predicate(225, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(337) /*FullParticipant*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method297Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method298 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInformation
	 */
		public Method298(Domain owner)
		{
			super(owner, new Predicate(226, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(337) /*FullParticipant*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method298Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMasterRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method299 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterRole
	 */
		public Method299(Domain owner)
		{
			super(owner, new Predicate(228, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(227, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method299Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDMasterRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition242 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition242(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(338) /*Master*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDMasterRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDMasterRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method300 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterRole!
	 */
		public Method300(Domain owner)
		{
			super(owner, new Predicate(227, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition242(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method300Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDMasterRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition243 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition243(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDMasterRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDMasterRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method301 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterRole
	 */
		public Method301(Domain owner)
		{
			super(owner, new Predicate(228, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(338) /*Master*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(338) /*Master*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(229, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition243(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method301Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMasterRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method302 extends Method
	{
	/**
	 * Method -1 for compound task createMasterRole
	 */
		public Method302(Domain owner)
		{
			super(owner, new Predicate(229, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMasterRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method302Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMasterInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method303 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterInformation
	 */
		public Method303(Domain owner)
		{
			super(owner, new Predicate(231, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(230, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method303Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMasterInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method304 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterInformation!
	 */
		public Method304(Domain owner)
		{
			super(owner, new Predicate(230, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(338) /*Master*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method304Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMasterInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method305 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterInformation
	 */
		public Method305(Domain owner)
		{
			super(owner, new Predicate(231, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(338) /*Master*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method305Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method306 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistRole
	 */
		public Method306(Domain owner)
		{
			super(owner, new Predicate(233, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(232, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method306Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPanelistRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition244 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition244(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(339) /*Panelist*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPanelistRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method307 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistRole!
	 */
		public Method307(Domain owner)
		{
			super(owner, new Predicate(232, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition244(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method307Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPanelistRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition245 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition245(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPanelistRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method308 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistRole
	 */
		public Method308(Domain owner)
		{
			super(owner, new Predicate(233, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(339) /*Panelist*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(339) /*Panelist*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(234, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition245(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method308Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPanelistRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method309 extends Method
	{
	/**
	 * Method -1 for compound task createPanelistRole
	 */
		public Method309(Domain owner)
		{
			super(owner, new Predicate(234, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPanelistRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method309Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method310 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistInformation
	 */
		public Method310(Domain owner)
		{
			super(owner, new Predicate(236, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(235, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method310Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method311 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistInformation!
	 */
		public Method311(Domain owner)
		{
			super(owner, new Predicate(235, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(339) /*Panelist*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method311Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method312 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistInformation
	 */
		public Method312(Domain owner)
		{
			super(owner, new Predicate(236, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(339) /*Panelist*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method312Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method313 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeRole
	 */
		public Method313(Domain owner)
		{
			super(owner, new Predicate(238, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(237, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method313Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTuteeRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition246 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition246(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(340) /*PeerTutee*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTuteeRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method314 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeRole!
	 */
		public Method314(Domain owner)
		{
			super(owner, new Predicate(237, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition246(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method314Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTuteeRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition247 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition247(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTuteeRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method315 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeRole
	 */
		public Method315(Domain owner)
		{
			super(owner, new Predicate(238, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(340) /*PeerTutee*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(340) /*PeerTutee*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(239, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition247(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method315Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeerTuteeRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method316 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTuteeRole
	 */
		public Method316(Domain owner)
		{
			super(owner, new Predicate(239, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTuteeRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method316Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method317 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeInformation
	 */
		public Method317(Domain owner)
		{
			super(owner, new Predicate(241, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(240, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method317Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method318 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeInformation!
	 */
		public Method318(Domain owner)
		{
			super(owner, new Predicate(240, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(340) /*PeerTutee*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method318Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method319 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeInformation
	 */
		public Method319(Domain owner)
		{
			super(owner, new Predicate(241, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(340) /*PeerTutee*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method319Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method320 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorRole
	 */
		public Method320(Domain owner)
		{
			super(owner, new Predicate(243, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(242, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method320Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTutorRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition248 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition248(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(341) /*PeerTutor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTutorRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method321 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorRole!
	 */
		public Method321(Domain owner)
		{
			super(owner, new Predicate(242, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition248(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method321Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTutorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition249 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition249(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTutorRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method322 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorRole
	 */
		public Method322(Domain owner)
		{
			super(owner, new Predicate(243, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(341) /*PeerTutor*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(341) /*PeerTutor*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(244, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition249(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method322Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeerTutorRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method323 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTutorRole
	 */
		public Method323(Domain owner)
		{
			super(owner, new Predicate(244, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTutorRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method323Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method324 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorInformation
	 */
		public Method324(Domain owner)
		{
			super(owner, new Predicate(246, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(245, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method324Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method325 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorInformation!
	 */
		public Method325(Domain owner)
		{
			super(owner, new Predicate(245, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(341) /*PeerTutor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method325Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method326 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorInformation
	 */
		public Method326(Domain owner)
		{
			super(owner, new Predicate(246, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(341) /*PeerTutor*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method326Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method327 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralRole
	 */
		public Method327(Domain owner)
		{
			super(owner, new Predicate(248, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(247, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method327Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeripheralRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition250 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition250(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(2, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(195) /*hasRole*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(206) /*Role*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(342) /*Peripheral*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, new TermList(owner.getTermVariable(4), TermList.NIL))), owner.getTermVariable(7))))), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(7, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[9] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(44, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(195) /*hasRole*/, new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier), 11);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeripheralRole! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralRole!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method328 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralRole!
	 */
		public Method328(Domain owner)
		{
			super(owner, new Predicate(247, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 11, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralRole! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition250(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method328Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeripheralRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition251 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition251(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(330) /*role*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeripheralRole [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method329 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralRole
	 */
		public Method329(Domain owner)
		{
			super(owner, new Predicate(248, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(342) /*Peripheral*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL)))), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(342) /*Peripheral*/, new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(235) /*LDLearner*/, TermList.NIL))), new TermList(TermList.NIL, TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(249, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(243) /*learner*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(237) /*role-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition251(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method329Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeripheralRole
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method330 extends Method
	{
	/**
	 * Method -1 for compound task createPeripheralRole
	 */
		public Method330(Domain owner)
		{
			super(owner, new Predicate(249, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeripheralRole [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method330Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method331 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralInformation
	 */
		public Method331(Domain owner)
		{
			super(owner, new Predicate(251, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(250, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method331Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralInformation!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method332 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralInformation!
	 */
		public Method332(Domain owner)
		{
			super(owner, new Predicate(250, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralInformation! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(342) /*Peripheral*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method332Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralInformation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method333 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralInformation
	 */
		public Method333(Domain owner)
		{
			super(owner, new Predicate(251, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(26, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(244) /*information*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralInformation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(342) /*Peripheral*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(331) /*RoleDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method333Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByApprenticeshipStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method334 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByApprenticeshipStrategy
	 */
		public Method334(Domain owner)
		{
			super(owner, new Predicate(253, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(345) /*LearningByApprenticeship*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(345) /*LearningByApprenticeship*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(252, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByApprenticeshipStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method334Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningByApprenticeshipStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method335 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByApprenticeshipStrategy
	 */
		public Method335(Domain owner)
		{
			super(owner, new Predicate(252, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(211, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(254, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByApprenticeshipStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method335Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDApprenticeshipInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method336 extends Method
	{
	/**
	 * Method -1 for compound task createLDApprenticeshipInteractions
	 */
		public Method336(Domain owner)
		{
			super(owner, new Predicate(254, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDApprenticeshipInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method336Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByBeingTaughtStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method337 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByBeingTaughtStrategy
	 */
		public Method337(Domain owner)
		{
			super(owner, new Predicate(256, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(346) /*LearningByBeingTaught*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(346) /*LearningByBeingTaught*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(255, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByBeingTaughtStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method337Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLearningByBeingTaughtStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition252 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition252(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 4, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(328) /*PeerTutoring*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 4, new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLearningByBeingTaughtStrategy [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLearningByBeingTaughtStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method338 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByBeingTaughtStrategy
	 */
		public Method338(Domain owner)
		{
			super(owner, new Predicate(255, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(238, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(257, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByBeingTaughtStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition252(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method338Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLearningByBeingTaughtStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition253 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition253(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 4, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 4, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 4, new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLearningByBeingTaughtStrategy [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLearningByBeingTaughtStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method339 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByBeingTaughtStrategy
	 */
		public Method339(Domain owner)
		{
			super(owner, new Predicate(255, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(206, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(258, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByBeingTaughtStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition253(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method339Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTuteeInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method340 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTuteeInteractions
	 */
		public Method340(Domain owner)
		{
			super(owner, new Predicate(257, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTuteeInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method340Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchorHolderInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method341 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchorHolderInteractions
	 */
		public Method341(Domain owner)
		{
			super(owner, new Predicate(258, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchorHolderInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method341Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByDiagnosingStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method342 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByDiagnosingStrategy
	 */
		public Method342(Domain owner)
		{
			super(owner, new Predicate(260, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(348) /*LearningByDiagnosing*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(348) /*LearningByDiagnosing*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(259, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByDiagnosingStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method342Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningByDiagnosingStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method343 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByDiagnosingStrategy
	 */
		public Method343(Domain owner)
		{
			super(owner, new Predicate(259, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(201, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(261, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByDiagnosingStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method343Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructorInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method344 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructorInteractions
	 */
		public Method344(Domain owner)
		{
			super(owner, new Predicate(261, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructorInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method344Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByDiscussionInstructionalStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method345 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByDiscussionInstructionalStrategy
	 */
		public Method345(Domain owner)
		{
			super(owner, new Predicate(263, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(349) /*LearningByDiscussion*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(349) /*LearningByDiscussion*/, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(262, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByDiscussionInstructionalStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method345Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLearningByDiscussionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition254 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition254(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(207) /*Instructional*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLearningByDiscussionStrategy [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLearningByDiscussionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method346 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByDiscussionStrategy
	 */
		public Method346(Domain owner)
		{
			super(owner, new Predicate(262, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(224, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(264, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByDiscussionStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition254(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method346Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByDiscussionLearningStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method347 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByDiscussionLearningStrategy
	 */
		public Method347(Domain owner)
		{
			super(owner, new Predicate(265, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(349) /*LearningByDiscussion*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(349) /*LearningByDiscussion*/, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(262, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByDiscussionLearningStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method347Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLearningByDiscussionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition255 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition255(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(208) /*Learning*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLearningByDiscussionStrategy [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLearningByDiscussionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method348 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByDiscussionStrategy
	 */
		public Method348(Domain owner)
		{
			super(owner, new Predicate(262, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(221, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(264, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByDiscussionStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition255(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method348Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDFullParticipantInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method349 extends Method
	{
	/**
	 * Method -1 for compound task createLDFullParticipantInteractions
	 */
		public Method349(Domain owner)
		{
			super(owner, new Predicate(264, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFullParticipantInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method349Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByGuidingStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method350 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByGuidingStrategy
	 */
		public Method350(Domain owner)
		{
			super(owner, new Predicate(267, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(350) /*LearningByGuiding*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(350) /*LearningByGuiding*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(266, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByGuidingStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method350Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningByGuidingStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method351 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByGuidingStrategy
	 */
		public Method351(Domain owner)
		{
			super(owner, new Predicate(266, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(228, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(268, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByGuidingStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method351Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMasterInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method352 extends Method
	{
	/**
	 * Method -1 for compound task createLDMasterInteractions
	 */
		public Method352(Domain owner)
		{
			super(owner, new Predicate(268, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMasterInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method352Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByPracticeStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method353 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByPracticeStrategy
	 */
		public Method353(Domain owner)
		{
			super(owner, new Predicate(270, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(351) /*LearningByPractice*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(351) /*LearningByPractice*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(269, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByPracticeStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method353Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningByPracticeStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method354 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByPracticeStrategy
	 */
		public Method354(Domain owner)
		{
			super(owner, new Predicate(269, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(248, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(271, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByPracticeStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method354Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeripheralInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method355 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeripheralInteractions
	 */
		public Method355(Domain owner)
		{
			super(owner, new Predicate(271, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeripheralInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method355Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByReflectionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method356 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByReflectionStrategy
	 */
		public Method356(Domain owner)
		{
			super(owner, new Predicate(273, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(352) /*LearningByReflection*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(352) /*LearningByReflection*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(272, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByReflectionStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method356Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningByReflectionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method357 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByReflectionStrategy
	 */
		public Method357(Domain owner)
		{
			super(owner, new Predicate(272, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(216, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(274, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByReflectionStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method357Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAudienceInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method358 extends Method
	{
	/**
	 * Method -1 for compound task createLDAudienceInteractions
	 */
		public Method358(Domain owner)
		{
			super(owner, new Predicate(274, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAudienceInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method358Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningBySelfexpressionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method359 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningBySelfexpressionStrategy
	 */
		public Method359(Domain owner)
		{
			super(owner, new Predicate(276, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(353) /*LearningBySelfexpression*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(353) /*LearningBySelfexpression*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(275, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningBySelfexpressionStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method359Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningBySelfexpressionStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method360 extends Method
	{
	/**
	 * Method -1 for compound task createLearningBySelfexpressionStrategy
	 */
		public Method360(Domain owner)
		{
			super(owner, new Predicate(275, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(233, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(277, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningBySelfexpressionStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method360Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPanelistInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method361 extends Method
	{
	/**
	 * Method -1 for compound task createLDPanelistInteractions
	 */
		public Method361(Domain owner)
		{
			super(owner, new Predicate(277, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPanelistInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method361Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLearningByTeachingStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method362 extends Method
	{
	/**
	 * Method -1 for compound task createLDLearningByTeachingStrategy
	 */
		public Method362(Domain owner)
		{
			super(owner, new Predicate(279, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(354) /*LearningByTeaching*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(354) /*LearningByTeaching*/, new TermList(owner.getTermConstant(321) /*Strategy*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(278, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLearningByTeachingStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method362Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLearningByTeachingStrategy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method363 extends Method
	{
	/**
	 * Method -1 for compound task createLearningByTeachingStrategy
	 */
		public Method363(Domain owner)
		{
			super(owner, new Predicate(278, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(243, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(280, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLearningByTeachingStrategy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method363Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutorInteractions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method364 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutorInteractions
	 */
		public Method364(Domain owner)
		{
			super(owner, new Predicate(280, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutorInteractions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method364Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchoredInstructionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition256 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition256(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchoredInstructionPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method365 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructionPhase
	 */
		public Method365(Domain owner)
		{
			super(owner, new Predicate(282, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(281, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(1, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition256(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method365Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method366 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionPhase
	 */
		public Method366(Domain owner)
		{
			super(owner, new Predicate(281, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(260, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(256, 4, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(183, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method366Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCogApprenticeshipPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition257 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition257(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCogApprenticeshipPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCogApprenticeshipPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method367 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogApprenticeshipPhase
	 */
		public Method367(Domain owner)
		{
			super(owner, new Predicate(284, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(283, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(1, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogApprenticeshipPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition257(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method367Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method368 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipPhase
	 */
		public Method368(Domain owner)
		{
			super(owner, new Predicate(283, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(253, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(267, 4, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(186, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method368Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCogFlexibilityPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition258 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition258(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCogFlexibilityPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method369 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityPhase
	 */
		public Method369(Domain owner)
		{
			super(owner, new Predicate(286, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(285, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(1, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition258(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method369Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createCogFlexibilityPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method370 extends Method
	{
	/**
	 * Method -1 for compound task createCogFlexibilityPhase
	 */
		public Method370(Domain owner)
		{
			super(owner, new Predicate(285, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(276, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(273, 4, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(189, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogFlexibilityPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method370Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDDistCognitionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition259 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition259(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDDistCognitionPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDDistCognitionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method371 extends Method
	{
	/**
	 * Method -1 for compound task createLDDistCognitionPhase
	 */
		public Method371(Domain owner)
		{
			super(owner, new Predicate(288, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(287, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(1, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDistCognitionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition259(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method371Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDistCognitionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method372 extends Method
	{
	/**
	 * Method -1 for compound task createDistCognitionPhase
	 */
		public Method372(Domain owner)
		{
			super(owner, new Predicate(287, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(263, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(265, 4, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(192, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDistCognitionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method372Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLPPPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition260 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition260(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLPPPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLPPPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method373 extends Method
	{
	/**
	 * Method -1 for compound task createLDLPPPhase
	 */
		public Method373(Domain owner)
		{
			super(owner, new Predicate(290, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(289, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(1, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLPPPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition260(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method373Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLPPPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method374 extends Method
	{
	/**
	 * Method -1 for compound task createLPPPhase
	 */
		public Method374(Domain owner)
		{
			super(owner, new Predicate(289, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(263, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(270, 4, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(195, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method374Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTutoringPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition261 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition261(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTutoringPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutoringPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method375 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutoringPhase
	 */
		public Method375(Domain owner)
		{
			super(owner, new Predicate(292, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(291, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(1, 4, new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(322) /*CurrentLDInteractions*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutoringPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition261(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method375Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeerTutoringPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method376 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTutoringPhase
	 */
		public Method376(Domain owner)
		{
			super(owner, new Predicate(291, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(279, 4, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(256, 4, new TermList(new TermList(owner.getTermVariable(1), TermList.NIL), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(198, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTutoringPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method376Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method377 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructionCLScenario
	 */
		public Method377(Domain owner)
		{
			super(owner, new Predicate(294, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(293, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method377Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method378 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructionCLScenario!
	 */
		public Method378(Domain owner)
		{
			super(owner, new Predicate(293, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(295, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(7, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method378Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition262 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition262(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[3] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
			p[3].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 4)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Conjunct #2 of Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition263 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition263(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition264 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition264(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition262(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition263(owner, unifier) /*Conjunct 3 of Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(5), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), owner.getTermVariable(10))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[13] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 14);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDAnchoredInstructionCLScenario [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method379 extends Method
	{
	/**
	 * Method -1 for compound task createLDAnchoredInstructionCLScenario
	 */
		public Method379(Domain owner)
		{
			super(owner, new Predicate(294, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(7, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 16, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 16, new TermList(new TermList(owner.getTermConstant(323) /*AnchoredInstruction*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(295, 16, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(14), TermList.NIL))), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(15), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDAnchoredInstructionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition264(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method379Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method380 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario
	 */
		public Method380(Domain owner)
		{
			super(owner, new Predicate(295, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(296, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method380Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition265 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition265(Domain owner, Term[] unifier)
		{
			p = new Precondition[19];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 20, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(7, 20, new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermConstant(31) /*s2k2*/, new TermList(owner.getTermConstant(34) /*s3k1*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[15] = new PreconditionAtomic(new Predicate(82, 20, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[16] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL)))), owner.getTermVariable(14))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[17] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[18] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL))))), unifier);
			b = new Term[19][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[18] == null)
			{
				boolean b17changed = false;
				while (b[17] == null)
				{
					boolean b16changed = false;
					while (b[16] == null)
					{
						boolean b15changed = false;
						while (b[15] == null)
						{
							boolean b14changed = false;
							while (b[14] == null)
							{
								boolean b13changed = false;
								while (b[13] == null)
								{
									boolean b12changed = false;
									while (b[12] == null)
									{
										boolean b11changed = false;
										while (b[11] == null)
										{
											boolean b10changed = false;
											while (b[10] == null)
											{
												boolean b9changed = false;
												while (b[9] == null)
												{
													boolean b8changed = false;
													while (b[8] == null)
													{
														boolean b7changed = false;
														while (b[7] == null)
														{
															boolean b6changed = false;
															while (b[6] == null)
															{
																boolean b5changed = false;
																while (b[5] == null)
																{
																	boolean b4changed = false;
																	while (b[4] == null)
																	{
																		boolean b3changed = false;
																		while (b[3] == null)
																		{
																			boolean b2changed = false;
																			while (b[2] == null)
																			{
																				boolean b1changed = false;
																				while (b[1] == null)
																				{
																					b[1] = p[1].nextBinding(state);
																					if (b[1] == null)
																						return null;
																					else
																						bestMatch = Math.max(bestMatch, 1);
																					b1changed = true;
																				}
																				if ( b1changed ) {
																					p[2].reset(state);
																					p[2].bind(Term.merge(b, 2));
																				}
																				b[2] = p[2].nextBinding(state);
																				if (b[2] == null)
																					b[1] = null;
																				else
																					bestMatch = Math.max(bestMatch, 2);
																				b2changed = true;
																			}
																			if ( b2changed ) {
																				p[3].reset(state);
																				p[3].bind(Term.merge(b, 3));
																			}
																			b[3] = p[3].nextBinding(state);
																			if (b[3] == null)
																				b[2] = null;
																			else
																				bestMatch = Math.max(bestMatch, 3);
																			b3changed = true;
																		}
																		if ( b3changed ) {
																			p[4].reset(state);
																			p[4].bind(Term.merge(b, 4));
																		}
																		b[4] = p[4].nextBinding(state);
																		if (b[4] == null)
																			b[3] = null;
																		else
																			bestMatch = Math.max(bestMatch, 4);
																		b4changed = true;
																	}
																	if ( b4changed ) {
																		p[5].reset(state);
																		p[5].bind(Term.merge(b, 5));
																	}
																	b[5] = p[5].nextBinding(state);
																	if (b[5] == null)
																		b[4] = null;
																	else
																		bestMatch = Math.max(bestMatch, 5);
																	b5changed = true;
																}
																if ( b5changed ) {
																	p[6].reset(state);
																	p[6].bind(Term.merge(b, 6));
																}
																b[6] = p[6].nextBinding(state);
																if (b[6] == null)
																	b[5] = null;
																else
																	bestMatch = Math.max(bestMatch, 6);
																b6changed = true;
															}
															if ( b6changed ) {
																p[7].reset(state);
																p[7].bind(Term.merge(b, 7));
															}
															b[7] = p[7].nextBinding(state);
															if (b[7] == null)
																b[6] = null;
															else
																bestMatch = Math.max(bestMatch, 7);
															b7changed = true;
														}
														if ( b7changed ) {
															p[8].reset(state);
															p[8].bind(Term.merge(b, 8));
														}
														b[8] = p[8].nextBinding(state);
														if (b[8] == null)
															b[7] = null;
														else
															bestMatch = Math.max(bestMatch, 8);
														b8changed = true;
													}
													if ( b8changed ) {
														p[9].reset(state);
														p[9].bind(Term.merge(b, 9));
													}
													b[9] = p[9].nextBinding(state);
													if (b[9] == null)
														b[8] = null;
													else
														bestMatch = Math.max(bestMatch, 9);
													b9changed = true;
												}
												if ( b9changed ) {
													p[10].reset(state);
													p[10].bind(Term.merge(b, 10));
												}
												b[10] = p[10].nextBinding(state);
												if (b[10] == null)
													b[9] = null;
												else
													bestMatch = Math.max(bestMatch, 10);
												b10changed = true;
											}
											if ( b10changed ) {
												p[11].reset(state);
												p[11].bind(Term.merge(b, 11));
											}
											b[11] = p[11].nextBinding(state);
											if (b[11] == null)
												b[10] = null;
											else
												bestMatch = Math.max(bestMatch, 11);
											b11changed = true;
										}
										if ( b11changed ) {
											p[12].reset(state);
											p[12].bind(Term.merge(b, 12));
										}
										b[12] = p[12].nextBinding(state);
										if (b[12] == null)
											b[11] = null;
										else
											bestMatch = Math.max(bestMatch, 12);
										b12changed = true;
									}
									if ( b12changed ) {
										p[13].reset(state);
										p[13].bind(Term.merge(b, 13));
									}
									b[13] = p[13].nextBinding(state);
									if (b[13] == null)
										b[12] = null;
									else
										bestMatch = Math.max(bestMatch, 13);
									b13changed = true;
								}
								if ( b13changed ) {
									p[14].reset(state);
									p[14].bind(Term.merge(b, 14));
								}
								b[14] = p[14].nextBinding(state);
								if (b[14] == null)
									b[13] = null;
								else
									bestMatch = Math.max(bestMatch, 14);
								b14changed = true;
							}
							if ( b14changed ) {
								p[15].reset(state);
								p[15].bind(Term.merge(b, 15));
							}
							b[15] = p[15].nextBinding(state);
							if (b[15] == null)
								b[14] = null;
							else
								bestMatch = Math.max(bestMatch, 15);
							b15changed = true;
						}
						if ( b15changed ) {
							p[16].reset(state);
							p[16].bind(Term.merge(b, 16));
						}
						b[16] = p[16].nextBinding(state);
						if (b[16] == null)
							b[15] = null;
						else
							bestMatch = Math.max(bestMatch, 16);
						b16changed = true;
					}
					if ( b16changed ) {
						p[17].reset(state);
						p[17].bind(Term.merge(b, 17));
					}
					b[17] = p[17].nextBinding(state);
					if (b[17] == null)
						b[16] = null;
					else
						bestMatch = Math.max(bestMatch, 17);
					b17changed = true;
				}
				if ( b17changed ) {
					p[18].reset(state);
					p[18].bind(Term.merge(b, 18));
				}
				b[18] = p[18].nextBinding(state);
				if (b[18] == null)
					b[17] = null;
				else
					bestMatch = Math.max(bestMatch, 18);
			}

			Term[] retVal = Term.merge(b, 19);
			b[18] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			p[15].reset(state);
			p[16].reset(state);
			p[17].reset(state);
			p[18].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method381 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 */
		public Method381(Domain owner)
		{
			super(owner, new Predicate(296, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(19), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition265(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method381Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition266 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition266(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition267 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition267(Domain owner, Term[] unifier)
		{
			p = new Precondition[19];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition266(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 20, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(82, 20, new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[15] = new PreconditionAtomic(new Predicate(82, 20, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[16] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL)))), owner.getTermVariable(14))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[17] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[18] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL))))), unifier);
			b = new Term[19][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[18] == null)
			{
				boolean b17changed = false;
				while (b[17] == null)
				{
					boolean b16changed = false;
					while (b[16] == null)
					{
						boolean b15changed = false;
						while (b[15] == null)
						{
							boolean b14changed = false;
							while (b[14] == null)
							{
								boolean b13changed = false;
								while (b[13] == null)
								{
									boolean b12changed = false;
									while (b[12] == null)
									{
										boolean b11changed = false;
										while (b[11] == null)
										{
											boolean b10changed = false;
											while (b[10] == null)
											{
												boolean b9changed = false;
												while (b[9] == null)
												{
													boolean b8changed = false;
													while (b[8] == null)
													{
														boolean b7changed = false;
														while (b[7] == null)
														{
															boolean b6changed = false;
															while (b[6] == null)
															{
																boolean b5changed = false;
																while (b[5] == null)
																{
																	boolean b4changed = false;
																	while (b[4] == null)
																	{
																		boolean b3changed = false;
																		while (b[3] == null)
																		{
																			boolean b2changed = false;
																			while (b[2] == null)
																			{
																				boolean b1changed = false;
																				while (b[1] == null)
																				{
																					b[1] = p[1].nextBinding(state);
																					if (b[1] == null)
																						return null;
																					else
																						bestMatch = Math.max(bestMatch, 1);
																					b1changed = true;
																				}
																				if ( b1changed ) {
																					p[2].reset(state);
																					p[2].bind(Term.merge(b, 2));
																				}
																				b[2] = p[2].nextBinding(state);
																				if (b[2] == null)
																					b[1] = null;
																				else
																					bestMatch = Math.max(bestMatch, 2);
																				b2changed = true;
																			}
																			if ( b2changed ) {
																				p[3].reset(state);
																				p[3].bind(Term.merge(b, 3));
																			}
																			b[3] = p[3].nextBinding(state);
																			if (b[3] == null)
																				b[2] = null;
																			else
																				bestMatch = Math.max(bestMatch, 3);
																			b3changed = true;
																		}
																		if ( b3changed ) {
																			p[4].reset(state);
																			p[4].bind(Term.merge(b, 4));
																		}
																		b[4] = p[4].nextBinding(state);
																		if (b[4] == null)
																			b[3] = null;
																		else
																			bestMatch = Math.max(bestMatch, 4);
																		b4changed = true;
																	}
																	if ( b4changed ) {
																		p[5].reset(state);
																		p[5].bind(Term.merge(b, 5));
																	}
																	b[5] = p[5].nextBinding(state);
																	if (b[5] == null)
																		b[4] = null;
																	else
																		bestMatch = Math.max(bestMatch, 5);
																	b5changed = true;
																}
																if ( b5changed ) {
																	p[6].reset(state);
																	p[6].bind(Term.merge(b, 6));
																}
																b[6] = p[6].nextBinding(state);
																if (b[6] == null)
																	b[5] = null;
																else
																	bestMatch = Math.max(bestMatch, 6);
																b6changed = true;
															}
															if ( b6changed ) {
																p[7].reset(state);
																p[7].bind(Term.merge(b, 7));
															}
															b[7] = p[7].nextBinding(state);
															if (b[7] == null)
																b[6] = null;
															else
																bestMatch = Math.max(bestMatch, 7);
															b7changed = true;
														}
														if ( b7changed ) {
															p[8].reset(state);
															p[8].bind(Term.merge(b, 8));
														}
														b[8] = p[8].nextBinding(state);
														if (b[8] == null)
															b[7] = null;
														else
															bestMatch = Math.max(bestMatch, 8);
														b8changed = true;
													}
													if ( b8changed ) {
														p[9].reset(state);
														p[9].bind(Term.merge(b, 9));
													}
													b[9] = p[9].nextBinding(state);
													if (b[9] == null)
														b[8] = null;
													else
														bestMatch = Math.max(bestMatch, 9);
													b9changed = true;
												}
												if ( b9changed ) {
													p[10].reset(state);
													p[10].bind(Term.merge(b, 10));
												}
												b[10] = p[10].nextBinding(state);
												if (b[10] == null)
													b[9] = null;
												else
													bestMatch = Math.max(bestMatch, 10);
												b10changed = true;
											}
											if ( b10changed ) {
												p[11].reset(state);
												p[11].bind(Term.merge(b, 11));
											}
											b[11] = p[11].nextBinding(state);
											if (b[11] == null)
												b[10] = null;
											else
												bestMatch = Math.max(bestMatch, 11);
											b11changed = true;
										}
										if ( b11changed ) {
											p[12].reset(state);
											p[12].bind(Term.merge(b, 12));
										}
										b[12] = p[12].nextBinding(state);
										if (b[12] == null)
											b[11] = null;
										else
											bestMatch = Math.max(bestMatch, 12);
										b12changed = true;
									}
									if ( b12changed ) {
										p[13].reset(state);
										p[13].bind(Term.merge(b, 13));
									}
									b[13] = p[13].nextBinding(state);
									if (b[13] == null)
										b[12] = null;
									else
										bestMatch = Math.max(bestMatch, 13);
									b13changed = true;
								}
								if ( b13changed ) {
									p[14].reset(state);
									p[14].bind(Term.merge(b, 14));
								}
								b[14] = p[14].nextBinding(state);
								if (b[14] == null)
									b[13] = null;
								else
									bestMatch = Math.max(bestMatch, 14);
								b14changed = true;
							}
							if ( b14changed ) {
								p[15].reset(state);
								p[15].bind(Term.merge(b, 15));
							}
							b[15] = p[15].nextBinding(state);
							if (b[15] == null)
								b[14] = null;
							else
								bestMatch = Math.max(bestMatch, 15);
							b15changed = true;
						}
						if ( b15changed ) {
							p[16].reset(state);
							p[16].bind(Term.merge(b, 16));
						}
						b[16] = p[16].nextBinding(state);
						if (b[16] == null)
							b[15] = null;
						else
							bestMatch = Math.max(bestMatch, 16);
						b16changed = true;
					}
					if ( b16changed ) {
						p[17].reset(state);
						p[17].bind(Term.merge(b, 17));
					}
					b[17] = p[17].nextBinding(state);
					if (b[17] == null)
						b[16] = null;
					else
						bestMatch = Math.max(bestMatch, 17);
					b17changed = true;
				}
				if ( b17changed ) {
					p[18].reset(state);
					p[18].bind(Term.merge(b, 18));
				}
				b[18] = p[18].nextBinding(state);
				if (b[18] == null)
					b[17] = null;
				else
					bestMatch = Math.max(bestMatch, 18);
			}

			Term[] retVal = Term.merge(b, 19);
			b[18] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			p[15].reset(state);
			p[16].reset(state);
			p[17].reset(state);
			p[18].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method382 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 */
		public Method382(Domain owner)
		{
			super(owner, new Predicate(296, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(19), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(owner.getTermVariable(13), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition267(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method382Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition268 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition268(Domain owner, Term[] unifier)
		{
			p = new Precondition[19];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 20, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(7, 20, new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermConstant(31) /*s2k2*/, new TermList(owner.getTermConstant(34) /*s3k1*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[15] = new PreconditionAtomic(new Predicate(82, 20, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[16] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL)))), owner.getTermVariable(14))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[17] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[18] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL))))), unifier);
			b = new Term[19][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[18] == null)
			{
				boolean b17changed = false;
				while (b[17] == null)
				{
					boolean b16changed = false;
					while (b[16] == null)
					{
						boolean b15changed = false;
						while (b[15] == null)
						{
							boolean b14changed = false;
							while (b[14] == null)
							{
								boolean b13changed = false;
								while (b[13] == null)
								{
									boolean b12changed = false;
									while (b[12] == null)
									{
										boolean b11changed = false;
										while (b[11] == null)
										{
											boolean b10changed = false;
											while (b[10] == null)
											{
												boolean b9changed = false;
												while (b[9] == null)
												{
													boolean b8changed = false;
													while (b[8] == null)
													{
														boolean b7changed = false;
														while (b[7] == null)
														{
															boolean b6changed = false;
															while (b[6] == null)
															{
																boolean b5changed = false;
																while (b[5] == null)
																{
																	boolean b4changed = false;
																	while (b[4] == null)
																	{
																		boolean b3changed = false;
																		while (b[3] == null)
																		{
																			boolean b2changed = false;
																			while (b[2] == null)
																			{
																				boolean b1changed = false;
																				while (b[1] == null)
																				{
																					b[1] = p[1].nextBinding(state);
																					if (b[1] == null)
																						return null;
																					else
																						bestMatch = Math.max(bestMatch, 1);
																					b1changed = true;
																				}
																				if ( b1changed ) {
																					p[2].reset(state);
																					p[2].bind(Term.merge(b, 2));
																				}
																				b[2] = p[2].nextBinding(state);
																				if (b[2] == null)
																					b[1] = null;
																				else
																					bestMatch = Math.max(bestMatch, 2);
																				b2changed = true;
																			}
																			if ( b2changed ) {
																				p[3].reset(state);
																				p[3].bind(Term.merge(b, 3));
																			}
																			b[3] = p[3].nextBinding(state);
																			if (b[3] == null)
																				b[2] = null;
																			else
																				bestMatch = Math.max(bestMatch, 3);
																			b3changed = true;
																		}
																		if ( b3changed ) {
																			p[4].reset(state);
																			p[4].bind(Term.merge(b, 4));
																		}
																		b[4] = p[4].nextBinding(state);
																		if (b[4] == null)
																			b[3] = null;
																		else
																			bestMatch = Math.max(bestMatch, 4);
																		b4changed = true;
																	}
																	if ( b4changed ) {
																		p[5].reset(state);
																		p[5].bind(Term.merge(b, 5));
																	}
																	b[5] = p[5].nextBinding(state);
																	if (b[5] == null)
																		b[4] = null;
																	else
																		bestMatch = Math.max(bestMatch, 5);
																	b5changed = true;
																}
																if ( b5changed ) {
																	p[6].reset(state);
																	p[6].bind(Term.merge(b, 6));
																}
																b[6] = p[6].nextBinding(state);
																if (b[6] == null)
																	b[5] = null;
																else
																	bestMatch = Math.max(bestMatch, 6);
																b6changed = true;
															}
															if ( b6changed ) {
																p[7].reset(state);
																p[7].bind(Term.merge(b, 7));
															}
															b[7] = p[7].nextBinding(state);
															if (b[7] == null)
																b[6] = null;
															else
																bestMatch = Math.max(bestMatch, 7);
															b7changed = true;
														}
														if ( b7changed ) {
															p[8].reset(state);
															p[8].bind(Term.merge(b, 8));
														}
														b[8] = p[8].nextBinding(state);
														if (b[8] == null)
															b[7] = null;
														else
															bestMatch = Math.max(bestMatch, 8);
														b8changed = true;
													}
													if ( b8changed ) {
														p[9].reset(state);
														p[9].bind(Term.merge(b, 9));
													}
													b[9] = p[9].nextBinding(state);
													if (b[9] == null)
														b[8] = null;
													else
														bestMatch = Math.max(bestMatch, 9);
													b9changed = true;
												}
												if ( b9changed ) {
													p[10].reset(state);
													p[10].bind(Term.merge(b, 10));
												}
												b[10] = p[10].nextBinding(state);
												if (b[10] == null)
													b[9] = null;
												else
													bestMatch = Math.max(bestMatch, 10);
												b10changed = true;
											}
											if ( b10changed ) {
												p[11].reset(state);
												p[11].bind(Term.merge(b, 11));
											}
											b[11] = p[11].nextBinding(state);
											if (b[11] == null)
												b[10] = null;
											else
												bestMatch = Math.max(bestMatch, 11);
											b11changed = true;
										}
										if ( b11changed ) {
											p[12].reset(state);
											p[12].bind(Term.merge(b, 12));
										}
										b[12] = p[12].nextBinding(state);
										if (b[12] == null)
											b[11] = null;
										else
											bestMatch = Math.max(bestMatch, 12);
										b12changed = true;
									}
									if ( b12changed ) {
										p[13].reset(state);
										p[13].bind(Term.merge(b, 13));
									}
									b[13] = p[13].nextBinding(state);
									if (b[13] == null)
										b[12] = null;
									else
										bestMatch = Math.max(bestMatch, 13);
									b13changed = true;
								}
								if ( b13changed ) {
									p[14].reset(state);
									p[14].bind(Term.merge(b, 14));
								}
								b[14] = p[14].nextBinding(state);
								if (b[14] == null)
									b[13] = null;
								else
									bestMatch = Math.max(bestMatch, 14);
								b14changed = true;
							}
							if ( b14changed ) {
								p[15].reset(state);
								p[15].bind(Term.merge(b, 15));
							}
							b[15] = p[15].nextBinding(state);
							if (b[15] == null)
								b[14] = null;
							else
								bestMatch = Math.max(bestMatch, 15);
							b15changed = true;
						}
						if ( b15changed ) {
							p[16].reset(state);
							p[16].bind(Term.merge(b, 16));
						}
						b[16] = p[16].nextBinding(state);
						if (b[16] == null)
							b[15] = null;
						else
							bestMatch = Math.max(bestMatch, 16);
						b16changed = true;
					}
					if ( b16changed ) {
						p[17].reset(state);
						p[17].bind(Term.merge(b, 17));
					}
					b[17] = p[17].nextBinding(state);
					if (b[17] == null)
						b[16] = null;
					else
						bestMatch = Math.max(bestMatch, 17);
					b17changed = true;
				}
				if ( b17changed ) {
					p[18].reset(state);
					p[18].bind(Term.merge(b, 18));
				}
				b[18] = p[18].nextBinding(state);
				if (b[18] == null)
					b[17] = null;
				else
					bestMatch = Math.max(bestMatch, 18);
			}

			Term[] retVal = Term.merge(b, 19);
			b[18] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			p[15].reset(state);
			p[16].reset(state);
			p[17].reset(state);
			p[18].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method383 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 */
		public Method383(Domain owner)
		{
			super(owner, new Predicate(296, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(owner.getTermVariable(13), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(19), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition268(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method383Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition269 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition269(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition270 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition270(Domain owner, Term[] unifier)
		{
			p = new Precondition[19];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition269(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 20, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 20, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(82, 20, new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(128, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[15] = new PreconditionAtomic(new Predicate(82, 20, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[16] = new PreconditionAtomic(new Predicate(107, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL)))), owner.getTermVariable(14))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[17] = new PreconditionAtomic(new Predicate(125, 20, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[18] = new PreconditionAtomic(new Predicate(146, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(16), TermList.NIL))))), unifier);
			b = new Term[19][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[18] == null)
			{
				boolean b17changed = false;
				while (b[17] == null)
				{
					boolean b16changed = false;
					while (b[16] == null)
					{
						boolean b15changed = false;
						while (b[15] == null)
						{
							boolean b14changed = false;
							while (b[14] == null)
							{
								boolean b13changed = false;
								while (b[13] == null)
								{
									boolean b12changed = false;
									while (b[12] == null)
									{
										boolean b11changed = false;
										while (b[11] == null)
										{
											boolean b10changed = false;
											while (b[10] == null)
											{
												boolean b9changed = false;
												while (b[9] == null)
												{
													boolean b8changed = false;
													while (b[8] == null)
													{
														boolean b7changed = false;
														while (b[7] == null)
														{
															boolean b6changed = false;
															while (b[6] == null)
															{
																boolean b5changed = false;
																while (b[5] == null)
																{
																	boolean b4changed = false;
																	while (b[4] == null)
																	{
																		boolean b3changed = false;
																		while (b[3] == null)
																		{
																			boolean b2changed = false;
																			while (b[2] == null)
																			{
																				boolean b1changed = false;
																				while (b[1] == null)
																				{
																					b[1] = p[1].nextBinding(state);
																					if (b[1] == null)
																						return null;
																					else
																						bestMatch = Math.max(bestMatch, 1);
																					b1changed = true;
																				}
																				if ( b1changed ) {
																					p[2].reset(state);
																					p[2].bind(Term.merge(b, 2));
																				}
																				b[2] = p[2].nextBinding(state);
																				if (b[2] == null)
																					b[1] = null;
																				else
																					bestMatch = Math.max(bestMatch, 2);
																				b2changed = true;
																			}
																			if ( b2changed ) {
																				p[3].reset(state);
																				p[3].bind(Term.merge(b, 3));
																			}
																			b[3] = p[3].nextBinding(state);
																			if (b[3] == null)
																				b[2] = null;
																			else
																				bestMatch = Math.max(bestMatch, 3);
																			b3changed = true;
																		}
																		if ( b3changed ) {
																			p[4].reset(state);
																			p[4].bind(Term.merge(b, 4));
																		}
																		b[4] = p[4].nextBinding(state);
																		if (b[4] == null)
																			b[3] = null;
																		else
																			bestMatch = Math.max(bestMatch, 4);
																		b4changed = true;
																	}
																	if ( b4changed ) {
																		p[5].reset(state);
																		p[5].bind(Term.merge(b, 5));
																	}
																	b[5] = p[5].nextBinding(state);
																	if (b[5] == null)
																		b[4] = null;
																	else
																		bestMatch = Math.max(bestMatch, 5);
																	b5changed = true;
																}
																if ( b5changed ) {
																	p[6].reset(state);
																	p[6].bind(Term.merge(b, 6));
																}
																b[6] = p[6].nextBinding(state);
																if (b[6] == null)
																	b[5] = null;
																else
																	bestMatch = Math.max(bestMatch, 6);
																b6changed = true;
															}
															if ( b6changed ) {
																p[7].reset(state);
																p[7].bind(Term.merge(b, 7));
															}
															b[7] = p[7].nextBinding(state);
															if (b[7] == null)
																b[6] = null;
															else
																bestMatch = Math.max(bestMatch, 7);
															b7changed = true;
														}
														if ( b7changed ) {
															p[8].reset(state);
															p[8].bind(Term.merge(b, 8));
														}
														b[8] = p[8].nextBinding(state);
														if (b[8] == null)
															b[7] = null;
														else
															bestMatch = Math.max(bestMatch, 8);
														b8changed = true;
													}
													if ( b8changed ) {
														p[9].reset(state);
														p[9].bind(Term.merge(b, 9));
													}
													b[9] = p[9].nextBinding(state);
													if (b[9] == null)
														b[8] = null;
													else
														bestMatch = Math.max(bestMatch, 9);
													b9changed = true;
												}
												if ( b9changed ) {
													p[10].reset(state);
													p[10].bind(Term.merge(b, 10));
												}
												b[10] = p[10].nextBinding(state);
												if (b[10] == null)
													b[9] = null;
												else
													bestMatch = Math.max(bestMatch, 10);
												b10changed = true;
											}
											if ( b10changed ) {
												p[11].reset(state);
												p[11].bind(Term.merge(b, 11));
											}
											b[11] = p[11].nextBinding(state);
											if (b[11] == null)
												b[10] = null;
											else
												bestMatch = Math.max(bestMatch, 11);
											b11changed = true;
										}
										if ( b11changed ) {
											p[12].reset(state);
											p[12].bind(Term.merge(b, 12));
										}
										b[12] = p[12].nextBinding(state);
										if (b[12] == null)
											b[11] = null;
										else
											bestMatch = Math.max(bestMatch, 12);
										b12changed = true;
									}
									if ( b12changed ) {
										p[13].reset(state);
										p[13].bind(Term.merge(b, 13));
									}
									b[13] = p[13].nextBinding(state);
									if (b[13] == null)
										b[12] = null;
									else
										bestMatch = Math.max(bestMatch, 13);
									b13changed = true;
								}
								if ( b13changed ) {
									p[14].reset(state);
									p[14].bind(Term.merge(b, 14));
								}
								b[14] = p[14].nextBinding(state);
								if (b[14] == null)
									b[13] = null;
								else
									bestMatch = Math.max(bestMatch, 14);
								b14changed = true;
							}
							if ( b14changed ) {
								p[15].reset(state);
								p[15].bind(Term.merge(b, 15));
							}
							b[15] = p[15].nextBinding(state);
							if (b[15] == null)
								b[14] = null;
							else
								bestMatch = Math.max(bestMatch, 15);
							b15changed = true;
						}
						if ( b15changed ) {
							p[16].reset(state);
							p[16].bind(Term.merge(b, 16));
						}
						b[16] = p[16].nextBinding(state);
						if (b[16] == null)
							b[15] = null;
						else
							bestMatch = Math.max(bestMatch, 16);
						b16changed = true;
					}
					if ( b16changed ) {
						p[17].reset(state);
						p[17].bind(Term.merge(b, 17));
					}
					b[17] = p[17].nextBinding(state);
					if (b[17] == null)
						b[16] = null;
					else
						bestMatch = Math.max(bestMatch, 17);
					b17changed = true;
				}
				if ( b17changed ) {
					p[18].reset(state);
					p[18].bind(Term.merge(b, 18));
				}
				b[18] = p[18].nextBinding(state);
				if (b[18] == null)
					b[17] = null;
				else
					bestMatch = Math.max(bestMatch, 18);
			}

			Term[] retVal = Term.merge(b, 19);
			b[18] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			p[15].reset(state);
			p[16].reset(state);
			p[17].reset(state);
			p[18].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
			b[18] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method384 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 */
		public Method384(Domain owner)
		{
			super(owner, new Predicate(296, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(282, 20, new TermList(new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(19), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition270(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method384Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition271 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition271(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 15, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 15, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 15, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(82, 15, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(107, 15, new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(125, 15, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(146, 15, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL))))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method385 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 */
		public Method385(Domain owner)
		{
			super(owner, new Predicate(296, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(282, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(282, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition271(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method385Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition272 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition272(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 15, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 15, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 15, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(82, 15, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermVariable(10), new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(107, 15, new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(125, 15, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(146, 15, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL))))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method386 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario!
	 */
		public Method386(Domain owner)
		{
			super(owner, new Predicate(296, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(282, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(282, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition272(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method386Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method387 extends Method
	{
	/**
	 * Method -1 for compound task createAnchoredInstructionCLScenario
	 */
		public Method387(Domain owner)
		{
			super(owner, new Predicate(295, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(359) /*createAnchoredInstruction*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createAnchoredInstructionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method387Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogApprenticeshipCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method388 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogApprenticeshipCLScenario
	 */
		public Method388(Domain owner)
		{
			super(owner, new Predicate(298, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(297, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogApprenticeshipCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method388Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogApprenticeshipCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method389 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogApprenticeshipCLScenario!
	 */
		public Method389(Domain owner)
		{
			super(owner, new Predicate(297, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(299, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(7, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogApprenticeshipCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method389Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #2 of Precondition #0 of Method -1 for compound task createLDCogApprenticeshipCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition273 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition273(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition #0 of Method -1 for compound task createLDCogApprenticeshipCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCogApprenticeshipCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition274 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition274(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition273(owner, unifier) /*Conjunct 3 of Precondition #0 of Method -1 for compound task createLDCogApprenticeshipCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(5), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), owner.getTermVariable(10))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[13] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 14);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCogApprenticeshipCLScenario [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCogApprenticeshipCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method390 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogApprenticeshipCLScenario
	 */
		public Method390(Domain owner)
		{
			super(owner, new Predicate(298, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(7, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 16, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 16, new TermList(new TermList(owner.getTermConstant(324) /*CogApprenticeship*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(299, 16, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(14), TermList.NIL))), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(15), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogApprenticeshipCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition274(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method390Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method391 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario
	 */
		public Method391(Domain owner)
		{
			super(owner, new Predicate(299, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(300, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method391Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #3 of Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition275 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition275(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition276 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition276(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition275(owner, unifier) /*Conjunct 4 of Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario!*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 15, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 15, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 15, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(80) /*hasKnowledgeLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(82, 15, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(107, 15, new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(125, 15, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(146, 15, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL))))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method392 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario!
	 */
		public Method392(Domain owner)
		{
			super(owner, new Predicate(300, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(284, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(284, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition276(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method392Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition277 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition277(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 16, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(69, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(80) /*hasKnowledgeLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(82, 16, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL))))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createCogApprenticeshipCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method393 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario!
	 */
		public Method393(Domain owner)
		{
			super(owner, new Predicate(300, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(284, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(284, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition277(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method393Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method394 extends Method
	{
	/**
	 * Method -1 for compound task createCogApprenticeshipCLScenario
	 */
		public Method394(Domain owner)
		{
			super(owner, new Predicate(299, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(360) /*createCogApprenticeshipCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogApprenticeshipCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method394Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method395 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario
	 */
		public Method395(Domain owner)
		{
			super(owner, new Predicate(302, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(301, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method395Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method396 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario!
	 */
		public Method396(Domain owner)
		{
			super(owner, new Predicate(301, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(303, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(7, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method396Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCogFlexibilityCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition278 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition278(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(5), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), owner.getTermVariable(10))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[13] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 14);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCogFlexibilityCLScenario [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method397 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario
	 */
		public Method397(Domain owner)
		{
			super(owner, new Predicate(302, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(7, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 16, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 16, new TermList(new TermList(owner.getTermConstant(325) /*CogFlexibility*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(303, 16, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(14), TermList.NIL))), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(15), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition278(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method397Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createCogFlexibilityCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method398 extends Method
	{
	/**
	 * Method -1 for compound task createCogFlexibilityCLScenario
	 */
		public Method398(Domain owner)
		{
			super(owner, new Predicate(303, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(304, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogFlexibilityCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method398Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createCogFlexibilityCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition279 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition279(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createCogFlexibilityCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createCogFlexibilityCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method399 extends Method
	{
	/**
	 * Method -1 for compound task createCogFlexibilityCLScenario!
	 */
		public Method399(Domain owner)
		{
			super(owner, new Predicate(304, 6, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(286, 6, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createCogFlexibilityCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition279(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method399Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method400 extends Method
	{
	/**
	 * Method -1 for compound task createLDCogFlexibilityCLScenario
	 */
		public Method400(Domain owner)
		{
			super(owner, new Predicate(302, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(361) /*createLDCogFlexibilityCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCogFlexibilityCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method400Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method401 extends Method
	{
	/**
	 * Method -1 for compound task createLDDistCognitionCLScenario
	 */
		public Method401(Domain owner)
		{
			super(owner, new Predicate(306, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(305, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDistCognitionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method401Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDistCognitionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method402 extends Method
	{
	/**
	 * Method -1 for compound task createLDDistCognitionCLScenario!
	 */
		public Method402(Domain owner)
		{
			super(owner, new Predicate(305, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(307, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(7, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDistCognitionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method402Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition280 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition280(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Conjunct #2 of Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition281 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition281(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition282 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition282(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition280(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition281(owner, unifier) /*Conjunct 3 of Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(5), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), owner.getTermVariable(10))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[13] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 14);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDDistCognitionCLScenario [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method403 extends Method
	{
	/**
	 * Method -1 for compound task createLDDistCognitionCLScenario
	 */
		public Method403(Domain owner)
		{
			super(owner, new Predicate(306, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(7, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 16, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 16, new TermList(new TermList(owner.getTermConstant(326) /*DistCognition*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(307, 16, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(14), TermList.NIL))), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(15), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDistCognitionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition282(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method403Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method404 extends Method
	{
	/**
	 * Method -1 for compound task createDistCognitionCLScenario
	 */
		public Method404(Domain owner)
		{
			super(owner, new Predicate(307, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(308, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDistCognitionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method404Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createDistCognitionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition283 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition283(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createDistCognitionCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Conjunct #3 of Precondition #0 of Method -1 for compound task createDistCognitionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition284 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition284(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition #0 of Method -1 for compound task createDistCognitionCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDistCognitionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition285 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition285(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition283(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createDistCognitionCLScenario!*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition284(owner, unifier) /*Conjunct 4 of Precondition #0 of Method -1 for compound task createDistCognitionCLScenario!*/;
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDistCognitionCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDistCognitionCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method405 extends Method
	{
	/**
	 * Method -1 for compound task createDistCognitionCLScenario!
	 */
		public Method405(Domain owner)
		{
			super(owner, new Predicate(308, 6, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(288, 6, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDistCognitionCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition285(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method405Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDistCognitionCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method406 extends Method
	{
	/**
	 * Method -1 for compound task createDistCognitionCLScenario
	 */
		public Method406(Domain owner)
		{
			super(owner, new Predicate(307, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(362) /*createDistCognitionCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDistCognitionCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method406Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method407 extends Method
	{
	/**
	 * Method -1 for compound task createLDLPPCLScenario
	 */
		public Method407(Domain owner)
		{
			super(owner, new Predicate(310, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(309, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLPPCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method407Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method408 extends Method
	{
	/**
	 * Method -1 for compound task createLDLPPCLScenario!
	 */
		public Method408(Domain owner)
		{
			super(owner, new Predicate(309, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(311, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(7, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLPPCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method408Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createLDLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition286 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition286(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createLDLPPCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Conjunct #2 of Precondition #0 of Method -1 for compound task createLDLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition287 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition287(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition #0 of Method -1 for compound task createLDLPPCLScenario [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition288 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition288(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition286(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createLDLPPCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition287(owner, unifier) /*Conjunct 3 of Precondition #0 of Method -1 for compound task createLDLPPCLScenario*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(5), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), owner.getTermVariable(10))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[13] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 14);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDLPPCLScenario [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method409 extends Method
	{
	/**
	 * Method -1 for compound task createLDLPPCLScenario
	 */
		public Method409(Domain owner)
		{
			super(owner, new Predicate(310, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(7, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 16, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 16, new TermList(new TermList(owner.getTermConstant(327) /*LPP*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(311, 16, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(14), TermList.NIL))), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(15), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDLPPCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition288(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method409Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method410 extends Method
	{
	/**
	 * Method -1 for compound task createLPPCLScenario
	 */
		public Method410(Domain owner)
		{
			super(owner, new Predicate(311, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(312, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method410Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition289 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition289(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createLPPCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition290 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition290(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition289(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createLPPCLScenario!*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 15, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 15, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 15, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(80) /*hasKnowledgeLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(82, 15, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(107, 15, new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(125, 15, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(146, 15, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL))))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLPPCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method411 extends Method
	{
	/**
	 * Method -1 for compound task createLPPCLScenario!
	 */
		public Method411(Domain owner)
		{
			super(owner, new Predicate(312, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(290, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(290, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition290(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method411Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #1 of Precondition #0 of Method -1 for compound task createLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition291 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition291(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition #0 of Method -1 for compound task createLPPCLScenario! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition292 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition292(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition291(owner, unifier) /*Conjunct 2 of Precondition #0 of Method -1 for compound task createLPPCLScenario!*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 15, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 15, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(59, 15, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 15, new TermList(owner.getTermVariable(8), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(128, 15, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(69, 15, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(80) /*hasKnowledgeLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(82, 15, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(107, 15, new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL)))), owner.getTermVariable(9))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(125, 15, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(146, 15, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(11), TermList.NIL))))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLPPCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLPPCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method412 extends Method
	{
	/**
	 * Method -1 for compound task createLPPCLScenario!
	 */
		public Method412(Domain owner)
		{
			super(owner, new Predicate(312, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(290, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(290, 15, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition292(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method412Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLPPCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method413 extends Method
	{
	/**
	 * Method -1 for compound task createLPPCLScenario
	 */
		public Method413(Domain owner)
		{
			super(owner, new Predicate(311, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(363) /*createLPPCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLPPCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method413Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutoringCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method414 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutoringCLScenario
	 */
		public Method414(Domain owner)
		{
			super(owner, new Predicate(314, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(313, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutoringCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method414Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutoringCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method415 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutoringCLScenario!
	 */
		public Method415(Domain owner)
		{
			super(owner, new Predicate(313, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(315, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(7, 3, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutoringCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method415Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPeerTutoringCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition293 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition293(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 16, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(77, 16, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 16, new TermList(owner.getTermVariable(5), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(128, 16, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(107, 16, new TermList(owner.getTermVariable(11), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), owner.getTermVariable(10))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(125, 16, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(146, 16, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[13] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 14);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPeerTutoringCLScenario [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPeerTutoringCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method416 extends Method
	{
	/**
	 * Method -1 for compound task createLDPeerTutoringCLScenario
	 */
		public Method416(Domain owner)
		{
			super(owner, new Predicate(314, 16, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(7, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(14), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 16, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 16, new TermList(new TermList(owner.getTermConstant(328) /*PeerTutoring*/, new TermList(owner.getTermConstant(347) /*CLScenario*/, TermList.NIL)), new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(315, 16, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 16, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(14), TermList.NIL))), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(7, 16, new TermList(owner.getTermVariable(15), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPeerTutoringCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition293(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method416Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeerTutoringCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method417 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTutoringCLScenario
	 */
		public Method417(Domain owner)
		{
			super(owner, new Predicate(315, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(316, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTutoringCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method417Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPeerTutoringCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition294 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition294(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(93, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(77, 6, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPeerTutoringCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPeerTutoringCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method418 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTutoringCLScenario!
	 */
		public Method418(Domain owner)
		{
			super(owner, new Predicate(316, 6, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(292, 6, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTutoringCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition294(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method418Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPeerTutoringCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method419 extends Method
	{
	/**
	 * Method -1 for compound task createPeerTutoringCLScenario
	 */
		public Method419(Domain owner)
		{
			super(owner, new Predicate(315, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(364) /*createPeerTutoringCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPeerTutoringCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method419Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDResumeDiscussionOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method420 extends Method
	{
	/**
	 * Method -1 for compound task createLDResumeDiscussionOutput
	 */
		public Method420(Domain owner)
		{
			super(owner, new Predicate(318, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(365) /*learning-objectives*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(317, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(365) /*learning-objectives*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDResumeDiscussionOutput [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method420Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createResumeDiscussionOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition295 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition295(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(367) /*ResumeDiscussion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(126) /*hasTitle*/, new TermList(new TermCall(new List(owner.getTermConstant(368) /*Resume*/, new TermList(owner.getTermConstant(369) /*of*/, new TermList(owner.getTermVariable(4), TermList.NIL))), ((domain)owner).calculateConcatText, "((domain)owner).calculateConcatText"), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL)))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(6), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 7);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createResumeDiscussionOutput [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createResumeDiscussionOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method421 extends Method
	{
	/**
	 * Method -1 for compound task createResumeDiscussionOutput
	 */
		public Method421(Domain owner)
		{
			super(owner, new Predicate(317, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 8, new TermList(owner.getTermVariable(7), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createResumeDiscussionOutput [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition295(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method421Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method422 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationOutput
	 */
		public Method422(Domain owner)
		{
			super(owner, new Predicate(320, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(365) /*learning-objectives*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(319, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(365) /*learning-objectives*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationOutput [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method422Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSimulationOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition296 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition296(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(370) /*Simulation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(126) /*hasTitle*/, new TermList(new TermCall(new List(owner.getTermConstant(371) /*Result*/, new TermList(owner.getTermConstant(369) /*of*/, new TermList(owner.getTermConstant(372) /*simulation*/, new TermList(owner.getTermConstant(373) /*in*/, new TermList(owner.getTermVariable(4), TermList.NIL))))), ((domain)owner).calculateConcatText, "((domain)owner).calculateConcatText"), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL)))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(6), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 7);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSimulationOutput [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSimulationOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method423 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationOutput
	 */
		public Method423(Domain owner)
		{
			super(owner, new Predicate(319, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 8, new TermList(owner.getTermVariable(7), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationOutput [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition296(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method423Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSolutionOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method424 extends Method
	{
	/**
	 * Method -1 for compound task createLDSolutionOutput
	 */
		public Method424(Domain owner)
		{
			super(owner, new Predicate(322, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(365) /*learning-objectives*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(321, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(365) /*learning-objectives*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSolutionOutput [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method424Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSolutionOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition297 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition297(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(374) /*Solution*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(126) /*hasTitle*/, new TermList(new TermCall(new List(owner.getTermConstant(374) /*Solution*/, new TermList(owner.getTermConstant(375) /*for*/, new TermList(owner.getTermVariable(4), TermList.NIL))), ((domain)owner).calculateConcatText, "((domain)owner).calculateConcatText"), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL)))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(183) /*hasGoal*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(6), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 7);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSolutionOutput [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSolutionOutput
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method425 extends Method
	{
	/**
	 * Method -1 for compound task createSolutionOutput
	 */
		public Method425(Domain owner)
		{
			super(owner, new Predicate(321, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 8, new TermList(owner.getTermVariable(7), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSolutionOutput [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition297(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method425Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method426 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionSession
	 */
		public Method426(Domain owner)
		{
			super(owner, new Predicate(324, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(323, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method426Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDDiscussionSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition298 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition298(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(377) /*DiscussionSession*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDDiscussionSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method427 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionSession!
	 */
		public Method427(Domain owner)
		{
			super(owner, new Predicate(323, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(8, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(377) /*DiscussionSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(377) /*DiscussionSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(325, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition298(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method427Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method428 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionSession
	 */
		public Method428(Domain owner)
		{
			super(owner, new Predicate(324, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(325, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method428Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method429 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSession
	 */
		public Method429(Domain owner)
		{
			super(owner, new Predicate(325, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(326, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method429Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscussionSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition299 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition299(Domain owner, Term[] unifier)
		{
			p = new Precondition[12];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(385) /*Discussion*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 11, new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(385) /*Discussion*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(8, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(1, 11, new TermList(owner.getTermVariable(6), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[8] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(367) /*ResumeDiscussion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(7), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(46, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(197) /*hasBeenSeen*/, new TermList(owner.getTermVariable(7), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(8, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			b = new Term[12][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[11] == null)
			{
				boolean b10changed = false;
				while (b[10] == null)
				{
					boolean b9changed = false;
					while (b[9] == null)
					{
						boolean b8changed = false;
						while (b[8] == null)
						{
							boolean b7changed = false;
							while (b[7] == null)
							{
								boolean b6changed = false;
								while (b[6] == null)
								{
									boolean b5changed = false;
									while (b[5] == null)
									{
										boolean b4changed = false;
										while (b[4] == null)
										{
											boolean b3changed = false;
											while (b[3] == null)
											{
												boolean b2changed = false;
												while (b[2] == null)
												{
													boolean b1changed = false;
													while (b[1] == null)
													{
														b[1] = p[1].nextBinding(state);
														if (b[1] == null)
															return null;
														else
															bestMatch = Math.max(bestMatch, 1);
														b1changed = true;
													}
													if ( b1changed ) {
														p[2].reset(state);
														p[2].bind(Term.merge(b, 2));
													}
													b[2] = p[2].nextBinding(state);
													if (b[2] == null)
														b[1] = null;
													else
														bestMatch = Math.max(bestMatch, 2);
													b2changed = true;
												}
												if ( b2changed ) {
													p[3].reset(state);
													p[3].bind(Term.merge(b, 3));
												}
												b[3] = p[3].nextBinding(state);
												if (b[3] == null)
													b[2] = null;
												else
													bestMatch = Math.max(bestMatch, 3);
												b3changed = true;
											}
											if ( b3changed ) {
												p[4].reset(state);
												p[4].bind(Term.merge(b, 4));
											}
											b[4] = p[4].nextBinding(state);
											if (b[4] == null)
												b[3] = null;
											else
												bestMatch = Math.max(bestMatch, 4);
											b4changed = true;
										}
										if ( b4changed ) {
											p[5].reset(state);
											p[5].bind(Term.merge(b, 5));
										}
										b[5] = p[5].nextBinding(state);
										if (b[5] == null)
											b[4] = null;
										else
											bestMatch = Math.max(bestMatch, 5);
										b5changed = true;
									}
									if ( b5changed ) {
										p[6].reset(state);
										p[6].bind(Term.merge(b, 6));
									}
									b[6] = p[6].nextBinding(state);
									if (b[6] == null)
										b[5] = null;
									else
										bestMatch = Math.max(bestMatch, 6);
									b6changed = true;
								}
								if ( b6changed ) {
									p[7].reset(state);
									p[7].bind(Term.merge(b, 7));
								}
								b[7] = p[7].nextBinding(state);
								if (b[7] == null)
									b[6] = null;
								else
									bestMatch = Math.max(bestMatch, 7);
								b7changed = true;
							}
							if ( b7changed ) {
								p[8].reset(state);
								p[8].bind(Term.merge(b, 8));
							}
							b[8] = p[8].nextBinding(state);
							if (b[8] == null)
								b[7] = null;
							else
								bestMatch = Math.max(bestMatch, 8);
							b8changed = true;
						}
						if ( b8changed ) {
							p[9].reset(state);
							p[9].bind(Term.merge(b, 9));
						}
						b[9] = p[9].nextBinding(state);
						if (b[9] == null)
							b[8] = null;
						else
							bestMatch = Math.max(bestMatch, 9);
						b9changed = true;
					}
					if ( b9changed ) {
						p[10].reset(state);
						p[10].bind(Term.merge(b, 10));
					}
					b[10] = p[10].nextBinding(state);
					if (b[10] == null)
						b[9] = null;
					else
						bestMatch = Math.max(bestMatch, 10);
					b10changed = true;
				}
				if ( b10changed ) {
					p[11].reset(state);
					p[11].bind(Term.merge(b, 11));
				}
				b[11] = p[11].nextBinding(state);
				if (b[11] == null)
					b[10] = null;
				else
					bestMatch = Math.max(bestMatch, 11);
			}

			Term[] retVal = Term.merge(b, 12);
			b[11] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscussionSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method430 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSession!
	 */
		public Method430(Domain owner)
		{
			super(owner, new Predicate(326, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(318, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(327, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(7), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(328, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition299(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method430Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscussionSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition300 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition300(Domain owner, Term[] unifier)
		{
			p = new Precondition[12];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 12, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(388) /*Jigsaw*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(1, 12, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(389) /*Expert*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(367) /*ResumeDiscussion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(367) /*ResumeDiscussion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(46, 12, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(197) /*hasBeenSeen*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(8, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[11] = new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 11);
			b = new Term[12][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[11] == null)
			{
				boolean b10changed = false;
				while (b[10] == null)
				{
					boolean b9changed = false;
					while (b[9] == null)
					{
						boolean b8changed = false;
						while (b[8] == null)
						{
							boolean b7changed = false;
							while (b[7] == null)
							{
								boolean b6changed = false;
								while (b[6] == null)
								{
									boolean b5changed = false;
									while (b[5] == null)
									{
										boolean b4changed = false;
										while (b[4] == null)
										{
											boolean b3changed = false;
											while (b[3] == null)
											{
												boolean b2changed = false;
												while (b[2] == null)
												{
													boolean b1changed = false;
													while (b[1] == null)
													{
														b[1] = p[1].nextBinding(state);
														if (b[1] == null)
															return null;
														else
															bestMatch = Math.max(bestMatch, 1);
														b1changed = true;
													}
													if ( b1changed ) {
														p[2].reset(state);
														p[2].bind(Term.merge(b, 2));
													}
													b[2] = p[2].nextBinding(state);
													if (b[2] == null)
														b[1] = null;
													else
														bestMatch = Math.max(bestMatch, 2);
													b2changed = true;
												}
												if ( b2changed ) {
													p[3].reset(state);
													p[3].bind(Term.merge(b, 3));
												}
												b[3] = p[3].nextBinding(state);
												if (b[3] == null)
													b[2] = null;
												else
													bestMatch = Math.max(bestMatch, 3);
												b3changed = true;
											}
											if ( b3changed ) {
												p[4].reset(state);
												p[4].bind(Term.merge(b, 4));
											}
											b[4] = p[4].nextBinding(state);
											if (b[4] == null)
												b[3] = null;
											else
												bestMatch = Math.max(bestMatch, 4);
											b4changed = true;
										}
										if ( b4changed ) {
											p[5].reset(state);
											p[5].bind(Term.merge(b, 5));
										}
										b[5] = p[5].nextBinding(state);
										if (b[5] == null)
											b[4] = null;
										else
											bestMatch = Math.max(bestMatch, 5);
										b5changed = true;
									}
									if ( b5changed ) {
										p[6].reset(state);
										p[6].bind(Term.merge(b, 6));
									}
									b[6] = p[6].nextBinding(state);
									if (b[6] == null)
										b[5] = null;
									else
										bestMatch = Math.max(bestMatch, 6);
									b6changed = true;
								}
								if ( b6changed ) {
									p[7].reset(state);
									p[7].bind(Term.merge(b, 7));
								}
								b[7] = p[7].nextBinding(state);
								if (b[7] == null)
									b[6] = null;
								else
									bestMatch = Math.max(bestMatch, 7);
								b7changed = true;
							}
							if ( b7changed ) {
								p[8].reset(state);
								p[8].bind(Term.merge(b, 8));
							}
							b[8] = p[8].nextBinding(state);
							if (b[8] == null)
								b[7] = null;
							else
								bestMatch = Math.max(bestMatch, 8);
							b8changed = true;
						}
						if ( b8changed ) {
							p[9].reset(state);
							p[9].bind(Term.merge(b, 9));
						}
						b[9] = p[9].nextBinding(state);
						if (b[9] == null)
							b[8] = null;
						else
							bestMatch = Math.max(bestMatch, 9);
						b9changed = true;
					}
					if ( b9changed ) {
						p[10].reset(state);
						p[10].bind(Term.merge(b, 10));
					}
					b[10] = p[10].nextBinding(state);
					if (b[10] == null)
						b[9] = null;
					else
						bestMatch = Math.max(bestMatch, 10);
					b10changed = true;
				}
				if ( b10changed ) {
					p[11].reset(state);
					p[11].bind(Term.merge(b, 11));
				}
				b[11] = p[11].nextBinding(state);
				if (b[11] == null)
					b[10] = null;
				else
					bestMatch = Math.max(bestMatch, 11);
			}

			Term[] retVal = Term.merge(b, 12);
			b[11] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscussionSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method431 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSession!
	 */
		public Method431(Domain owner)
		{
			super(owner, new Predicate(326, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(318, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(327, 12, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(328, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition300(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method431Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method432 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSession
	 */
		public Method432(Domain owner)
		{
			super(owner, new Predicate(325, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(318, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(328, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method432Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method433 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionActivity
	 */
		public Method433(Domain owner)
		{
			super(owner, new Predicate(328, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(329, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method433Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscussionActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition301 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition301(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscussionActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscussionActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method434 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionActivity!
	 */
		public Method434(Domain owner)
		{
			super(owner, new Predicate(329, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition301(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method434Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscussionActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition302 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition302(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscussionActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscussionActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method435 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionActivity
	 */
		public Method435(Domain owner)
		{
			super(owner, new Predicate(328, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(331, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(332, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition302(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method435Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method436 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionEnvironment
	 */
		public Method436(Domain owner)
		{
			super(owner, new Predicate(331, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method436Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method437 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionSessionDescription
	 */
		public Method437(Domain owner)
		{
			super(owner, new Predicate(332, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(333, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method437Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method438 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSessionDescription
	 */
		public Method438(Domain owner)
		{
			super(owner, new Predicate(333, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(334, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method438Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method439 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSessionDescription!
	 */
		public Method439(Domain owner)
		{
			super(owner, new Predicate(334, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(390) /*DiscussionActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method439Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method440 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSessionDescription
	 */
		public Method440(Domain owner)
		{
			super(owner, new Predicate(333, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(390) /*DiscussionActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method440Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method441 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertSession
	 */
		public Method441(Domain owner)
		{
			super(owner, new Predicate(336, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(335, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method441Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDExpertSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition303 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition303(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(392) /*ExpertSession*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDExpertSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDExpertSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method442 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertSession!
	 */
		public Method442(Domain owner)
		{
			super(owner, new Predicate(335, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(8, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(392) /*ExpertSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(392) /*ExpertSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(337, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition303(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method442Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method443 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertSession
	 */
		public Method443(Domain owner)
		{
			super(owner, new Predicate(336, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(337, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method443Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method444 extends Method
	{
	/**
	 * Method -1 for compound task createExpertSession
	 */
		public Method444(Domain owner)
		{
			super(owner, new Predicate(337, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(318, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(338, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method444Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method445 extends Method
	{
	/**
	 * Method -1 for compound task createExpertActivity
	 */
		public Method445(Domain owner)
		{
			super(owner, new Predicate(338, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(339, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method445Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createExpertActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition304 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition304(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createExpertActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createExpertActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method446 extends Method
	{
	/**
	 * Method -1 for compound task createExpertActivity!
	 */
		public Method446(Domain owner)
		{
			super(owner, new Predicate(339, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition304(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method446Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createExpertActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition305 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition305(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createExpertActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createExpertActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method447 extends Method
	{
	/**
	 * Method -1 for compound task createExpertActivity
	 */
		public Method447(Domain owner)
		{
			super(owner, new Predicate(338, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(340, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(341, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition305(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method447Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method448 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertEnvironment
	 */
		public Method448(Domain owner)
		{
			super(owner, new Predicate(340, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method448Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method449 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertSessionDescription
	 */
		public Method449(Domain owner)
		{
			super(owner, new Predicate(341, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(342, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method449Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method450 extends Method
	{
	/**
	 * Method -1 for compound task createExpertSessionDescription
	 */
		public Method450(Domain owner)
		{
			super(owner, new Predicate(342, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(343, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method450Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method451 extends Method
	{
	/**
	 * Method -1 for compound task createExpertSessionDescription!
	 */
		public Method451(Domain owner)
		{
			super(owner, new Predicate(343, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(393) /*ExpertActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method451Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method452 extends Method
	{
	/**
	 * Method -1 for compound task createExpertSessionDescription
	 */
		public Method452(Domain owner)
		{
			super(owner, new Predicate(342, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(393) /*ExpertActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method452Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIndividualSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method453 extends Method
	{
	/**
	 * Method -1 for compound task createLDIndividualSession
	 */
		public Method453(Domain owner)
		{
			super(owner, new Predicate(345, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(344, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIndividualSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method453Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method454 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualSession
	 */
		public Method454(Domain owner)
		{
			super(owner, new Predicate(344, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(346, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method454Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method455 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualActivity
	 */
		public Method455(Domain owner)
		{
			super(owner, new Predicate(346, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(347, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(348, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method455Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIndividualEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method456 extends Method
	{
	/**
	 * Method -1 for compound task createLDIndividualEnvironment
	 */
		public Method456(Domain owner)
		{
			super(owner, new Predicate(347, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(349, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIndividualEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method456Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method457 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualEnvironment
	 */
		public Method457(Domain owner)
		{
			super(owner, new Predicate(349, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(22, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method457Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIndividualSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method458 extends Method
	{
	/**
	 * Method -1 for compound task createLDIndividualSessionDescription
	 */
		public Method458(Domain owner)
		{
			super(owner, new Predicate(348, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(350, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIndividualSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method458Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method459 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualSessionDescription
	 */
		public Method459(Domain owner)
		{
			super(owner, new Predicate(350, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(351, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method459Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method460 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualSessionDescription!
	 */
		public Method460(Domain owner)
		{
			super(owner, new Predicate(351, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(395) /*IndividualActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method460Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method461 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualSessionDescription
	 */
		public Method461(Domain owner)
		{
			super(owner, new Predicate(350, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(395) /*IndividualActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method461Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method462 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawSession
	 */
		public Method462(Domain owner)
		{
			super(owner, new Predicate(353, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(352, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method462Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDJigsawSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition306 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition306(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(396) /*JigsawSession*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDJigsawSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method463 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawSession!
	 */
		public Method463(Domain owner)
		{
			super(owner, new Predicate(352, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(8, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(396) /*JigsawSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(396) /*JigsawSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(354, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition306(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method463Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method464 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawSession
	 */
		public Method464(Domain owner)
		{
			super(owner, new Predicate(353, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(354, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method464Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method465 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSession
	 */
		public Method465(Domain owner)
		{
			super(owner, new Predicate(354, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(355, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method465Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createJigsawSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition307 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition307(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(388) /*Jigsaw*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(367) /*ResumeDiscussion*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createJigsawSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createJigsawSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method466 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSession!
	 */
		public Method466(Domain owner)
		{
			super(owner, new Predicate(355, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(356, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition307(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method466Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method467 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSession
	 */
		public Method467(Domain owner)
		{
			super(owner, new Predicate(354, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(356, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method467Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method468 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawActivity
	 */
		public Method468(Domain owner)
		{
			super(owner, new Predicate(356, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(357, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method468Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createJigsawActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition308 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition308(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createJigsawActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createJigsawActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method469 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawActivity!
	 */
		public Method469(Domain owner)
		{
			super(owner, new Predicate(357, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition308(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method469Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createJigsawActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition309 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition309(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createJigsawActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createJigsawActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method470 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawActivity
	 */
		public Method470(Domain owner)
		{
			super(owner, new Predicate(356, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(358, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(359, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition309(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method470Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method471 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawEnvironment
	 */
		public Method471(Domain owner)
		{
			super(owner, new Predicate(358, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method471Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method472 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawSessionDescription
	 */
		public Method472(Domain owner)
		{
			super(owner, new Predicate(359, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(360, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method472Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method473 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSessionDescription
	 */
		public Method473(Domain owner)
		{
			super(owner, new Predicate(360, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(361, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method473Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method474 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSessionDescription!
	 */
		public Method474(Domain owner)
		{
			super(owner, new Predicate(361, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(398) /*JigsawActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method474Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method475 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSessionDescription
	 */
		public Method475(Domain owner)
		{
			super(owner, new Predicate(360, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(398) /*JigsawActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method475Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method476 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairSession
	 */
		public Method476(Domain owner)
		{
			super(owner, new Predicate(363, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(362, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method476Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPairSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition310 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition310(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(399) /*PairSession*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPairSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPairSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method477 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairSession!
	 */
		public Method477(Domain owner)
		{
			super(owner, new Predicate(362, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(8, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(399) /*PairSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(399) /*PairSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(364, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition310(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method477Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method478 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairSession
	 */
		public Method478(Domain owner)
		{
			super(owner, new Predicate(363, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(364, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method478Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method479 extends Method
	{
	/**
	 * Method -1 for compound task createPairSession
	 */
		public Method479(Domain owner)
		{
			super(owner, new Predicate(364, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(322, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(365, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method479Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method480 extends Method
	{
	/**
	 * Method -1 for compound task createPairActivity
	 */
		public Method480(Domain owner)
		{
			super(owner, new Predicate(365, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(366, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method480Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPairActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition311 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition311(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPairActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPairActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method481 extends Method
	{
	/**
	 * Method -1 for compound task createPairActivity!
	 */
		public Method481(Domain owner)
		{
			super(owner, new Predicate(366, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition311(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method481Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPairActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition312 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition312(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPairActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPairActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method482 extends Method
	{
	/**
	 * Method -1 for compound task createPairActivity
	 */
		public Method482(Domain owner)
		{
			super(owner, new Predicate(365, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(367, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(368, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition312(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method482Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method483 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairEnvironment
	 */
		public Method483(Domain owner)
		{
			super(owner, new Predicate(367, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method483Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method484 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairSessionDescription
	 */
		public Method484(Domain owner)
		{
			super(owner, new Predicate(368, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(369, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method484Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method485 extends Method
	{
	/**
	 * Method -1 for compound task createPairSessionDescription
	 */
		public Method485(Domain owner)
		{
			super(owner, new Predicate(369, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(370, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method485Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method486 extends Method
	{
	/**
	 * Method -1 for compound task createPairSessionDescription!
	 */
		public Method486(Domain owner)
		{
			super(owner, new Predicate(370, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(401) /*PairActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method486Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method487 extends Method
	{
	/**
	 * Method -1 for compound task createPairSessionDescription
	 */
		public Method487(Domain owner)
		{
			super(owner, new Predicate(369, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(401) /*PairActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method487Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRoleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method488 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleSession
	 */
		public Method488(Domain owner)
		{
			super(owner, new Predicate(372, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(371, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method488Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDRoleSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition313 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition313(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(402) /*RoleSession*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDRoleSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDRoleSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method489 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleSession!
	 */
		public Method489(Domain owner)
		{
			super(owner, new Predicate(371, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(8, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(402) /*RoleSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(402) /*RoleSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(373, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition313(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method489Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRoleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method490 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleSession
	 */
		public Method490(Domain owner)
		{
			super(owner, new Predicate(372, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(373, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method490Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method491 extends Method
	{
	/**
	 * Method -1 for compound task createRoleSession
	 */
		public Method491(Domain owner)
		{
			super(owner, new Predicate(373, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(374, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method491Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method492 extends Method
	{
	/**
	 * Method -1 for compound task createRoleActivity
	 */
		public Method492(Domain owner)
		{
			super(owner, new Predicate(374, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(375, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method492Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createRoleActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition314 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition314(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createRoleActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createRoleActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method493 extends Method
	{
	/**
	 * Method -1 for compound task createRoleActivity!
	 */
		public Method493(Domain owner)
		{
			super(owner, new Predicate(375, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition314(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method493Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createRoleActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition315 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition315(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createRoleActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createRoleActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method494 extends Method
	{
	/**
	 * Method -1 for compound task createRoleActivity
	 */
		public Method494(Domain owner)
		{
			super(owner, new Predicate(374, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(376, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(377, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition315(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method494Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRoleEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method495 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleEnvironment
	 */
		public Method495(Domain owner)
		{
			super(owner, new Predicate(376, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method495Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRoleSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method496 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleSessionDescription
	 */
		public Method496(Domain owner)
		{
			super(owner, new Predicate(377, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(378, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method496Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method497 extends Method
	{
	/**
	 * Method -1 for compound task createRoleSessionDescription
	 */
		public Method497(Domain owner)
		{
			super(owner, new Predicate(378, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(379, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method497Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method498 extends Method
	{
	/**
	 * Method -1 for compound task createRoleSessionDescription!
	 */
		public Method498(Domain owner)
		{
			super(owner, new Predicate(379, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(403) /*RoleActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method498Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method499 extends Method
	{
	/**
	 * Method -1 for compound task createRoleSessionDescription
	 */
		public Method499(Domain owner)
		{
			super(owner, new Predicate(378, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(403) /*RoleActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method499Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShareSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method500 extends Method
	{
	/**
	 * Method -1 for compound task createLDShareSession
	 */
		public Method500(Domain owner)
		{
			super(owner, new Predicate(381, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(380, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShareSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method500Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method501 extends Method
	{
	/**
	 * Method -1 for compound task createShareSession
	 */
		public Method501(Domain owner)
		{
			super(owner, new Predicate(380, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(382, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method501Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShareSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition316 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition316(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(370) /*Simulation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 6, new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(370) /*Simulation*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShareSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShareSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method502 extends Method
	{
	/**
	 * Method -1 for compound task createShareSession!
	 */
		public Method502(Domain owner)
		{
			super(owner, new Predicate(382, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(383, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition316(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method502Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShareSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition317 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition317(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(404) /*Share*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(1, 8, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(400) /*Pair*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(366) /*Output*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(374) /*Solution*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(185) /*hasParticipant*/, new TermList(owner.getTermVariable(3), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShareSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShareSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method503 extends Method
	{
	/**
	 * Method -1 for compound task createShareSession!
	 */
		public Method503(Domain owner)
		{
			super(owner, new Predicate(382, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(383, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition317(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method503Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method504 extends Method
	{
	/**
	 * Method -1 for compound task createShareSession
	 */
		public Method504(Domain owner)
		{
			super(owner, new Predicate(380, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(383, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method504Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method505 extends Method
	{
	/**
	 * Method -1 for compound task createShareActivity
	 */
		public Method505(Domain owner)
		{
			super(owner, new Predicate(383, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(384, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(385, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method505Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShareEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method506 extends Method
	{
	/**
	 * Method -1 for compound task createLDShareEnvironment
	 */
		public Method506(Domain owner)
		{
			super(owner, new Predicate(384, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShareEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method506Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShareSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method507 extends Method
	{
	/**
	 * Method -1 for compound task createLDShareSessionDescription
	 */
		public Method507(Domain owner)
		{
			super(owner, new Predicate(385, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(386, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShareSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method507Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method508 extends Method
	{
	/**
	 * Method -1 for compound task createShareSessionDescription
	 */
		public Method508(Domain owner)
		{
			super(owner, new Predicate(386, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(387, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method508Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method509 extends Method
	{
	/**
	 * Method -1 for compound task createShareSessionDescription!
	 */
		public Method509(Domain owner)
		{
			super(owner, new Predicate(387, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(405) /*ShareActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method509Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method510 extends Method
	{
	/**
	 * Method -1 for compound task createShareSessionDescription
	 */
		public Method510(Domain owner)
		{
			super(owner, new Predicate(386, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(405) /*ShareActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method510Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method511 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationSession
	 */
		public Method511(Domain owner)
		{
			super(owner, new Predicate(389, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(388, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method511Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDSimulationSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition318 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition318(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(406) /*SimulationSession*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDSimulationSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method512 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationSession!
	 */
		public Method512(Domain owner)
		{
			super(owner, new Predicate(388, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(8, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(406) /*SimulationSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(406) /*SimulationSession*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(390, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition318(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method512Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method513 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationSession
	 */
		public Method513(Domain owner)
		{
			super(owner, new Predicate(389, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(390, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method513Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method514 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationSession
	 */
		public Method514(Domain owner)
		{
			super(owner, new Predicate(390, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(320, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(391, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method514Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method515 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationActivity
	 */
		public Method515(Domain owner)
		{
			super(owner, new Predicate(391, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(392, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method515Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSimulationActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition319 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition319(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSimulationActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSimulationActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method516 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationActivity!
	 */
		public Method516(Domain owner)
		{
			super(owner, new Predicate(392, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition319(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method516Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSimulationActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition320 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition320(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSimulationActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSimulationActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method517 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationActivity
	 */
		public Method517(Domain owner)
		{
			super(owner, new Predicate(391, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(393, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(394, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition320(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method517Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method518 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationEnvironment
	 */
		public Method518(Domain owner)
		{
			super(owner, new Predicate(393, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method518Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method519 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationSessionDescription
	 */
		public Method519(Domain owner)
		{
			super(owner, new Predicate(394, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(395, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method519Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method520 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationSessionDescription
	 */
		public Method520(Domain owner)
		{
			super(owner, new Predicate(395, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(396, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method520Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method521 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationSessionDescription!
	 */
		public Method521(Domain owner)
		{
			super(owner, new Predicate(396, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(407) /*SimulationActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method521Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method522 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationSessionDescription
	 */
		public Method522(Domain owner)
		{
			super(owner, new Predicate(395, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(407) /*SimulationActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method522Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method523 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionGroupActivity
	 */
		public Method523(Domain owner)
		{
			super(owner, new Predicate(398, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(397, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method523Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method524 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionGroupActivity
	 */
		public Method524(Domain owner)
		{
			super(owner, new Predicate(397, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(399, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method524Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method525 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionSessions
	 */
		public Method525(Domain owner)
		{
			super(owner, new Predicate(399, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(400, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method525Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method526 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionSessions
	 */
		public Method526(Domain owner)
		{
			super(owner, new Predicate(400, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(324, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method526Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method527 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertGroupActivity
	 */
		public Method527(Domain owner)
		{
			super(owner, new Predicate(402, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(401, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method527Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method528 extends Method
	{
	/**
	 * Method -1 for compound task createExpertGroupActivity
	 */
		public Method528(Domain owner)
		{
			super(owner, new Predicate(401, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(403, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method528Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method529 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertSessions
	 */
		public Method529(Domain owner)
		{
			super(owner, new Predicate(403, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(404, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method529Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createExpertSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method530 extends Method
	{
	/**
	 * Method -1 for compound task createExpertSessions
	 */
		public Method530(Domain owner)
		{
			super(owner, new Predicate(404, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(336, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method530Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIndividualGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method531 extends Method
	{
	/**
	 * Method -1 for compound task createLDIndividualGroupActivity
	 */
		public Method531(Domain owner)
		{
			super(owner, new Predicate(406, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(405, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIndividualGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method531Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method532 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualGroupActivity
	 */
		public Method532(Domain owner)
		{
			super(owner, new Predicate(405, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(407, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method532Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIndividualSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method533 extends Method
	{
	/**
	 * Method -1 for compound task createLDIndividualSessions
	 */
		public Method533(Domain owner)
		{
			super(owner, new Predicate(407, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(408, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIndividualSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method533Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIndividualSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method534 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualSessions
	 */
		public Method534(Domain owner)
		{
			super(owner, new Predicate(408, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(345, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method534Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method535 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawGroupActivity
	 */
		public Method535(Domain owner)
		{
			super(owner, new Predicate(410, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(409, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method535Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method536 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawGroupActivity
	 */
		public Method536(Domain owner)
		{
			super(owner, new Predicate(409, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(411, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method536Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method537 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawSessions
	 */
		public Method537(Domain owner)
		{
			super(owner, new Predicate(411, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(412, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method537Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createJigsawSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition321 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition321(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 10, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(75, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(13) /*isPartOf*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(142, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(69, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(71, 10, new TermList(owner.getTermVariable(7), new TermList(new TermList(owner.getTermVariable(6), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(152, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(8), TermList.NIL)))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createJigsawSessions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createJigsawSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method538 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawSessions
	 */
		public Method538(Domain owner)
		{
			super(owner, new Predicate(412, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 10, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(413, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(12, 10, new TermList(owner.getTermVariable(4), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(353, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition321(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method538Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeDiscussionSessionJigsaw
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method539 extends Method
	{
	/**
	 * Method -1 for compound task distributeDiscussionSessionJigsaw
	 */
		public Method539(Domain owner)
		{
			super(owner, new Predicate(413, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDiscussionSessionJigsaw [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method539Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeDiscussionSessionJigsaw
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method540 extends Method
	{
	/**
	 * Method -1 for compound task distributeDiscussionSessionJigsaw
	 */
		public Method540(Domain owner)
		{
			super(owner, new Predicate(413, 3, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(owner.getTermVariable(2), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(324, 3, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(413, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDiscussionSessionJigsaw [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method540Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method541 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairGroupActivity
	 */
		public Method541(Domain owner)
		{
			super(owner, new Predicate(415, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(414, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method541Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method542 extends Method
	{
	/**
	 * Method -1 for compound task createPairGroupActivity
	 */
		public Method542(Domain owner)
		{
			super(owner, new Predicate(414, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(416, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method542Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method543 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairSessions
	 */
		public Method543(Domain owner)
		{
			super(owner, new Predicate(416, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(417, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method543Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPairSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method544 extends Method
	{
	/**
	 * Method -1 for compound task createPairSessions
	 */
		public Method544(Domain owner)
		{
			super(owner, new Predicate(417, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(363, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method544Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRoleGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method545 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleGroupActivity
	 */
		public Method545(Domain owner)
		{
			super(owner, new Predicate(419, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(418, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method545Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method546 extends Method
	{
	/**
	 * Method -1 for compound task createRoleGroupActivity
	 */
		public Method546(Domain owner)
		{
			super(owner, new Predicate(418, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(420, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method546Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRoleSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method547 extends Method
	{
	/**
	 * Method -1 for compound task createLDRoleSessions
	 */
		public Method547(Domain owner)
		{
			super(owner, new Predicate(420, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(421, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRoleSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method547Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createRoleSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method548 extends Method
	{
	/**
	 * Method -1 for compound task createRoleSessions
	 */
		public Method548(Domain owner)
		{
			super(owner, new Predicate(421, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(372, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRoleSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method548Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShareGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method549 extends Method
	{
	/**
	 * Method -1 for compound task createLDShareGroupActivity
	 */
		public Method549(Domain owner)
		{
			super(owner, new Predicate(423, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(422, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShareGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method549Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method550 extends Method
	{
	/**
	 * Method -1 for compound task createShareGroupActivity
	 */
		public Method550(Domain owner)
		{
			super(owner, new Predicate(422, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(424, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method550Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShareSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method551 extends Method
	{
	/**
	 * Method -1 for compound task createLDShareSessions
	 */
		public Method551(Domain owner)
		{
			super(owner, new Predicate(424, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(425, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShareSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method551Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShareSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method552 extends Method
	{
	/**
	 * Method -1 for compound task createShareSessions
	 */
		public Method552(Domain owner)
		{
			super(owner, new Predicate(425, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(324, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(381, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShareSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method552Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method553 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationGroupActivity
	 */
		public Method553(Domain owner)
		{
			super(owner, new Predicate(427, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(426, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method553Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method554 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationGroupActivity
	 */
		public Method554(Domain owner)
		{
			super(owner, new Predicate(426, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(428, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method554Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method555 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationSessions
	 */
		public Method555(Domain owner)
		{
			super(owner, new Predicate(428, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(429, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method555Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method556 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationSessions
	 */
		public Method556(Domain owner)
		{
			super(owner, new Predicate(429, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(389, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(381, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method556Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscussionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method557 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscussionPhase
	 */
		public Method557(Domain owner)
		{
			super(owner, new Predicate(431, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(385) /*Discussion*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(430, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscussionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method557Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method558 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionPhase
	 */
		public Method558(Domain owner)
		{
			super(owner, new Predicate(430, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(432, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method558Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscussionPhase!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition322 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition322(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 7, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(75, 7, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(13) /*isPartOf*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(409, 7, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(155, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 6);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscussionPhase! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscussionPhase!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method559 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionPhase!
	 */
		public Method559(Domain owner)
		{
			super(owner, new Predicate(432, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(433, 7, new TermList(owner.getTermVariable(6), TermList.NIL)), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(398, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionPhase! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition322(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(7)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method559Branch0";
				case 1: return "Method559Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscussionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method560 extends Method
	{
	/**
	 * Method -1 for compound task createDiscussionPhase
	 */
		public Method560(Domain owner)
		{
			super(owner, new Predicate(430, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(398, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscussionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method560Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeDiscussionGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method561 extends Method
	{
	/**
	 * Method -1 for compound task distributeDiscussionGroupActivityByCLGroups
	 */
		public Method561(Domain owner)
		{
			super(owner, new Predicate(433, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDiscussionGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method561Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeDiscussionGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition323 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition323(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(172, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(175, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeDiscussionGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeDiscussionGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method562 extends Method
	{
	/**
	 * Method -1 for compound task distributeDiscussionGroupActivityByCLGroups
	 */
		public Method562(Domain owner)
		{
			super(owner, new Predicate(433, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(398, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(433, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDiscussionGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition323(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method562Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDExpertPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method563 extends Method
	{
	/**
	 * Method -1 for compound task createLDExpertPhase
	 */
		public Method563(Domain owner)
		{
			super(owner, new Predicate(435, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(389) /*Expert*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(434, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDExpertPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method563Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createExpertPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition324 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition324(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(10, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(141, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createExpertPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createExpertPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method564 extends Method
	{
	/**
	 * Method -1 for compound task createExpertPhase
	 */
		public Method564(Domain owner)
		{
			super(owner, new Predicate(434, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(436, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createExpertPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition324(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method564Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeExpertGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method565 extends Method
	{
	/**
	 * Method -1 for compound task distributeExpertGroupActivityByComps
	 */
		public Method565(Domain owner)
		{
			super(owner, new Predicate(436, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeExpertGroupActivityByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method565Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeExpertGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition325 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition325(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(75, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(13) /*isPartOf*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(6), new TermList(new TermList(owner.getTermVariable(5), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(394) /*Individual*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(394) /*Individual*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(184) /*hasCompetency*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(155, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(owner.getTermVariable(8), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[7] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(9), TermList.NIL), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 10);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeExpertGroupActivityByComps [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeExpertGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method566 extends Method
	{
	/**
	 * Method -1 for compound task distributeExpertGroupActivityByComps
	 */
		public Method566(Domain owner)
		{
			super(owner, new Predicate(436, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(437, 11, new TermList(owner.getTermVariable(10), TermList.NIL)), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(436, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeExpertGroupActivityByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition325(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method566Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeExpertGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method567 extends Method
	{
	/**
	 * Method -1 for compound task distributeExpertGroupActivityByCLGroups
	 */
		public Method567(Domain owner)
		{
			super(owner, new Predicate(437, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeExpertGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method567Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeExpertGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition326 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition326(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(172, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(175, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeExpertGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeExpertGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method568 extends Method
	{
	/**
	 * Method -1 for compound task distributeExpertGroupActivityByCLGroups
	 */
		public Method568(Domain owner)
		{
			super(owner, new Predicate(437, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(402, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(437, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeExpertGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition326(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method568Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIndividualPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method569 extends Method
	{
	/**
	 * Method -1 for compound task createLDIndividualPhase
	 */
		public Method569(Domain owner)
		{
			super(owner, new Predicate(439, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(12, 3, new TermList(TermList.NIL, TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(394) /*Individual*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(438, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIndividualPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method569Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIndividualPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition327 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition327(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(141, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(9, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIndividualPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIndividualPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method570 extends Method
	{
	/**
	 * Method -1 for compound task createIndividualPhase
	 */
		public Method570(Domain owner)
		{
			super(owner, new Predicate(438, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(440, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIndividualPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition327(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method570Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeIndGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method571 extends Method
	{
	/**
	 * Method -1 for compound task distributeIndGroupActivityByComps
	 */
		public Method571(Domain owner)
		{
			super(owner, new Predicate(440, 0, new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeIndGroupActivityByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method571Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeIndGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method572 extends Method
	{
	/**
	 * Method -1 for compound task distributeIndGroupActivityByComps
	 */
		public Method572(Domain owner)
		{
			super(owner, new Predicate(440, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(406, 4, new TermList(new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(20) /*s0k0*/, TermList.NIL)), TermList.NIL), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(440, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeIndGroupActivityByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method572Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method573 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawPhase
	 */
		public Method573(Domain owner)
		{
			super(owner, new Predicate(442, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(441, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method573Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method574 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawPhase
	 */
		public Method574(Domain owner)
		{
			super(owner, new Predicate(441, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(410, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method574Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPairPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method575 extends Method
	{
	/**
	 * Method -1 for compound task createLDPairPhase
	 */
		public Method575(Domain owner)
		{
			super(owner, new Predicate(444, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(400) /*Pair*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(443, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPairPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method575Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPairPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition328 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition328(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL), ((domain)owner).calculateFloor, "((domain)owner).calculateFloor"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(155, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 6);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPairPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPairPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method576 extends Method
	{
	/**
	 * Method -1 for compound task createPairPhase
	 */
		public Method576(Domain owner)
		{
			super(owner, new Predicate(443, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(445, 7, new TermList(owner.getTermVariable(6), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPairPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition328(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method576Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributePairGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method577 extends Method
	{
	/**
	 * Method -1 for compound task distributePairGroupActivityByCLGroups
	 */
		public Method577(Domain owner)
		{
			super(owner, new Predicate(445, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePairGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method577Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributePairGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition329 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition329(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(172, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(175, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributePairGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributePairGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method578 extends Method
	{
	/**
	 * Method -1 for compound task distributePairGroupActivityByCLGroups
	 */
		public Method578(Domain owner)
		{
			super(owner, new Predicate(445, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(415, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(445, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePairGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition329(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method578Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDRolePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method579 extends Method
	{
	/**
	 * Method -1 for compound task createLDRolePhase
	 */
		public Method579(Domain owner)
		{
			super(owner, new Predicate(447, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(206) /*Role*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(446, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDRolePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method579Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createRolePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition330 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition330(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(10, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(141, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createRolePhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createRolePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method580 extends Method
	{
	/**
	 * Method -1 for compound task createRolePhase
	 */
		public Method580(Domain owner)
		{
			super(owner, new Predicate(446, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(448, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createRolePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition330(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method580Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeRoleGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method581 extends Method
	{
	/**
	 * Method -1 for compound task distributeRoleGroupActivityByComps
	 */
		public Method581(Domain owner)
		{
			super(owner, new Predicate(448, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeRoleGroupActivityByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method581Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeRoleGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition331 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition331(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(75, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(13) /*isPartOf*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(6), new TermList(new TermList(owner.getTermVariable(5), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(394) /*Individual*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(394) /*Individual*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(184) /*hasCompetency*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(66, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(185) /*hasParticipant*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(155, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(owner.getTermVariable(8), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[7] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(9), TermList.NIL), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 10);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeRoleGroupActivityByComps [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeRoleGroupActivityByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method582 extends Method
	{
	/**
	 * Method -1 for compound task distributeRoleGroupActivityByComps
	 */
		public Method582(Domain owner)
		{
			super(owner, new Predicate(448, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(449, 11, new TermList(owner.getTermVariable(10), TermList.NIL)), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(448, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeRoleGroupActivityByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition331(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method582Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeRoleGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method583 extends Method
	{
	/**
	 * Method -1 for compound task distributeRoleGroupActivityByCLGroups
	 */
		public Method583(Domain owner)
		{
			super(owner, new Predicate(449, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeRoleGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method583Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeRoleGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition332 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition332(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(172, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(175, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeRoleGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeRoleGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method584 extends Method
	{
	/**
	 * Method -1 for compound task distributeRoleGroupActivityByCLGroups
	 */
		public Method584(Domain owner)
		{
			super(owner, new Predicate(449, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(419, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(449, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeRoleGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition332(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method584Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSharePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method585 extends Method
	{
	/**
	 * Method -1 for compound task createLDSharePhase
	 */
		public Method585(Domain owner)
		{
			super(owner, new Predicate(451, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(404) /*Share*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(450, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSharePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method585Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSharePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method586 extends Method
	{
	/**
	 * Method -1 for compound task createSharePhase
	 */
		public Method586(Domain owner)
		{
			super(owner, new Predicate(450, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(423, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSharePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method586Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method587 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationPhase
	 */
		public Method587(Domain owner)
		{
			super(owner, new Predicate(453, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(452, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method587Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method588 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationPhase
	 */
		public Method588(Domain owner)
		{
			super(owner, new Predicate(452, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(427, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method588Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition333 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition333(Domain owner, Term[] unifier)
		{
			p = new Precondition[15];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 20, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 20, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 20, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[5] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 20, new TermList(owner.getTermConstant(372) /*simulation*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 20);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(5, 20, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(1, 20, new TermList(owner.getTermVariable(5), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[9] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(5, 20, new TermList(owner.getTermVariable(7), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[11] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(owner.getTermVariable(6), TermList.NIL)), StdLib.mult, "StdLib.mult"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(71, 20, new TermList(owner.getTermVariable(9), new TermList(new TermList(owner.getTermVariable(8), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(388) /*Jigsaw*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[14] = new PreconditionAtomic(new Predicate(0, 20, new TermList(owner.getTermVariable(9), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[15][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[14] == null)
			{
				boolean b13changed = false;
				while (b[13] == null)
				{
					boolean b12changed = false;
					while (b[12] == null)
					{
						boolean b11changed = false;
						while (b[11] == null)
						{
							boolean b10changed = false;
							while (b[10] == null)
							{
								boolean b9changed = false;
								while (b[9] == null)
								{
									boolean b8changed = false;
									while (b[8] == null)
									{
										boolean b7changed = false;
										while (b[7] == null)
										{
											boolean b6changed = false;
											while (b[6] == null)
											{
												boolean b5changed = false;
												while (b[5] == null)
												{
													boolean b4changed = false;
													while (b[4] == null)
													{
														boolean b3changed = false;
														while (b[3] == null)
														{
															boolean b2changed = false;
															while (b[2] == null)
															{
																boolean b1changed = false;
																while (b[1] == null)
																{
																	b[1] = p[1].nextBinding(state);
																	if (b[1] == null)
																		return null;
																	else
																		bestMatch = Math.max(bestMatch, 1);
																	b1changed = true;
																}
																if ( b1changed ) {
																	p[2].reset(state);
																	p[2].bind(Term.merge(b, 2));
																}
																b[2] = p[2].nextBinding(state);
																if (b[2] == null)
																	b[1] = null;
																else
																	bestMatch = Math.max(bestMatch, 2);
																b2changed = true;
															}
															if ( b2changed ) {
																p[3].reset(state);
																p[3].bind(Term.merge(b, 3));
															}
															b[3] = p[3].nextBinding(state);
															if (b[3] == null)
																b[2] = null;
															else
																bestMatch = Math.max(bestMatch, 3);
															b3changed = true;
														}
														if ( b3changed ) {
															p[4].reset(state);
															p[4].bind(Term.merge(b, 4));
														}
														b[4] = p[4].nextBinding(state);
														if (b[4] == null)
															b[3] = null;
														else
															bestMatch = Math.max(bestMatch, 4);
														b4changed = true;
													}
													if ( b4changed ) {
														p[5].reset(state);
														p[5].bind(Term.merge(b, 5));
													}
													b[5] = p[5].nextBinding(state);
													if (b[5] == null)
														b[4] = null;
													else
														bestMatch = Math.max(bestMatch, 5);
													b5changed = true;
												}
												if ( b5changed ) {
													p[6].reset(state);
													p[6].bind(Term.merge(b, 6));
												}
												b[6] = p[6].nextBinding(state);
												if (b[6] == null)
													b[5] = null;
												else
													bestMatch = Math.max(bestMatch, 6);
												b6changed = true;
											}
											if ( b6changed ) {
												p[7].reset(state);
												p[7].bind(Term.merge(b, 7));
											}
											b[7] = p[7].nextBinding(state);
											if (b[7] == null)
												b[6] = null;
											else
												bestMatch = Math.max(bestMatch, 7);
											b7changed = true;
										}
										if ( b7changed ) {
											p[8].reset(state);
											p[8].bind(Term.merge(b, 8));
										}
										b[8] = p[8].nextBinding(state);
										if (b[8] == null)
											b[7] = null;
										else
											bestMatch = Math.max(bestMatch, 8);
										b8changed = true;
									}
									if ( b8changed ) {
										p[9].reset(state);
										p[9].bind(Term.merge(b, 9));
									}
									b[9] = p[9].nextBinding(state);
									if (b[9] == null)
										b[8] = null;
									else
										bestMatch = Math.max(bestMatch, 9);
									b9changed = true;
								}
								if ( b9changed ) {
									p[10].reset(state);
									p[10].bind(Term.merge(b, 10));
								}
								b[10] = p[10].nextBinding(state);
								if (b[10] == null)
									b[9] = null;
								else
									bestMatch = Math.max(bestMatch, 10);
								b10changed = true;
							}
							if ( b10changed ) {
								p[11].reset(state);
								p[11].bind(Term.merge(b, 11));
							}
							b[11] = p[11].nextBinding(state);
							if (b[11] == null)
								b[10] = null;
							else
								bestMatch = Math.max(bestMatch, 11);
							b11changed = true;
						}
						if ( b11changed ) {
							p[12].reset(state);
							p[12].bind(Term.merge(b, 12));
						}
						b[12] = p[12].nextBinding(state);
						if (b[12] == null)
							b[11] = null;
						else
							bestMatch = Math.max(bestMatch, 12);
						b12changed = true;
					}
					if ( b12changed ) {
						p[13].reset(state);
						p[13].bind(Term.merge(b, 13));
					}
					b[13] = p[13].nextBinding(state);
					if (b[13] == null)
						b[12] = null;
					else
						bestMatch = Math.max(bestMatch, 13);
					b13changed = true;
				}
				if ( b13changed ) {
					p[14].reset(state);
					p[14].bind(Term.merge(b, 14));
				}
				b[14] = p[14].nextBinding(state);
				if (b[14] == null)
					b[13] = null;
				else
					bestMatch = Math.max(bestMatch, 14);
			}

			Term[] retVal = Term.merge(b, 15);
			b[14] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition337 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition337(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(412) /*individual-accountability*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition338 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition338(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 20, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermConstant(412) /*individual-accountability*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(14), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition337(owner, unifier) /*Conjunct 5 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition335 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition335(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(13), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition336 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition336(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 20, new TermList(owner.getTermVariable(13), new TermList(new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(14), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition335(owner, unifier) /*Conjunct 5 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition339 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition339(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermConstant(413) /*discussion*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(18), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition340 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition340(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 20, new TermList(owner.getTermVariable(18), new TermList(new TermList(owner.getTermConstant(413) /*discussion*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 20, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 20, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(14), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition339(owner, unifier) /*Conjunct 5 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition334 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition334(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 10);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 20, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 20, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(410) /*hasCLExperience*/, new TermList(new TermList(owner.getTermConstant(133) /*high*/, new TermList(owner.getTermConstant(132) /*very-high*/, TermList.NIL)), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 20, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(12), new TermList(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method589 extends Method
	{
	/**
	 * Method -1 for compound task createLDScript!
	 */
		public Method589(Domain owner)
		{
			super(owner, new Predicate(455, 20, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(454, 20, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition333(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
					p = (new Precondition338(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition336(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition340(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition334(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 3;
					}
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "relative-jigsaw-uol";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method590 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawScript
	 */
		public Method590(Domain owner)
		{
			super(owner, new Predicate(454, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(456, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method590Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method591 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawScript!
	 */
		public Method591(Domain owner)
		{
			super(owner, new Predicate(456, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(457, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method591Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDJigsawScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition341 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition341(Domain owner, Term[] unifier)
		{
			p = new Precondition[18];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 17, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 17, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 17, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(144, 17, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 17, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 17, new TermList(owner.getTermVariable(7), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(107, 17, new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), owner.getTermVariable(6)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(58, 17, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(105, 17, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(7, 17, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(71, 17, new TermList(owner.getTermVariable(12), new TermList(new TermList(owner.getTermVariable(11), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(5, 17, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[14] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(13), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[15] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(14), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(owner.getTermVariable(13), TermList.NIL)), StdLib.mult, "StdLib.mult"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[16] = new PreconditionAtomic(new Predicate(149, 17, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[17] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 16);
			b = new Term[18][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[17] == null)
			{
				boolean b16changed = false;
				while (b[16] == null)
				{
					boolean b15changed = false;
					while (b[15] == null)
					{
						boolean b14changed = false;
						while (b[14] == null)
						{
							boolean b13changed = false;
							while (b[13] == null)
							{
								boolean b12changed = false;
								while (b[12] == null)
								{
									boolean b11changed = false;
									while (b[11] == null)
									{
										boolean b10changed = false;
										while (b[10] == null)
										{
											boolean b9changed = false;
											while (b[9] == null)
											{
												boolean b8changed = false;
												while (b[8] == null)
												{
													boolean b7changed = false;
													while (b[7] == null)
													{
														boolean b6changed = false;
														while (b[6] == null)
														{
															boolean b5changed = false;
															while (b[5] == null)
															{
																boolean b4changed = false;
																while (b[4] == null)
																{
																	boolean b3changed = false;
																	while (b[3] == null)
																	{
																		boolean b2changed = false;
																		while (b[2] == null)
																		{
																			boolean b1changed = false;
																			while (b[1] == null)
																			{
																				b[1] = p[1].nextBinding(state);
																				if (b[1] == null)
																					return null;
																				else
																					bestMatch = Math.max(bestMatch, 1);
																				b1changed = true;
																			}
																			if ( b1changed ) {
																				p[2].reset(state);
																				p[2].bind(Term.merge(b, 2));
																			}
																			b[2] = p[2].nextBinding(state);
																			if (b[2] == null)
																				b[1] = null;
																			else
																				bestMatch = Math.max(bestMatch, 2);
																			b2changed = true;
																		}
																		if ( b2changed ) {
																			p[3].reset(state);
																			p[3].bind(Term.merge(b, 3));
																		}
																		b[3] = p[3].nextBinding(state);
																		if (b[3] == null)
																			b[2] = null;
																		else
																			bestMatch = Math.max(bestMatch, 3);
																		b3changed = true;
																	}
																	if ( b3changed ) {
																		p[4].reset(state);
																		p[4].bind(Term.merge(b, 4));
																	}
																	b[4] = p[4].nextBinding(state);
																	if (b[4] == null)
																		b[3] = null;
																	else
																		bestMatch = Math.max(bestMatch, 4);
																	b4changed = true;
																}
																if ( b4changed ) {
																	p[5].reset(state);
																	p[5].bind(Term.merge(b, 5));
																}
																b[5] = p[5].nextBinding(state);
																if (b[5] == null)
																	b[4] = null;
																else
																	bestMatch = Math.max(bestMatch, 5);
																b5changed = true;
															}
															if ( b5changed ) {
																p[6].reset(state);
																p[6].bind(Term.merge(b, 6));
															}
															b[6] = p[6].nextBinding(state);
															if (b[6] == null)
																b[5] = null;
															else
																bestMatch = Math.max(bestMatch, 6);
															b6changed = true;
														}
														if ( b6changed ) {
															p[7].reset(state);
															p[7].bind(Term.merge(b, 7));
														}
														b[7] = p[7].nextBinding(state);
														if (b[7] == null)
															b[6] = null;
														else
															bestMatch = Math.max(bestMatch, 7);
														b7changed = true;
													}
													if ( b7changed ) {
														p[8].reset(state);
														p[8].bind(Term.merge(b, 8));
													}
													b[8] = p[8].nextBinding(state);
													if (b[8] == null)
														b[7] = null;
													else
														bestMatch = Math.max(bestMatch, 8);
													b8changed = true;
												}
												if ( b8changed ) {
													p[9].reset(state);
													p[9].bind(Term.merge(b, 9));
												}
												b[9] = p[9].nextBinding(state);
												if (b[9] == null)
													b[8] = null;
												else
													bestMatch = Math.max(bestMatch, 9);
												b9changed = true;
											}
											if ( b9changed ) {
												p[10].reset(state);
												p[10].bind(Term.merge(b, 10));
											}
											b[10] = p[10].nextBinding(state);
											if (b[10] == null)
												b[9] = null;
											else
												bestMatch = Math.max(bestMatch, 10);
											b10changed = true;
										}
										if ( b10changed ) {
											p[11].reset(state);
											p[11].bind(Term.merge(b, 11));
										}
										b[11] = p[11].nextBinding(state);
										if (b[11] == null)
											b[10] = null;
										else
											bestMatch = Math.max(bestMatch, 11);
										b11changed = true;
									}
									if ( b11changed ) {
										p[12].reset(state);
										p[12].bind(Term.merge(b, 12));
									}
									b[12] = p[12].nextBinding(state);
									if (b[12] == null)
										b[11] = null;
									else
										bestMatch = Math.max(bestMatch, 12);
									b12changed = true;
								}
								if ( b12changed ) {
									p[13].reset(state);
									p[13].bind(Term.merge(b, 13));
								}
								b[13] = p[13].nextBinding(state);
								if (b[13] == null)
									b[12] = null;
								else
									bestMatch = Math.max(bestMatch, 13);
								b13changed = true;
							}
							if ( b13changed ) {
								p[14].reset(state);
								p[14].bind(Term.merge(b, 14));
							}
							b[14] = p[14].nextBinding(state);
							if (b[14] == null)
								b[13] = null;
							else
								bestMatch = Math.max(bestMatch, 14);
							b14changed = true;
						}
						if ( b14changed ) {
							p[15].reset(state);
							p[15].bind(Term.merge(b, 15));
						}
						b[15] = p[15].nextBinding(state);
						if (b[15] == null)
							b[14] = null;
						else
							bestMatch = Math.max(bestMatch, 15);
						b15changed = true;
					}
					if ( b15changed ) {
						p[16].reset(state);
						p[16].bind(Term.merge(b, 16));
					}
					b[16] = p[16].nextBinding(state);
					if (b[16] == null)
						b[15] = null;
					else
						bestMatch = Math.max(bestMatch, 16);
					b16changed = true;
				}
				if ( b16changed ) {
					p[17].reset(state);
					p[17].bind(Term.merge(b, 17));
				}
				b[17] = p[17].nextBinding(state);
				if (b[17] == null)
					b[16] = null;
				else
					bestMatch = Math.max(bestMatch, 17);
			}

			Term[] retVal = Term.merge(b, 18);
			b[17] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			p[15].reset(state);
			p[16].reset(state);
			p[17].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDJigsawScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDJigsawScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method592 extends Method
	{
	/**
	 * Method -1 for compound task createLDJigsawScript
	 */
		public Method592(Domain owner)
		{
			super(owner, new Predicate(454, 17, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 17, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(16), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(7, 17, new TermList(owner.getTermVariable(2), TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 17, new TermList(new TermList(owner.getTermConstant(388) /*Jigsaw*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(15), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(457, 17, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 17, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(16), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDJigsawScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition341(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method592Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method593 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawScript
	 */
		public Method593(Domain owner)
		{
			super(owner, new Predicate(457, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(458, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method593Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createJigsawScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition342 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition342(Domain owner, Term[] unifier)
		{
			p = new Precondition[13];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 11, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 11, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(5, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[6] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[7] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(5, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[9] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(owner.getTermVariable(5), TermList.NIL)), StdLib.mult, "StdLib.mult"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(59, 11, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(152, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(9), TermList.NIL)))), unifier);
			b = new Term[13][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[12] == null)
			{
				boolean b11changed = false;
				while (b[11] == null)
				{
					boolean b10changed = false;
					while (b[10] == null)
					{
						boolean b9changed = false;
						while (b[9] == null)
						{
							boolean b8changed = false;
							while (b[8] == null)
							{
								boolean b7changed = false;
								while (b[7] == null)
								{
									boolean b6changed = false;
									while (b[6] == null)
									{
										boolean b5changed = false;
										while (b[5] == null)
										{
											boolean b4changed = false;
											while (b[4] == null)
											{
												boolean b3changed = false;
												while (b[3] == null)
												{
													boolean b2changed = false;
													while (b[2] == null)
													{
														boolean b1changed = false;
														while (b[1] == null)
														{
															b[1] = p[1].nextBinding(state);
															if (b[1] == null)
																return null;
															else
																bestMatch = Math.max(bestMatch, 1);
															b1changed = true;
														}
														if ( b1changed ) {
															p[2].reset(state);
															p[2].bind(Term.merge(b, 2));
														}
														b[2] = p[2].nextBinding(state);
														if (b[2] == null)
															b[1] = null;
														else
															bestMatch = Math.max(bestMatch, 2);
														b2changed = true;
													}
													if ( b2changed ) {
														p[3].reset(state);
														p[3].bind(Term.merge(b, 3));
													}
													b[3] = p[3].nextBinding(state);
													if (b[3] == null)
														b[2] = null;
													else
														bestMatch = Math.max(bestMatch, 3);
													b3changed = true;
												}
												if ( b3changed ) {
													p[4].reset(state);
													p[4].bind(Term.merge(b, 4));
												}
												b[4] = p[4].nextBinding(state);
												if (b[4] == null)
													b[3] = null;
												else
													bestMatch = Math.max(bestMatch, 4);
												b4changed = true;
											}
											if ( b4changed ) {
												p[5].reset(state);
												p[5].bind(Term.merge(b, 5));
											}
											b[5] = p[5].nextBinding(state);
											if (b[5] == null)
												b[4] = null;
											else
												bestMatch = Math.max(bestMatch, 5);
											b5changed = true;
										}
										if ( b5changed ) {
											p[6].reset(state);
											p[6].bind(Term.merge(b, 6));
										}
										b[6] = p[6].nextBinding(state);
										if (b[6] == null)
											b[5] = null;
										else
											bestMatch = Math.max(bestMatch, 6);
										b6changed = true;
									}
									if ( b6changed ) {
										p[7].reset(state);
										p[7].bind(Term.merge(b, 7));
									}
									b[7] = p[7].nextBinding(state);
									if (b[7] == null)
										b[6] = null;
									else
										bestMatch = Math.max(bestMatch, 7);
									b7changed = true;
								}
								if ( b7changed ) {
									p[8].reset(state);
									p[8].bind(Term.merge(b, 8));
								}
								b[8] = p[8].nextBinding(state);
								if (b[8] == null)
									b[7] = null;
								else
									bestMatch = Math.max(bestMatch, 8);
								b8changed = true;
							}
							if ( b8changed ) {
								p[9].reset(state);
								p[9].bind(Term.merge(b, 9));
							}
							b[9] = p[9].nextBinding(state);
							if (b[9] == null)
								b[8] = null;
							else
								bestMatch = Math.max(bestMatch, 9);
							b9changed = true;
						}
						if ( b9changed ) {
							p[10].reset(state);
							p[10].bind(Term.merge(b, 10));
						}
						b[10] = p[10].nextBinding(state);
						if (b[10] == null)
							b[9] = null;
						else
							bestMatch = Math.max(bestMatch, 10);
						b10changed = true;
					}
					if ( b10changed ) {
						p[11].reset(state);
						p[11].bind(Term.merge(b, 11));
					}
					b[11] = p[11].nextBinding(state);
					if (b[11] == null)
						b[10] = null;
					else
						bestMatch = Math.max(bestMatch, 11);
					b11changed = true;
				}
				if ( b11changed ) {
					p[12].reset(state);
					p[12].bind(Term.merge(b, 12));
				}
				b[12] = p[12].nextBinding(state);
				if (b[12] == null)
					b[11] = null;
				else
					bestMatch = Math.max(bestMatch, 12);
			}

			Term[] retVal = Term.merge(b, 13);
			b[12] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createJigsawScript! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createJigsawScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method594 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawScript!
	 */
		public Method594(Domain owner)
		{
			super(owner, new Predicate(458, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(439, 11, new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermVariable(6), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(435, 11, new TermList(owner.getTermVariable(10), new TermList(new TermList(owner.getTermVariable(6), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(442, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition342(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method594Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createJigsawScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method595 extends Method
	{
	/**
	 * Method -1 for compound task createJigsawScript
	 */
		public Method595(Domain owner)
		{
			super(owner, new Predicate(457, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(414) /*createJigsawScript*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createJigsawScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method595Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition343 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition343(Domain owner, Term[] unifier)
		{
			p = new Precondition[11];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 17, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 17, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 17, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 17, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(131) /*hasDifficult*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(6, 17, new TermList(owner.getTermConstant(134) /*very-difficult*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(5, 17, new TermList(owner.getTermVariable(5), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[7] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermNumber(8.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(59, 17, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(71, 17, new TermList(owner.getTermVariable(7), new TermList(new TermList(owner.getTermVariable(6), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(415) /*Pyramid*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(0, 17, new TermList(owner.getTermVariable(7), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[11][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[10] == null)
			{
				boolean b9changed = false;
				while (b[9] == null)
				{
					boolean b8changed = false;
					while (b[8] == null)
					{
						boolean b7changed = false;
						while (b[7] == null)
						{
							boolean b6changed = false;
							while (b[6] == null)
							{
								boolean b5changed = false;
								while (b[5] == null)
								{
									boolean b4changed = false;
									while (b[4] == null)
									{
										boolean b3changed = false;
										while (b[3] == null)
										{
											boolean b2changed = false;
											while (b[2] == null)
											{
												boolean b1changed = false;
												while (b[1] == null)
												{
													b[1] = p[1].nextBinding(state);
													if (b[1] == null)
														return null;
													else
														bestMatch = Math.max(bestMatch, 1);
													b1changed = true;
												}
												if ( b1changed ) {
													p[2].reset(state);
													p[2].bind(Term.merge(b, 2));
												}
												b[2] = p[2].nextBinding(state);
												if (b[2] == null)
													b[1] = null;
												else
													bestMatch = Math.max(bestMatch, 2);
												b2changed = true;
											}
											if ( b2changed ) {
												p[3].reset(state);
												p[3].bind(Term.merge(b, 3));
											}
											b[3] = p[3].nextBinding(state);
											if (b[3] == null)
												b[2] = null;
											else
												bestMatch = Math.max(bestMatch, 3);
											b3changed = true;
										}
										if ( b3changed ) {
											p[4].reset(state);
											p[4].bind(Term.merge(b, 4));
										}
										b[4] = p[4].nextBinding(state);
										if (b[4] == null)
											b[3] = null;
										else
											bestMatch = Math.max(bestMatch, 4);
										b4changed = true;
									}
									if ( b4changed ) {
										p[5].reset(state);
										p[5].bind(Term.merge(b, 5));
									}
									b[5] = p[5].nextBinding(state);
									if (b[5] == null)
										b[4] = null;
									else
										bestMatch = Math.max(bestMatch, 5);
									b5changed = true;
								}
								if ( b5changed ) {
									p[6].reset(state);
									p[6].bind(Term.merge(b, 6));
								}
								b[6] = p[6].nextBinding(state);
								if (b[6] == null)
									b[5] = null;
								else
									bestMatch = Math.max(bestMatch, 6);
								b6changed = true;
							}
							if ( b6changed ) {
								p[7].reset(state);
								p[7].bind(Term.merge(b, 7));
							}
							b[7] = p[7].nextBinding(state);
							if (b[7] == null)
								b[6] = null;
							else
								bestMatch = Math.max(bestMatch, 7);
							b7changed = true;
						}
						if ( b7changed ) {
							p[8].reset(state);
							p[8].bind(Term.merge(b, 8));
						}
						b[8] = p[8].nextBinding(state);
						if (b[8] == null)
							b[7] = null;
						else
							bestMatch = Math.max(bestMatch, 8);
						b8changed = true;
					}
					if ( b8changed ) {
						p[9].reset(state);
						p[9].bind(Term.merge(b, 9));
					}
					b[9] = p[9].nextBinding(state);
					if (b[9] == null)
						b[8] = null;
					else
						bestMatch = Math.max(bestMatch, 9);
					b9changed = true;
				}
				if ( b9changed ) {
					p[10].reset(state);
					p[10].bind(Term.merge(b, 10));
				}
				b[10] = p[10].nextBinding(state);
				if (b[10] == null)
					b[9] = null;
				else
					bestMatch = Math.max(bestMatch, 10);
			}

			Term[] retVal = Term.merge(b, 11);
			b[10] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition347 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition347(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 17, new TermList(owner.getTermVariable(16), new TermList(owner.getTermConstant(413) /*discussion*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 17, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(15), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition348 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition348(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 17, new TermList(owner.getTermVariable(15), new TermList(new TermList(owner.getTermConstant(413) /*discussion*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 17, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 17, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 17, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition347(owner, unifier) /*Conjunct 5 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition344 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition344(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 8);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 17, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 17, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(410) /*hasCLExperience*/, new TermList(new TermList(owner.getTermConstant(136) /*medium*/, new TermList(owner.getTermConstant(137) /*low*/, TermList.NIL)), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 17, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(11), new TermList(new TermCall(new List(owner.getTermVariable(9), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition345 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition345(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 17, new TermList(owner.getTermVariable(14), new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 17, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(12), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition346 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition346(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 17, new TermList(owner.getTermVariable(12), new TermList(new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 17, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 17, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 17, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition345(owner, unifier) /*Conjunct 5 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method596 extends Method
	{
	/**
	 * Method -1 for compound task createLDScript!
	 */
		public Method596(Domain owner)
		{
			super(owner, new Predicate(455, 17, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(459, 17, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition343(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
					p = (new Precondition348(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition344(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 3;
					}
					p = (new Precondition346(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "relative-pyramid-uol";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPyramidScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method597 extends Method
	{
	/**
	 * Method -1 for compound task createLDPyramidScript
	 */
		public Method597(Domain owner)
		{
			super(owner, new Predicate(459, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(460, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPyramidScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method597Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPyramidScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method598 extends Method
	{
	/**
	 * Method -1 for compound task createLDPyramidScript!
	 */
		public Method598(Domain owner)
		{
			super(owner, new Predicate(460, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(415) /*Pyramid*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(415) /*Pyramid*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(461, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPyramidScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method598Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPyramidScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition349 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition349(Domain owner, Term[] unifier)
		{
			p = new Precondition[12];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 12, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 12, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 12, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermConstant(135) /*difficult*/, new TermList(owner.getTermConstant(134) /*very-difficult*/, TermList.NIL)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(144, 12, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 12, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 12, new TermList(owner.getTermVariable(7), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(107, 12, new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), owner.getTermVariable(6)), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(125, 12, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(149, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[11] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 11);
			b = new Term[12][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[11] == null)
			{
				boolean b10changed = false;
				while (b[10] == null)
				{
					boolean b9changed = false;
					while (b[9] == null)
					{
						boolean b8changed = false;
						while (b[8] == null)
						{
							boolean b7changed = false;
							while (b[7] == null)
							{
								boolean b6changed = false;
								while (b[6] == null)
								{
									boolean b5changed = false;
									while (b[5] == null)
									{
										boolean b4changed = false;
										while (b[4] == null)
										{
											boolean b3changed = false;
											while (b[3] == null)
											{
												boolean b2changed = false;
												while (b[2] == null)
												{
													boolean b1changed = false;
													while (b[1] == null)
													{
														b[1] = p[1].nextBinding(state);
														if (b[1] == null)
															return null;
														else
															bestMatch = Math.max(bestMatch, 1);
														b1changed = true;
													}
													if ( b1changed ) {
														p[2].reset(state);
														p[2].bind(Term.merge(b, 2));
													}
													b[2] = p[2].nextBinding(state);
													if (b[2] == null)
														b[1] = null;
													else
														bestMatch = Math.max(bestMatch, 2);
													b2changed = true;
												}
												if ( b2changed ) {
													p[3].reset(state);
													p[3].bind(Term.merge(b, 3));
												}
												b[3] = p[3].nextBinding(state);
												if (b[3] == null)
													b[2] = null;
												else
													bestMatch = Math.max(bestMatch, 3);
												b3changed = true;
											}
											if ( b3changed ) {
												p[4].reset(state);
												p[4].bind(Term.merge(b, 4));
											}
											b[4] = p[4].nextBinding(state);
											if (b[4] == null)
												b[3] = null;
											else
												bestMatch = Math.max(bestMatch, 4);
											b4changed = true;
										}
										if ( b4changed ) {
											p[5].reset(state);
											p[5].bind(Term.merge(b, 5));
										}
										b[5] = p[5].nextBinding(state);
										if (b[5] == null)
											b[4] = null;
										else
											bestMatch = Math.max(bestMatch, 5);
										b5changed = true;
									}
									if ( b5changed ) {
										p[6].reset(state);
										p[6].bind(Term.merge(b, 6));
									}
									b[6] = p[6].nextBinding(state);
									if (b[6] == null)
										b[5] = null;
									else
										bestMatch = Math.max(bestMatch, 6);
									b6changed = true;
								}
								if ( b6changed ) {
									p[7].reset(state);
									p[7].bind(Term.merge(b, 7));
								}
								b[7] = p[7].nextBinding(state);
								if (b[7] == null)
									b[6] = null;
								else
									bestMatch = Math.max(bestMatch, 7);
								b7changed = true;
							}
							if ( b7changed ) {
								p[8].reset(state);
								p[8].bind(Term.merge(b, 8));
							}
							b[8] = p[8].nextBinding(state);
							if (b[8] == null)
								b[7] = null;
							else
								bestMatch = Math.max(bestMatch, 8);
							b8changed = true;
						}
						if ( b8changed ) {
							p[9].reset(state);
							p[9].bind(Term.merge(b, 9));
						}
						b[9] = p[9].nextBinding(state);
						if (b[9] == null)
							b[8] = null;
						else
							bestMatch = Math.max(bestMatch, 9);
						b9changed = true;
					}
					if ( b9changed ) {
						p[10].reset(state);
						p[10].bind(Term.merge(b, 10));
					}
					b[10] = p[10].nextBinding(state);
					if (b[10] == null)
						b[9] = null;
					else
						bestMatch = Math.max(bestMatch, 10);
					b10changed = true;
				}
				if ( b10changed ) {
					p[11].reset(state);
					p[11].bind(Term.merge(b, 11));
				}
				b[11] = p[11].nextBinding(state);
				if (b[11] == null)
					b[10] = null;
				else
					bestMatch = Math.max(bestMatch, 11);
			}

			Term[] retVal = Term.merge(b, 12);
			b[11] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPyramidScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPyramidScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method599 extends Method
	{
	/**
	 * Method -1 for compound task createLDPyramidScript
	 */
		public Method599(Domain owner)
		{
			super(owner, new Predicate(459, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(11), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(415) /*Pyramid*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(7, 12, new TermList(owner.getTermVariable(2), TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 12, new TermList(new TermList(owner.getTermConstant(415) /*Pyramid*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(10), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(461, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(11), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPyramidScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition349(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method599Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPyramidScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method600 extends Method
	{
	/**
	 * Method -1 for compound task createPyramidScript
	 */
		public Method600(Domain owner)
		{
			super(owner, new Predicate(461, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(462, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPyramidScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method600Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPyramidScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method601 extends Method
	{
	/**
	 * Method -1 for compound task createPyramidScript!
	 */
		public Method601(Domain owner)
		{
			super(owner, new Predicate(462, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(439, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(463, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPyramidScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method601Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPyramidScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method602 extends Method
	{
	/**
	 * Method -1 for compound task createPyramidScript
	 */
		public Method602(Domain owner)
		{
			super(owner, new Predicate(461, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(416) /*createPyramidScript*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPyramidScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method602Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributePyramidDiscussionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition350 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition350(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(4), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(385) /*Discussion*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(5, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.plus, "StdLib.plus"), TermList.NIL)), StdLib.power, "StdLib.power"), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL), ((domain)owner).calculateFloor, "((domain)owner).calculateFloor"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[7] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributePyramidDiscussionPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributePyramidDiscussionPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method603 extends Method
	{
	/**
	 * Method -1 for compound task distributePyramidDiscussionPhase
	 */
		public Method603(Domain owner)
		{
			super(owner, new Predicate(463, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 8, new TermList(new TermList(owner.getTermConstant(409) /*nroGroupsInPhase*/, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(7), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(431, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(1, 8, new TermList(new TermList(owner.getTermConstant(409) /*nroGroupsInPhase*/, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(7), TermList.NIL))), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(463, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(431, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePyramidDiscussionPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition350(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(8)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method603Branch0";
				case 1: return "Method603Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition351 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition351(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 18, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 18, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 18, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 18, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermConstant(372) /*simulation*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(71, 18, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(5, 18, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[8] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(5, 18, new TermList(owner.getTermVariable(7), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[10] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(owner.getTermVariable(6), TermList.NIL)), StdLib.mult, "StdLib.mult"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(59, 18, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(71, 18, new TermList(owner.getTermVariable(9), new TermList(new TermList(owner.getTermVariable(8), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(370) /*Simulation*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(0, 18, new TermList(owner.getTermVariable(9), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition355 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition355(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 18, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(412) /*individual-accountability*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition356 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition356(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 18, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermConstant(412) /*individual-accountability*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 18, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 18, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 18, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(14), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition355(owner, unifier) /*Conjunct 5 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition353 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition353(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 18, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 18, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(13), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition354 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition354(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 18, new TermList(owner.getTermVariable(13), new TermList(new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 18, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 18, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 18, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(14), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition353(owner, unifier) /*Conjunct 5 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition352 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition352(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 10);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 18, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 18, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(410) /*hasCLExperience*/, new TermList(new TermList(owner.getTermConstant(136) /*medium*/, new TermList(owner.getTermConstant(137) /*low*/, TermList.NIL)), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 18, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(12), new TermList(new TermCall(new List(owner.getTermVariable(7), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method604 extends Method
	{
	/**
	 * Method -1 for compound task createLDScript!
	 */
		public Method604(Domain owner)
		{
			super(owner, new Predicate(455, 18, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(464, 18, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition351(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
					p = (new Precondition356(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition354(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition352(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 3;
					}
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "relative-simulation-uol";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method605 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationScript
	 */
		public Method605(Domain owner)
		{
			super(owner, new Predicate(464, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(465, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method605Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method606 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationScript!
	 */
		public Method606(Domain owner)
		{
			super(owner, new Predicate(465, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(466, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method606Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDSimulationScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition357 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition357(Domain owner, Term[] unifier)
		{
			p = new Precondition[18];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 17, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 17, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 17, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(144, 17, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 17, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 17, new TermList(owner.getTermVariable(7), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(107, 17, new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(372) /*simulation*/, TermList.NIL))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(58, 17, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(105, 17, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(7, 17, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(71, 17, new TermList(owner.getTermVariable(12), new TermList(new TermList(owner.getTermVariable(11), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(5, 17, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[14] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(13), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[15] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(14), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(owner.getTermVariable(13), TermList.NIL)), StdLib.mult, "StdLib.mult"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[16] = new PreconditionAtomic(new Predicate(149, 17, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[17] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 16);
			b = new Term[18][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[17] == null)
			{
				boolean b16changed = false;
				while (b[16] == null)
				{
					boolean b15changed = false;
					while (b[15] == null)
					{
						boolean b14changed = false;
						while (b[14] == null)
						{
							boolean b13changed = false;
							while (b[13] == null)
							{
								boolean b12changed = false;
								while (b[12] == null)
								{
									boolean b11changed = false;
									while (b[11] == null)
									{
										boolean b10changed = false;
										while (b[10] == null)
										{
											boolean b9changed = false;
											while (b[9] == null)
											{
												boolean b8changed = false;
												while (b[8] == null)
												{
													boolean b7changed = false;
													while (b[7] == null)
													{
														boolean b6changed = false;
														while (b[6] == null)
														{
															boolean b5changed = false;
															while (b[5] == null)
															{
																boolean b4changed = false;
																while (b[4] == null)
																{
																	boolean b3changed = false;
																	while (b[3] == null)
																	{
																		boolean b2changed = false;
																		while (b[2] == null)
																		{
																			boolean b1changed = false;
																			while (b[1] == null)
																			{
																				b[1] = p[1].nextBinding(state);
																				if (b[1] == null)
																					return null;
																				else
																					bestMatch = Math.max(bestMatch, 1);
																				b1changed = true;
																			}
																			if ( b1changed ) {
																				p[2].reset(state);
																				p[2].bind(Term.merge(b, 2));
																			}
																			b[2] = p[2].nextBinding(state);
																			if (b[2] == null)
																				b[1] = null;
																			else
																				bestMatch = Math.max(bestMatch, 2);
																			b2changed = true;
																		}
																		if ( b2changed ) {
																			p[3].reset(state);
																			p[3].bind(Term.merge(b, 3));
																		}
																		b[3] = p[3].nextBinding(state);
																		if (b[3] == null)
																			b[2] = null;
																		else
																			bestMatch = Math.max(bestMatch, 3);
																		b3changed = true;
																	}
																	if ( b3changed ) {
																		p[4].reset(state);
																		p[4].bind(Term.merge(b, 4));
																	}
																	b[4] = p[4].nextBinding(state);
																	if (b[4] == null)
																		b[3] = null;
																	else
																		bestMatch = Math.max(bestMatch, 4);
																	b4changed = true;
																}
																if ( b4changed ) {
																	p[5].reset(state);
																	p[5].bind(Term.merge(b, 5));
																}
																b[5] = p[5].nextBinding(state);
																if (b[5] == null)
																	b[4] = null;
																else
																	bestMatch = Math.max(bestMatch, 5);
																b5changed = true;
															}
															if ( b5changed ) {
																p[6].reset(state);
																p[6].bind(Term.merge(b, 6));
															}
															b[6] = p[6].nextBinding(state);
															if (b[6] == null)
																b[5] = null;
															else
																bestMatch = Math.max(bestMatch, 6);
															b6changed = true;
														}
														if ( b6changed ) {
															p[7].reset(state);
															p[7].bind(Term.merge(b, 7));
														}
														b[7] = p[7].nextBinding(state);
														if (b[7] == null)
															b[6] = null;
														else
															bestMatch = Math.max(bestMatch, 7);
														b7changed = true;
													}
													if ( b7changed ) {
														p[8].reset(state);
														p[8].bind(Term.merge(b, 8));
													}
													b[8] = p[8].nextBinding(state);
													if (b[8] == null)
														b[7] = null;
													else
														bestMatch = Math.max(bestMatch, 8);
													b8changed = true;
												}
												if ( b8changed ) {
													p[9].reset(state);
													p[9].bind(Term.merge(b, 9));
												}
												b[9] = p[9].nextBinding(state);
												if (b[9] == null)
													b[8] = null;
												else
													bestMatch = Math.max(bestMatch, 9);
												b9changed = true;
											}
											if ( b9changed ) {
												p[10].reset(state);
												p[10].bind(Term.merge(b, 10));
											}
											b[10] = p[10].nextBinding(state);
											if (b[10] == null)
												b[9] = null;
											else
												bestMatch = Math.max(bestMatch, 10);
											b10changed = true;
										}
										if ( b10changed ) {
											p[11].reset(state);
											p[11].bind(Term.merge(b, 11));
										}
										b[11] = p[11].nextBinding(state);
										if (b[11] == null)
											b[10] = null;
										else
											bestMatch = Math.max(bestMatch, 11);
										b11changed = true;
									}
									if ( b11changed ) {
										p[12].reset(state);
										p[12].bind(Term.merge(b, 12));
									}
									b[12] = p[12].nextBinding(state);
									if (b[12] == null)
										b[11] = null;
									else
										bestMatch = Math.max(bestMatch, 12);
									b12changed = true;
								}
								if ( b12changed ) {
									p[13].reset(state);
									p[13].bind(Term.merge(b, 13));
								}
								b[13] = p[13].nextBinding(state);
								if (b[13] == null)
									b[12] = null;
								else
									bestMatch = Math.max(bestMatch, 13);
								b13changed = true;
							}
							if ( b13changed ) {
								p[14].reset(state);
								p[14].bind(Term.merge(b, 14));
							}
							b[14] = p[14].nextBinding(state);
							if (b[14] == null)
								b[13] = null;
							else
								bestMatch = Math.max(bestMatch, 14);
							b14changed = true;
						}
						if ( b14changed ) {
							p[15].reset(state);
							p[15].bind(Term.merge(b, 15));
						}
						b[15] = p[15].nextBinding(state);
						if (b[15] == null)
							b[14] = null;
						else
							bestMatch = Math.max(bestMatch, 15);
						b15changed = true;
					}
					if ( b15changed ) {
						p[16].reset(state);
						p[16].bind(Term.merge(b, 16));
					}
					b[16] = p[16].nextBinding(state);
					if (b[16] == null)
						b[15] = null;
					else
						bestMatch = Math.max(bestMatch, 16);
					b16changed = true;
				}
				if ( b16changed ) {
					p[17].reset(state);
					p[17].bind(Term.merge(b, 17));
				}
				b[17] = p[17].nextBinding(state);
				if (b[17] == null)
					b[16] = null;
				else
					bestMatch = Math.max(bestMatch, 17);
			}

			Term[] retVal = Term.merge(b, 18);
			b[17] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			p[14].reset(state);
			p[15].reset(state);
			p[16].reset(state);
			p[17].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
			b[14] = null;
			b[15] = null;
			b[16] = null;
			b[17] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDSimulationScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDSimulationScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method607 extends Method
	{
	/**
	 * Method -1 for compound task createLDSimulationScript
	 */
		public Method607(Domain owner)
		{
			super(owner, new Predicate(464, 17, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 17, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(16), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(7, 17, new TermList(owner.getTermVariable(2), TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 17, new TermList(new TermList(owner.getTermConstant(370) /*Simulation*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(15), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(466, 17, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 17, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(16), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDSimulationScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition357(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method607Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method608 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationScript
	 */
		public Method608(Domain owner)
		{
			super(owner, new Predicate(466, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(467, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method608Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createSimulationScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition358 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition358(Domain owner, Term[] unifier)
		{
			p = new Precondition[14];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 12, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 12, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 12, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(167, 12, new TermList(owner.getTermVariable(4), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(71, 12, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), TermList.NIL), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(5, 12, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[7] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[8] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(5, 12, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[10] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(8), new TermList(new TermCall(new List(new TermNumber(2.0), new TermList(owner.getTermVariable(6), TermList.NIL)), StdLib.mult, "StdLib.mult"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(59, 12, new TermList(owner.getTermVariable(9), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[12] = new PreconditionAtomic(new Predicate(69, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[13] = new PreconditionAtomic(new Predicate(152, 12, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(10), TermList.NIL)))), unifier);
			b = new Term[14][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[13] == null)
			{
				boolean b12changed = false;
				while (b[12] == null)
				{
					boolean b11changed = false;
					while (b[11] == null)
					{
						boolean b10changed = false;
						while (b[10] == null)
						{
							boolean b9changed = false;
							while (b[9] == null)
							{
								boolean b8changed = false;
								while (b[8] == null)
								{
									boolean b7changed = false;
									while (b[7] == null)
									{
										boolean b6changed = false;
										while (b[6] == null)
										{
											boolean b5changed = false;
											while (b[5] == null)
											{
												boolean b4changed = false;
												while (b[4] == null)
												{
													boolean b3changed = false;
													while (b[3] == null)
													{
														boolean b2changed = false;
														while (b[2] == null)
														{
															boolean b1changed = false;
															while (b[1] == null)
															{
																b[1] = p[1].nextBinding(state);
																if (b[1] == null)
																	return null;
																else
																	bestMatch = Math.max(bestMatch, 1);
																b1changed = true;
															}
															if ( b1changed ) {
																p[2].reset(state);
																p[2].bind(Term.merge(b, 2));
															}
															b[2] = p[2].nextBinding(state);
															if (b[2] == null)
																b[1] = null;
															else
																bestMatch = Math.max(bestMatch, 2);
															b2changed = true;
														}
														if ( b2changed ) {
															p[3].reset(state);
															p[3].bind(Term.merge(b, 3));
														}
														b[3] = p[3].nextBinding(state);
														if (b[3] == null)
															b[2] = null;
														else
															bestMatch = Math.max(bestMatch, 3);
														b3changed = true;
													}
													if ( b3changed ) {
														p[4].reset(state);
														p[4].bind(Term.merge(b, 4));
													}
													b[4] = p[4].nextBinding(state);
													if (b[4] == null)
														b[3] = null;
													else
														bestMatch = Math.max(bestMatch, 4);
													b4changed = true;
												}
												if ( b4changed ) {
													p[5].reset(state);
													p[5].bind(Term.merge(b, 5));
												}
												b[5] = p[5].nextBinding(state);
												if (b[5] == null)
													b[4] = null;
												else
													bestMatch = Math.max(bestMatch, 5);
												b5changed = true;
											}
											if ( b5changed ) {
												p[6].reset(state);
												p[6].bind(Term.merge(b, 6));
											}
											b[6] = p[6].nextBinding(state);
											if (b[6] == null)
												b[5] = null;
											else
												bestMatch = Math.max(bestMatch, 6);
											b6changed = true;
										}
										if ( b6changed ) {
											p[7].reset(state);
											p[7].bind(Term.merge(b, 7));
										}
										b[7] = p[7].nextBinding(state);
										if (b[7] == null)
											b[6] = null;
										else
											bestMatch = Math.max(bestMatch, 7);
										b7changed = true;
									}
									if ( b7changed ) {
										p[8].reset(state);
										p[8].bind(Term.merge(b, 8));
									}
									b[8] = p[8].nextBinding(state);
									if (b[8] == null)
										b[7] = null;
									else
										bestMatch = Math.max(bestMatch, 8);
									b8changed = true;
								}
								if ( b8changed ) {
									p[9].reset(state);
									p[9].bind(Term.merge(b, 9));
								}
								b[9] = p[9].nextBinding(state);
								if (b[9] == null)
									b[8] = null;
								else
									bestMatch = Math.max(bestMatch, 9);
								b9changed = true;
							}
							if ( b9changed ) {
								p[10].reset(state);
								p[10].bind(Term.merge(b, 10));
							}
							b[10] = p[10].nextBinding(state);
							if (b[10] == null)
								b[9] = null;
							else
								bestMatch = Math.max(bestMatch, 10);
							b10changed = true;
						}
						if ( b10changed ) {
							p[11].reset(state);
							p[11].bind(Term.merge(b, 11));
						}
						b[11] = p[11].nextBinding(state);
						if (b[11] == null)
							b[10] = null;
						else
							bestMatch = Math.max(bestMatch, 11);
						b11changed = true;
					}
					if ( b11changed ) {
						p[12].reset(state);
						p[12].bind(Term.merge(b, 12));
					}
					b[12] = p[12].nextBinding(state);
					if (b[12] == null)
						b[11] = null;
					else
						bestMatch = Math.max(bestMatch, 12);
					b12changed = true;
				}
				if ( b12changed ) {
					p[13].reset(state);
					p[13].bind(Term.merge(b, 13));
				}
				b[13] = p[13].nextBinding(state);
				if (b[13] == null)
					b[12] = null;
				else
					bestMatch = Math.max(bestMatch, 13);
			}

			Term[] retVal = Term.merge(b, 14);
			b[13] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			p[12].reset(state);
			p[13].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
			b[12] = null;
			b[13] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createSimulationScript! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createSimulationScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method609 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationScript!
	 */
		public Method609(Domain owner)
		{
			super(owner, new Predicate(467, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(6, 12, new TermList(new TermList(owner.getTermConstant(372) /*simulation*/, owner.getTermVariable(4)), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(439, 12, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermVariable(7), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(447, 12, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermVariable(7), TermList.NIL), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(453, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition358(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method609Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createSimulationScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method610 extends Method
	{
	/**
	 * Method -1 for compound task createSimulationScript
	 */
		public Method610(Domain owner)
		{
			super(owner, new Predicate(466, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(417) /*createSimulationScript*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createSimulationScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method610Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition359 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition359(Domain owner, Term[] unifier)
		{
			p = new Precondition[12];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 22, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 22, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 22, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(6, 22, new TermList(owner.getTermConstant(418) /*questionnaire*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[6] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(5, 22, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[8] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermNumber(4.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(71, 22, new TermList(owner.getTermVariable(8), new TermList(new TermList(owner.getTermVariable(7), TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(419) /*ThinkPairShare*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[11] = new PreconditionAtomic(new Predicate(0, 22, new TermList(owner.getTermVariable(8), new TermList(TermList.NIL, TermList.NIL))), unifier);
			b = new Term[12][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[11] == null)
			{
				boolean b10changed = false;
				while (b[10] == null)
				{
					boolean b9changed = false;
					while (b[9] == null)
					{
						boolean b8changed = false;
						while (b[8] == null)
						{
							boolean b7changed = false;
							while (b[7] == null)
							{
								boolean b6changed = false;
								while (b[6] == null)
								{
									boolean b5changed = false;
									while (b[5] == null)
									{
										boolean b4changed = false;
										while (b[4] == null)
										{
											boolean b3changed = false;
											while (b[3] == null)
											{
												boolean b2changed = false;
												while (b[2] == null)
												{
													boolean b1changed = false;
													while (b[1] == null)
													{
														b[1] = p[1].nextBinding(state);
														if (b[1] == null)
															return null;
														else
															bestMatch = Math.max(bestMatch, 1);
														b1changed = true;
													}
													if ( b1changed ) {
														p[2].reset(state);
														p[2].bind(Term.merge(b, 2));
													}
													b[2] = p[2].nextBinding(state);
													if (b[2] == null)
														b[1] = null;
													else
														bestMatch = Math.max(bestMatch, 2);
													b2changed = true;
												}
												if ( b2changed ) {
													p[3].reset(state);
													p[3].bind(Term.merge(b, 3));
												}
												b[3] = p[3].nextBinding(state);
												if (b[3] == null)
													b[2] = null;
												else
													bestMatch = Math.max(bestMatch, 3);
												b3changed = true;
											}
											if ( b3changed ) {
												p[4].reset(state);
												p[4].bind(Term.merge(b, 4));
											}
											b[4] = p[4].nextBinding(state);
											if (b[4] == null)
												b[3] = null;
											else
												bestMatch = Math.max(bestMatch, 4);
											b4changed = true;
										}
										if ( b4changed ) {
											p[5].reset(state);
											p[5].bind(Term.merge(b, 5));
										}
										b[5] = p[5].nextBinding(state);
										if (b[5] == null)
											b[4] = null;
										else
											bestMatch = Math.max(bestMatch, 5);
										b5changed = true;
									}
									if ( b5changed ) {
										p[6].reset(state);
										p[6].bind(Term.merge(b, 6));
									}
									b[6] = p[6].nextBinding(state);
									if (b[6] == null)
										b[5] = null;
									else
										bestMatch = Math.max(bestMatch, 6);
									b6changed = true;
								}
								if ( b6changed ) {
									p[7].reset(state);
									p[7].bind(Term.merge(b, 7));
								}
								b[7] = p[7].nextBinding(state);
								if (b[7] == null)
									b[6] = null;
								else
									bestMatch = Math.max(bestMatch, 7);
								b7changed = true;
							}
							if ( b7changed ) {
								p[8].reset(state);
								p[8].bind(Term.merge(b, 8));
							}
							b[8] = p[8].nextBinding(state);
							if (b[8] == null)
								b[7] = null;
							else
								bestMatch = Math.max(bestMatch, 8);
							b8changed = true;
						}
						if ( b8changed ) {
							p[9].reset(state);
							p[9].bind(Term.merge(b, 9));
						}
						b[9] = p[9].nextBinding(state);
						if (b[9] == null)
							b[8] = null;
						else
							bestMatch = Math.max(bestMatch, 9);
						b9changed = true;
					}
					if ( b9changed ) {
						p[10].reset(state);
						p[10].bind(Term.merge(b, 10));
					}
					b[10] = p[10].nextBinding(state);
					if (b[10] == null)
						b[9] = null;
					else
						bestMatch = Math.max(bestMatch, 10);
					b10changed = true;
				}
				if ( b10changed ) {
					p[11].reset(state);
					p[11].bind(Term.merge(b, 11));
				}
				b[11] = p[11].nextBinding(state);
				if (b[11] == null)
					b[10] = null;
				else
					bestMatch = Math.max(bestMatch, 11);
			}

			Term[] retVal = Term.merge(b, 12);
			b[11] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition361 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition361(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 22, new TermList(owner.getTermVariable(13), new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 22, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition362 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition362(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 22, new TermList(owner.getTermVariable(11), new TermList(new TermList(owner.getTermConstant(411) /*positive-interdependence*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition361(owner, unifier) /*Conjunct 5 of Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #0 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition365 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition365(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 22, new TermList(owner.getTermVariable(17), new TermList(owner.getTermConstant(413) /*discussion*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 22, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition366 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition366(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 22, new TermList(owner.getTermVariable(16), new TermList(new TermList(owner.getTermConstant(413) /*discussion*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition365(owner, unifier) /*Conjunct 5 of Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #1 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition367 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition367(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 22, new TermList(owner.getTermVariable(19), new TermList(owner.getTermConstant(422) /*long-term-memory*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 22, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(18), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition368 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition368(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 22, new TermList(owner.getTermVariable(18), new TermList(new TermList(owner.getTermConstant(422) /*long-term-memory*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition367(owner, unifier) /*Conjunct 5 of Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #2 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition363 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition363(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 22, new TermList(owner.getTermVariable(15), new TermList(owner.getTermConstant(421) /*focus-students-attention*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 22, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(14), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition364 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition364(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 22, new TermList(owner.getTermVariable(14), new TermList(new TermList(owner.getTermConstant(421) /*focus-students-attention*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition363(owner, unifier) /*Conjunct 5 of Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #3 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Conjunct #4 of Relative precondition #4 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition369 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition369(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(0, 22, new TermList(owner.getTermVariable(21), new TermList(owner.getTermConstant(423) /*analytical-reasoning*/, TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 22, new TermList(owner.getTermVariable(21), new TermList(owner.getTermVariable(20), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #4 of Relative precondition #4 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Relative precondition #4 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition370 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition370(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 22, new TermList(owner.getTermVariable(20), new TermList(new TermList(owner.getTermConstant(423) /*analytical-reasoning*/, TermList.NIL), new TermList(new TermNumber(-1.0), new TermList(owner.getTermConstant(18) /*isVariantOf*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermVariable(21), new TermList(owner.getTermVariable(12), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[5] = new Precondition369(owner, unifier) /*Conjunct 5 of Relative precondition #4 in branch #0 of Method -1 for compound task createLDScript!*/;
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #4 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Relative precondition #5 in branch #0 of Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition360 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition360(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 22, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 22, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(410) /*hasCLExperience*/, new TermList(new TermList(owner.getTermConstant(137) /*low*/, new TermList(owner.getTermConstant(420) /*very-low*/, TermList.NIL)), TermList.NIL))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 22, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(10), new TermList(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Relative precondition #5 in branch #0 of Method -1 for compound task createLDScript! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method611 extends Method
	{
	/**
	 * Method -1 for compound task createLDScript!
	 */
		public Method611(Domain owner)
		{
			super(owner, new Predicate(455, 22, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(468, 22, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition359(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
					p = (new Precondition362(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition366(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition368(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition364(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition370(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 1;
					}
					p = (new Precondition360(owner, unifier)).setComparator(null);
					p.reset(state);
					if (p.nextBinding(state) != null) {
						toReturn = toReturn + 3;
					}
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "relative-think-pair-share-uol";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDThinkPairShareScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method612 extends Method
	{
	/**
	 * Method -1 for compound task createLDThinkPairShareScript
	 */
		public Method612(Domain owner)
		{
			super(owner, new Predicate(468, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(469, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDThinkPairShareScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method612Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDThinkPairShareScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method613 extends Method
	{
	/**
	 * Method -1 for compound task createLDThinkPairShareScript!
	 */
		public Method613(Domain owner)
		{
			super(owner, new Predicate(469, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(419) /*ThinkPairShare*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(419) /*ThinkPairShare*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(470, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDThinkPairShareScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method613Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDThinkPairShareScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition371 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition371(Domain owner, Term[] unifier)
		{
			p = new Precondition[12];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 12, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(93, 12, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 12, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(144, 12, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(107, 12, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(167, 12, new TermList(owner.getTermVariable(7), TermList.NIL)), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(107, 12, new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(418) /*questionnaire*/, TermList.NIL))), owner.getTermVariable(6))), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(125, 12, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[10] = new PreconditionAtomic(new Predicate(149, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[11] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 11);
			b = new Term[12][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[11] == null)
			{
				boolean b10changed = false;
				while (b[10] == null)
				{
					boolean b9changed = false;
					while (b[9] == null)
					{
						boolean b8changed = false;
						while (b[8] == null)
						{
							boolean b7changed = false;
							while (b[7] == null)
							{
								boolean b6changed = false;
								while (b[6] == null)
								{
									boolean b5changed = false;
									while (b[5] == null)
									{
										boolean b4changed = false;
										while (b[4] == null)
										{
											boolean b3changed = false;
											while (b[3] == null)
											{
												boolean b2changed = false;
												while (b[2] == null)
												{
													boolean b1changed = false;
													while (b[1] == null)
													{
														b[1] = p[1].nextBinding(state);
														if (b[1] == null)
															return null;
														else
															bestMatch = Math.max(bestMatch, 1);
														b1changed = true;
													}
													if ( b1changed ) {
														p[2].reset(state);
														p[2].bind(Term.merge(b, 2));
													}
													b[2] = p[2].nextBinding(state);
													if (b[2] == null)
														b[1] = null;
													else
														bestMatch = Math.max(bestMatch, 2);
													b2changed = true;
												}
												if ( b2changed ) {
													p[3].reset(state);
													p[3].bind(Term.merge(b, 3));
												}
												b[3] = p[3].nextBinding(state);
												if (b[3] == null)
													b[2] = null;
												else
													bestMatch = Math.max(bestMatch, 3);
												b3changed = true;
											}
											if ( b3changed ) {
												p[4].reset(state);
												p[4].bind(Term.merge(b, 4));
											}
											b[4] = p[4].nextBinding(state);
											if (b[4] == null)
												b[3] = null;
											else
												bestMatch = Math.max(bestMatch, 4);
											b4changed = true;
										}
										if ( b4changed ) {
											p[5].reset(state);
											p[5].bind(Term.merge(b, 5));
										}
										b[5] = p[5].nextBinding(state);
										if (b[5] == null)
											b[4] = null;
										else
											bestMatch = Math.max(bestMatch, 5);
										b5changed = true;
									}
									if ( b5changed ) {
										p[6].reset(state);
										p[6].bind(Term.merge(b, 6));
									}
									b[6] = p[6].nextBinding(state);
									if (b[6] == null)
										b[5] = null;
									else
										bestMatch = Math.max(bestMatch, 6);
									b6changed = true;
								}
								if ( b6changed ) {
									p[7].reset(state);
									p[7].bind(Term.merge(b, 7));
								}
								b[7] = p[7].nextBinding(state);
								if (b[7] == null)
									b[6] = null;
								else
									bestMatch = Math.max(bestMatch, 7);
								b7changed = true;
							}
							if ( b7changed ) {
								p[8].reset(state);
								p[8].bind(Term.merge(b, 8));
							}
							b[8] = p[8].nextBinding(state);
							if (b[8] == null)
								b[7] = null;
							else
								bestMatch = Math.max(bestMatch, 8);
							b8changed = true;
						}
						if ( b8changed ) {
							p[9].reset(state);
							p[9].bind(Term.merge(b, 9));
						}
						b[9] = p[9].nextBinding(state);
						if (b[9] == null)
							b[8] = null;
						else
							bestMatch = Math.max(bestMatch, 9);
						b9changed = true;
					}
					if ( b9changed ) {
						p[10].reset(state);
						p[10].bind(Term.merge(b, 10));
					}
					b[10] = p[10].nextBinding(state);
					if (b[10] == null)
						b[9] = null;
					else
						bestMatch = Math.max(bestMatch, 10);
					b10changed = true;
				}
				if ( b10changed ) {
					p[11].reset(state);
					p[11].bind(Term.merge(b, 11));
				}
				b[11] = p[11].nextBinding(state);
				if (b[11] == null)
					b[10] = null;
				else
					bestMatch = Math.max(bestMatch, 11);
			}

			Term[] retVal = Term.merge(b, 12);
			b[11] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			p[10].reset(state);
			p[11].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
			b[10] = null;
			b[11] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDThinkPairShareScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDThinkPairShareScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method614 extends Method
	{
	/**
	 * Method -1 for compound task createLDThinkPairShareScript
	 */
		public Method614(Domain owner)
		{
			super(owner, new Predicate(468, 12, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 12, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(11), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(419) /*ThinkPairShare*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(7, 12, new TermList(owner.getTermVariable(2), TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 12, new TermList(new TermList(owner.getTermConstant(419) /*ThinkPairShare*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(10), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(470, 12, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 12, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(11), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDThinkPairShareScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition371(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method614Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createThinkPairShareScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method615 extends Method
	{
	/**
	 * Method -1 for compound task createThinkPairShareScript
	 */
		public Method615(Domain owner)
		{
			super(owner, new Predicate(470, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(471, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createThinkPairShareScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method615Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createThinkPairShareScript!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method616 extends Method
	{
	/**
	 * Method -1 for compound task createThinkPairShareScript!
	 */
		public Method616(Domain owner)
		{
			super(owner, new Predicate(471, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(6, 3, new TermList(new TermList(owner.getTermConstant(418) /*questionnaire*/, owner.getTermVariable(2)), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(439, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(444, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(451, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createThinkPairShareScript! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(167, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method616Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createThinkPairShareScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method617 extends Method
	{
	/**
	 * Method -1 for compound task createThinkPairShareScript
	 */
		public Method617(Domain owner)
		{
			super(owner, new Predicate(470, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(424) /*createThinkPairShareScript*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createThinkPairShareScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method617Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScriptCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method618 extends Method
	{
	/**
	 * Method -1 for compound task createLDScriptCLScenario
	 */
		public Method618(Domain owner)
		{
			super(owner, new Predicate(472, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScriptCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method618Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScriptCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method619 extends Method
	{
	/**
	 * Method -1 for compound task createLDScriptCLScenario!
	 */
		public Method619(Domain owner)
		{
			super(owner, new Predicate(330, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(473, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScriptCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method619Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScriptCLScenario!!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method620 extends Method
	{
	/**
	 * Method -1 for compound task createLDScriptCLScenario!!
	 */
		public Method620(Domain owner)
		{
			super(owner, new Predicate(473, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(455, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScriptCLScenario!! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method620Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScriptCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method621 extends Method
	{
	/**
	 * Method -1 for compound task createLDScriptCLScenario!
	 */
		public Method621(Domain owner)
		{
			super(owner, new Predicate(330, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(474, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScriptCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method621Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScriptCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method622 extends Method
	{
	/**
	 * Method -1 for compound task createLDScriptCLScenario
	 */
		public Method622(Domain owner)
		{
			super(owner, new Predicate(472, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(426) /*createLDScriptCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScriptCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method622Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method623 extends Method
	{
	/**
	 * Method -1 for compound task createLDScript
	 */
		public Method623(Domain owner)
		{
			super(owner, new Predicate(475, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(455, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method623Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method624 extends Method
	{
	/**
	 * Method -1 for compound task createLDScript
	 */
		public Method624(Domain owner)
		{
			super(owner, new Predicate(475, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(new TermList(owner.getTermConstant(427) /*createLDScript*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method624Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method625 extends Method
	{
	/**
	 * Method -1 for compound task createLDCLScenario
	 */
		public Method625(Domain owner)
		{
			super(owner, new Predicate(476, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(474, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method625Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition374 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition374(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermConstant(428) /*anchored-instruction*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(429) /*learning-by-diagnosing*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(430) /*learning-by-being-taught-anchor-holder*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Precondition #1 of Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition375 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition375(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermConstant(431) /*cognitive-apprenticeship*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(432) /*learning-by-guiding*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(433) /*learning-by-apprenticeship*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #1 of Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Precondition #2 of Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition376 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition376(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermConstant(434) /*cognitive-flexibility*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(435) /*learning-by-selfexpression*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(436) /*learning-by-reflection*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #2 of Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Precondition #3 of Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition377 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition377(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermConstant(437) /*distributed-cognition*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(438) /*learning-by-discussion*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(9, 22, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(15), new TermList(new TermNumber(2.0), TermList.NIL)))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #3 of Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Precondition #4 of Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition378 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition378(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermConstant(439) /*lpp*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(438) /*learning-by-discussion*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(440) /*learning-by-practice*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #4 of Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Precondition #5 of Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition379 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition379(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 22, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 22, new TermList(owner.getTermConstant(441) /*peer-tutoring*/, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(186) /*hasCLGroupingTheory*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(442) /*learning-by-teaching*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(425, 22, new TermList(owner.getTermVariable(20), new TermList(owner.getTermVariable(21), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(443) /*learning-by-being-taught-peer-tutee*/, new TermList(owner.getTermVariable(0), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #5 of Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDCLScenario!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method626 extends Method
	{
	/**
	 * Method -1 for compound task createLDCLScenario!
	 */
		public Method626(Domain owner)
		{
			super(owner, new Predicate(474, 22, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[6];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();
			subsIn[2] = createTaskList2();
			subsIn[3] = createTaskList3();
			subsIn[4] = createTaskList4();
			subsIn[5] = createTaskList5();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(294, 22, new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(298, 22, new TermList(new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(9), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(10), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList2()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(302, 22, new TermList(new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(9), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(13), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList3()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(306, 22, new TermList(new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(14), TermList.NIL)), new TermList(owner.getTermVariable(16), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList4()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(310, 22, new TermList(new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(11), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(17), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		TaskList createTaskList5()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(314, 22, new TermList(new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(20), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(19), new TermList(owner.getTermVariable(21), TermList.NIL)), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCLScenario! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition374(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition375(owner, unifier)).setComparator(null);
				break;
				case 2:
					p = (new Precondition376(owner, unifier)).setComparator(null);
				break;
				case 3:
					p = (new Precondition377(owner, unifier)).setComparator(null);
				break;
				case 4:
					p = (new Precondition378(owner, unifier)).setComparator(null);
				break;
				case 5:
					p = (new Precondition379(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
				case 2:
				break;
				case 3:
				break;
				case 4:
				break;
				case 5:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "anchored-instruction";
				case 1: return "cognitive-apprenticeship";
				case 2: return "cognitive-flexibility";
				case 3: return "distributed-cognition";
				case 4: return "lpp";
				case 5: return "peer-tutoring";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDCLScenario
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method627 extends Method
	{
	/**
	 * Method -1 for compound task createLDCLScenario
	 */
		public Method627(Domain owner)
		{
			super(owner, new Predicate(476, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 2, new TermList(new TermList(owner.getTermConstant(444) /*createLDCLScenario*/, new TermList(owner.getTermConstant(249) /*fall-back*/, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDCLScenario [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method627Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInputs
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method628 extends Method
	{
	/**
	 * Method -1 for compound task createLDInputs
	 */
		public Method628(Domain owner)
		{
			super(owner, new Predicate(327, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInputs [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method628Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDInputs
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method629 extends Method
	{
	/**
	 * Method -1 for compound task createLDInputs
	 */
		public Method629(Domain owner)
		{
			super(owner, new Predicate(327, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(445) /*prerequisites*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(477, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(445) /*prerequisites*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDInputs [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method629Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createInputs
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method630 extends Method
	{
	/**
	 * Method -1 for compound task createInputs
	 */
		public Method630(Domain owner)
		{
			super(owner, new Predicate(477, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(26, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createInputs [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method630Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDevelopSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method631 extends Method
	{
	/**
	 * Method -1 for compound task createLDDevelopSession
	 */
		public Method631(Domain owner)
		{
			super(owner, new Predicate(479, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(446) /*Develop*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(446) /*Develop*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(478, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDevelopSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method631Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDevelopSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition380 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition380(Domain owner, Term[] unifier)
		{
			p = new Precondition[10];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 11, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermConstant(139) /*very-easy*/, new TermList(owner.getTermConstant(138) /*easy*/, TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(125, 11, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(447) /*example*/, TermList.NIL))), owner.getTermVariable(6))), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(149, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(69, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[9] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(9), new TermList(owner.getTermConstant(17) /*inverseIsRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[10][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[9] == null)
			{
				boolean b8changed = false;
				while (b[8] == null)
				{
					boolean b7changed = false;
					while (b[7] == null)
					{
						boolean b6changed = false;
						while (b[6] == null)
						{
							boolean b5changed = false;
							while (b[5] == null)
							{
								boolean b4changed = false;
								while (b[4] == null)
								{
									boolean b3changed = false;
									while (b[3] == null)
									{
										boolean b2changed = false;
										while (b[2] == null)
										{
											boolean b1changed = false;
											while (b[1] == null)
											{
												b[1] = p[1].nextBinding(state);
												if (b[1] == null)
													return null;
												else
													bestMatch = Math.max(bestMatch, 1);
												b1changed = true;
											}
											if ( b1changed ) {
												p[2].reset(state);
												p[2].bind(Term.merge(b, 2));
											}
											b[2] = p[2].nextBinding(state);
											if (b[2] == null)
												b[1] = null;
											else
												bestMatch = Math.max(bestMatch, 2);
											b2changed = true;
										}
										if ( b2changed ) {
											p[3].reset(state);
											p[3].bind(Term.merge(b, 3));
										}
										b[3] = p[3].nextBinding(state);
										if (b[3] == null)
											b[2] = null;
										else
											bestMatch = Math.max(bestMatch, 3);
										b3changed = true;
									}
									if ( b3changed ) {
										p[4].reset(state);
										p[4].bind(Term.merge(b, 4));
									}
									b[4] = p[4].nextBinding(state);
									if (b[4] == null)
										b[3] = null;
									else
										bestMatch = Math.max(bestMatch, 4);
									b4changed = true;
								}
								if ( b4changed ) {
									p[5].reset(state);
									p[5].bind(Term.merge(b, 5));
								}
								b[5] = p[5].nextBinding(state);
								if (b[5] == null)
									b[4] = null;
								else
									bestMatch = Math.max(bestMatch, 5);
								b5changed = true;
							}
							if ( b5changed ) {
								p[6].reset(state);
								p[6].bind(Term.merge(b, 6));
							}
							b[6] = p[6].nextBinding(state);
							if (b[6] == null)
								b[5] = null;
							else
								bestMatch = Math.max(bestMatch, 6);
							b6changed = true;
						}
						if ( b6changed ) {
							p[7].reset(state);
							p[7].bind(Term.merge(b, 7));
						}
						b[7] = p[7].nextBinding(state);
						if (b[7] == null)
							b[6] = null;
						else
							bestMatch = Math.max(bestMatch, 7);
						b7changed = true;
					}
					if ( b7changed ) {
						p[8].reset(state);
						p[8].bind(Term.merge(b, 8));
					}
					b[8] = p[8].nextBinding(state);
					if (b[8] == null)
						b[7] = null;
					else
						bestMatch = Math.max(bestMatch, 8);
					b8changed = true;
				}
				if ( b8changed ) {
					p[9].reset(state);
					p[9].bind(Term.merge(b, 9));
				}
				b[9] = p[9].nextBinding(state);
				if (b[9] == null)
					b[8] = null;
				else
					bestMatch = Math.max(bestMatch, 9);
			}

			Term[] retVal = Term.merge(b, 10);
			b[9] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			p[9].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
			b[9] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDevelopSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDevelopSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method632 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopSession
	 */
		public Method632(Domain owner)
		{
			super(owner, new Predicate(478, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(480, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition380(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method632Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDevelopActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method633 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopActivity
	 */
		public Method633(Domain owner)
		{
			super(owner, new Predicate(480, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(481, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(482, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method633Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDevelopEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method634 extends Method
	{
	/**
	 * Method -1 for compound task createLDDevelopEnvironment
	 */
		public Method634(Domain owner)
		{
			super(owner, new Predicate(481, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(446) /*Develop*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(446) /*Develop*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDevelopEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method634Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDDevelopSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition381 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition381(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 4, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDDevelopSessionDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDDevelopSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method635 extends Method
	{
	/**
	 * Method -1 for compound task createLDDevelopSessionDescription
	 */
		public Method635(Domain owner)
		{
			super(owner, new Predicate(482, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(483, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDevelopSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition381(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method635Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDevelopSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method636 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopSessionDescription
	 */
		public Method636(Domain owner)
		{
			super(owner, new Predicate(483, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(484, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method636Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDevelopSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition382 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition382(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDevelopSessionDescription! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDevelopSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method637 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopSessionDescription!
	 */
		public Method637(Domain owner)
		{
			super(owner, new Predicate(484, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 5, new TermList(owner.getTermVariable(4), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition382(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method637Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDevelopSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition383 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition383(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 6, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(448) /*Knowledge*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(126) /*hasTitle*/, new TermList(owner.getTermVariable(4), TermList.NIL))), TermList.NIL))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDevelopSessionDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDevelopSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method638 extends Method
	{
	/**
	 * Method -1 for compound task createDevelopSessionDescription
	 */
		public Method638(Domain owner)
		{
			super(owner, new Predicate(483, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 6, new TermList(owner.getTermVariable(5), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDevelopSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition383(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method638Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIllustrateWithExampleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method639 extends Method
	{
	/**
	 * Method -1 for compound task createLDIllustrateWithExampleSession
	 */
		public Method639(Domain owner)
		{
			super(owner, new Predicate(486, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(449) /*Illustrate*/, new TermList(owner.getTermConstant(450) /*WithExample*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(449) /*Illustrate*/, new TermList(owner.getTermConstant(450) /*WithExample*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(485, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIllustrateWithExampleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method639Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIllustrateWithExampleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition384 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition384(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(176) /*hasMotivation*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(125, 10, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(447) /*example*/, TermList.NIL))), owner.getTermVariable(6))), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(149, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(71, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(17) /*inverseIsRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIllustrateWithExampleSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIllustrateWithExampleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method640 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateWithExampleSession
	 */
		public Method640(Domain owner)
		{
			super(owner, new Predicate(485, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(487, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateWithExampleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition384(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method640Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIllustrateWithExampleActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition385 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition385(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIllustrateWithExampleActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIllustrateWithExampleActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method641 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateWithExampleActivity
	 */
		public Method641(Domain owner)
		{
			super(owner, new Predicate(487, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(488, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(489, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateWithExampleActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition385(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method641Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIllustrateWithExampleEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method642 extends Method
	{
	/**
	 * Method -1 for compound task createLDIllustrateWithExampleEnvironment
	 */
		public Method642(Domain owner)
		{
			super(owner, new Predicate(488, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(449) /*Illustrate*/, new TermList(owner.getTermConstant(450) /*WithExample*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(449) /*Illustrate*/, new TermList(owner.getTermConstant(450) /*WithExample*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIllustrateWithExampleEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method642Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIllustrateWithExampleSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method643 extends Method
	{
	/**
	 * Method -1 for compound task createLDIllustrateWithExampleSessionDescription
	 */
		public Method643(Domain owner)
		{
			super(owner, new Predicate(489, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(490, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIllustrateWithExampleSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method643Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIllustrateWithExampleSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method644 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateWithExampleSessionDescription
	 */
		public Method644(Domain owner)
		{
			super(owner, new Predicate(490, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(491, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateWithExampleSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method644Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIllustrateWithExampleSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method645 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateWithExampleSessionDescription!
	 */
		public Method645(Domain owner)
		{
			super(owner, new Predicate(491, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateWithExampleSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(451) /*IllustrateWithExampleActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method645Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createIllustrateWithExampleSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method646 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateWithExampleSessionDescription
	 */
		public Method646(Domain owner)
		{
			super(owner, new Predicate(490, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateWithExampleSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(451) /*IllustrateWithExampleActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method646Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIllustrateWithExampleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method647 extends Method
	{
	/**
	 * Method -1 for compound task createLDIllustrateWithExampleSession
	 */
		public Method647(Domain owner)
		{
			super(owner, new Predicate(486, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(449) /*Illustrate*/, new TermList(owner.getTermConstant(450) /*WithExample*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(449) /*Illustrate*/, new TermList(owner.getTermConstant(450) /*WithExample*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(485, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIllustrateWithExampleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method647Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIllustrateWithExampleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition386 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition386(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(125, 11, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(447) /*example*/, TermList.NIL))), owner.getTermVariable(7))), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(149, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(17) /*inverseIsRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIllustrateWithExampleSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIllustrateWithExampleSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method648 extends Method
	{
	/**
	 * Method -1 for compound task createIllustrateWithExampleSession
	 */
		public Method648(Domain owner)
		{
			super(owner, new Predicate(485, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(487, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIllustrateWithExampleSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition386(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method648Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMotivationSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method649 extends Method
	{
	/**
	 * Method -1 for compound task createLDMotivationSession
	 */
		public Method649(Domain owner)
		{
			super(owner, new Predicate(493, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(452) /*Motivation*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(452) /*Motivation*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(492, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMotivationSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method649Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createMotivationSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition387 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition387(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(125, 8, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(131) /*hasDifficult*/, new TermList(new TermList(owner.getTermConstant(139) /*very-easy*/, new TermList(owner.getTermConstant(138) /*easy*/, TermList.NIL)), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(453) /*exercise*/, TermList.NIL))), owner.getTermVariable(5)))), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(149, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createMotivationSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createMotivationSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method650 extends Method
	{
	/**
	 * Method -1 for compound task createMotivationSession
	 */
		public Method650(Domain owner)
		{
			super(owner, new Predicate(492, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(494, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMotivationSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition387(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method650Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMotivationActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method651 extends Method
	{
	/**
	 * Method -1 for compound task createMotivationActivity
	 */
		public Method651(Domain owner)
		{
			super(owner, new Predicate(494, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(495, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(496, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMotivationActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method651Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMotivationEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method652 extends Method
	{
	/**
	 * Method -1 for compound task createLDMotivationEnvironment
	 */
		public Method652(Domain owner)
		{
			super(owner, new Predicate(495, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(452) /*Motivation*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(452) /*Motivation*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(497, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMotivationEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method652Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMotivationEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method653 extends Method
	{
	/**
	 * Method -1 for compound task createMotivationEnvironment
	 */
		public Method653(Domain owner)
		{
			super(owner, new Predicate(497, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(22, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMotivationEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method653Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDMotivationSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method654 extends Method
	{
	/**
	 * Method -1 for compound task createLDMotivationSessionDescription
	 */
		public Method654(Domain owner)
		{
			super(owner, new Predicate(496, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(498, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDMotivationSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method654Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMotivationSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method655 extends Method
	{
	/**
	 * Method -1 for compound task createMotivationSessionDescription
	 */
		public Method655(Domain owner)
		{
			super(owner, new Predicate(498, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(499, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMotivationSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method655Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMotivationSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method656 extends Method
	{
	/**
	 * Method -1 for compound task createMotivationSessionDescription!
	 */
		public Method656(Domain owner)
		{
			super(owner, new Predicate(499, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMotivationSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(454) /*MotivationActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method656Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createMotivationSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method657 extends Method
	{
	/**
	 * Method -1 for compound task createMotivationSessionDescription
	 */
		public Method657(Domain owner)
		{
			super(owner, new Predicate(498, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createMotivationSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(454) /*MotivationActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method657Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method658 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 */
		public Method658(Domain owner)
		{
			super(owner, new Predicate(501, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(500, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method658Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPracticeWithExerciseSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition388 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition388(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 9, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(456) /*PracticeSession*/, TermList.NIL)), TermList.NIL))), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPracticeWithExerciseSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method659 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession!
	 */
		public Method659(Domain owner)
		{
			super(owner, new Predicate(500, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(9, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(8), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(6), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(456) /*PracticeSession*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL))), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(6, 9, new TermList(new TermList(owner.getTermConstant(453) /*exercise*/, TermList.NIL), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 9, new TermList(new TermList(owner.getTermConstant(456) /*PracticeSession*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(2, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(502, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(6), TermList.NIL))), false, true));
			retVal.subtasks[8] = new TaskList(new TaskAtom(new Predicate(3, 9, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition388(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method659Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method660 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 */
		public Method660(Domain owner)
		{
			super(owner, new Predicate(501, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(502, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method660Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition389 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition389(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(176) /*hasMotivation*/, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(125, 10, new TermList(owner.getTermVariable(7), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(453) /*exercise*/, TermList.NIL))), owner.getTermVariable(6))), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(149, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(71, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(17) /*inverseIsRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPracticeWithExerciseSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method661 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseSession
	 */
		public Method661(Domain owner)
		{
			super(owner, new Predicate(502, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(503, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition389(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method661Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method662 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseActivity
	 */
		public Method662(Domain owner)
		{
			super(owner, new Predicate(503, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(504, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method662Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPracticeWithExerciseActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition390 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition390(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(376) /*UoL*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPracticeWithExerciseActivity! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseActivity!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method663 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseActivity!
	 */
		public Method663(Domain owner)
		{
			super(owner, new Predicate(504, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(330, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseActivity! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition390(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method663Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPracticeWithExerciseActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition391 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition391(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 3, new TermList(owner.getTermConstant(386) /*Session*/, new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPracticeWithExerciseActivity [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method664 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseActivity
	 */
		public Method664(Domain owner)
		{
			super(owner, new Predicate(503, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(505, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(506, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition391(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method664Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method665 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseEnvironment
	 */
		public Method665(Domain owner)
		{
			super(owner, new Predicate(505, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL))), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL))), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method665Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method666 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSessionDescription
	 */
		public Method666(Domain owner)
		{
			super(owner, new Predicate(506, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(507, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method666Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method667 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseSessionDescription
	 */
		public Method667(Domain owner)
		{
			super(owner, new Predicate(507, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(508, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method667Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method668 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseSessionDescription!
	 */
		public Method668(Domain owner)
		{
			super(owner, new Predicate(508, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(458) /*PracticeWithExerciseActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method668Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method669 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseSessionDescription
	 */
		public Method669(Domain owner)
		{
			super(owner, new Predicate(507, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(458) /*PracticeWithExerciseActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method669Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method670 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 */
		public Method670(Domain owner)
		{
			super(owner, new Predicate(501, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(500, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method670Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDPracticeWithExerciseSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition392 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition392(Domain owner, Term[] unifier)
		{
			p = new Precondition[8];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 10, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 10, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(190) /*hasCurrentUoL*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 10, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(191) /*hasAttitude*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(456) /*PracticeSession*/, TermList.NIL)), TermList.NIL))), new TermList(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(69, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(69, 10, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[8][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[7] == null)
			{
				boolean b6changed = false;
				while (b[6] == null)
				{
					boolean b5changed = false;
					while (b[5] == null)
					{
						boolean b4changed = false;
						while (b[4] == null)
						{
							boolean b3changed = false;
							while (b[3] == null)
							{
								boolean b2changed = false;
								while (b[2] == null)
								{
									boolean b1changed = false;
									while (b[1] == null)
									{
										b[1] = p[1].nextBinding(state);
										if (b[1] == null)
											return null;
										else
											bestMatch = Math.max(bestMatch, 1);
										b1changed = true;
									}
									if ( b1changed ) {
										p[2].reset(state);
										p[2].bind(Term.merge(b, 2));
									}
									b[2] = p[2].nextBinding(state);
									if (b[2] == null)
										b[1] = null;
									else
										bestMatch = Math.max(bestMatch, 2);
									b2changed = true;
								}
								if ( b2changed ) {
									p[3].reset(state);
									p[3].bind(Term.merge(b, 3));
								}
								b[3] = p[3].nextBinding(state);
								if (b[3] == null)
									b[2] = null;
								else
									bestMatch = Math.max(bestMatch, 3);
								b3changed = true;
							}
							if ( b3changed ) {
								p[4].reset(state);
								p[4].bind(Term.merge(b, 4));
							}
							b[4] = p[4].nextBinding(state);
							if (b[4] == null)
								b[3] = null;
							else
								bestMatch = Math.max(bestMatch, 4);
							b4changed = true;
						}
						if ( b4changed ) {
							p[5].reset(state);
							p[5].bind(Term.merge(b, 5));
						}
						b[5] = p[5].nextBinding(state);
						if (b[5] == null)
							b[4] = null;
						else
							bestMatch = Math.max(bestMatch, 5);
						b5changed = true;
					}
					if ( b5changed ) {
						p[6].reset(state);
						p[6].bind(Term.merge(b, 6));
					}
					b[6] = p[6].nextBinding(state);
					if (b[6] == null)
						b[5] = null;
					else
						bestMatch = Math.max(bestMatch, 6);
					b6changed = true;
				}
				if ( b6changed ) {
					p[7].reset(state);
					p[7].bind(Term.merge(b, 7));
				}
				b[7] = p[7].nextBinding(state);
				if (b[7] == null)
					b[6] = null;
				else
					bestMatch = Math.max(bestMatch, 7);
			}

			Term[] retVal = Term.merge(b, 8);
			b[7] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDPracticeWithExerciseSession! [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method671 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession!
	 */
		public Method671(Domain owner)
		{
			super(owner, new Predicate(500, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(9, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 10, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 10, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(9), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(7), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(456) /*PracticeSession*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL))), new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(6, 10, new TermList(new TermList(owner.getTermConstant(453) /*exercise*/, TermList.NIL), TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(8, 10, new TermList(new TermList(owner.getTermConstant(456) /*PracticeSession*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL))), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(2, 10, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(502, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));
			retVal.subtasks[6] = new TaskList(new TaskAtom(new Predicate(3, 10, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[7] = new TaskList(new TaskAtom(new Predicate(3, 10, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(7), TermList.NIL))), false, true));
			retVal.subtasks[8] = new TaskList(new TaskAtom(new Predicate(3, 10, new TermList(owner.getTermConstant(379) /*unit-of-learning-href*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSession! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition392(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method671Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method672 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeWithExerciseSession
	 */
		public Method672(Domain owner)
		{
			super(owner, new Predicate(501, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(0, 4, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(455) /*WithExercise*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL))), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(502, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeWithExerciseSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method672Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition393 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition393(Domain owner, Term[] unifier)
		{
			p = new Precondition[9];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 11, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 11, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(128, 11, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(107, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(125, 11, new TermList(owner.getTermVariable(8), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(453) /*exercise*/, TermList.NIL))), owner.getTermVariable(7))), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[7] = new PreconditionAtomic(new Predicate(149, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[8] = new PreconditionAtomic(new Predicate(71, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(8), new TermList(owner.getTermConstant(17) /*inverseIsRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[9][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[8] == null)
			{
				boolean b7changed = false;
				while (b[7] == null)
				{
					boolean b6changed = false;
					while (b[6] == null)
					{
						boolean b5changed = false;
						while (b[5] == null)
						{
							boolean b4changed = false;
							while (b[4] == null)
							{
								boolean b3changed = false;
								while (b[3] == null)
								{
									boolean b2changed = false;
									while (b[2] == null)
									{
										boolean b1changed = false;
										while (b[1] == null)
										{
											b[1] = p[1].nextBinding(state);
											if (b[1] == null)
												return null;
											else
												bestMatch = Math.max(bestMatch, 1);
											b1changed = true;
										}
										if ( b1changed ) {
											p[2].reset(state);
											p[2].bind(Term.merge(b, 2));
										}
										b[2] = p[2].nextBinding(state);
										if (b[2] == null)
											b[1] = null;
										else
											bestMatch = Math.max(bestMatch, 2);
										b2changed = true;
									}
									if ( b2changed ) {
										p[3].reset(state);
										p[3].bind(Term.merge(b, 3));
									}
									b[3] = p[3].nextBinding(state);
									if (b[3] == null)
										b[2] = null;
									else
										bestMatch = Math.max(bestMatch, 3);
									b3changed = true;
								}
								if ( b3changed ) {
									p[4].reset(state);
									p[4].bind(Term.merge(b, 4));
								}
								b[4] = p[4].nextBinding(state);
								if (b[4] == null)
									b[3] = null;
								else
									bestMatch = Math.max(bestMatch, 4);
								b4changed = true;
							}
							if ( b4changed ) {
								p[5].reset(state);
								p[5].bind(Term.merge(b, 5));
							}
							b[5] = p[5].nextBinding(state);
							if (b[5] == null)
								b[4] = null;
							else
								bestMatch = Math.max(bestMatch, 5);
							b5changed = true;
						}
						if ( b5changed ) {
							p[6].reset(state);
							p[6].bind(Term.merge(b, 6));
						}
						b[6] = p[6].nextBinding(state);
						if (b[6] == null)
							b[5] = null;
						else
							bestMatch = Math.max(bestMatch, 6);
						b6changed = true;
					}
					if ( b6changed ) {
						p[7].reset(state);
						p[7].bind(Term.merge(b, 7));
					}
					b[7] = p[7].nextBinding(state);
					if (b[7] == null)
						b[6] = null;
					else
						bestMatch = Math.max(bestMatch, 7);
					b7changed = true;
				}
				if ( b7changed ) {
					p[8].reset(state);
					p[8].bind(Term.merge(b, 8));
				}
				b[8] = p[8].nextBinding(state);
				if (b[8] == null)
					b[7] = null;
				else
					bestMatch = Math.max(bestMatch, 8);
			}

			Term[] retVal = Term.merge(b, 9);
			b[8] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			p[7].reset(state);
			p[8].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
			b[7] = null;
			b[8] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPracticeWithExerciseSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPracticeWithExerciseSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method673 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeWithExerciseSession
	 */
		public Method673(Domain owner)
		{
			super(owner, new Predicate(502, 11, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(327, 11, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(503, 11, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeWithExerciseSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition393(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method673Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowProblemSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method674 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowProblemSession
	 */
		public Method674(Domain owner)
		{
			super(owner, new Predicate(510, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(459) /*ShowProblem*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(459) /*ShowProblem*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(509, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowProblemSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method674Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowProblemSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition394 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition394(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(125, 8, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(owner.getTermConstant(460) /*real-world-problem*/, TermList.NIL))), owner.getTermVariable(5))), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(149, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowProblemSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowProblemSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method675 extends Method
	{
	/**
	 * Method -1 for compound task createShowProblemSession
	 */
		public Method675(Domain owner)
		{
			super(owner, new Predicate(509, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(511, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProblemSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition394(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method675Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProblemActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method676 extends Method
	{
	/**
	 * Method -1 for compound task createShowProblemActivity
	 */
		public Method676(Domain owner)
		{
			super(owner, new Predicate(511, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(512, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(513, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProblemActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method676Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowProblemEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method677 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowProblemEnvironment
	 */
		public Method677(Domain owner)
		{
			super(owner, new Predicate(512, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(459) /*ShowProblem*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(459) /*ShowProblem*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(20, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowProblemEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method677Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowProblemSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method678 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowProblemSessionDescription
	 */
		public Method678(Domain owner)
		{
			super(owner, new Predicate(513, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(514, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowProblemSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method678Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProblemSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method679 extends Method
	{
	/**
	 * Method -1 for compound task createShowProblemSessionDescription
	 */
		public Method679(Domain owner)
		{
			super(owner, new Predicate(514, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(515, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProblemSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method679Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProblemSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method680 extends Method
	{
	/**
	 * Method -1 for compound task createShowProblemSessionDescription!
	 */
		public Method680(Domain owner)
		{
			super(owner, new Predicate(515, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProblemSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(461) /*ShowProblemActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method680Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProblemSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method681 extends Method
	{
	/**
	 * Method -1 for compound task createShowProblemSessionDescription
	 */
		public Method681(Domain owner)
		{
			super(owner, new Predicate(514, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProblemSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(461) /*ShowProblemActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method681Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowProofSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method682 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowProofSession
	 */
		public Method682(Domain owner)
		{
			super(owner, new Predicate(517, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(462) /*ShowProof*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(462) /*ShowProof*/, new TermList(owner.getTermConstant(386) /*Session*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(516, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(258) /*learning-activity*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(257) /*learning-activity-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowProofSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(256) /*la*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method682Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowProofSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition395 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition395(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(142, 8, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(144, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(107, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(125, 8, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, new TermList(new TermList(owner.getTermConstant(463) /*evidence*/, new TermList(owner.getTermConstant(464) /*proof*/, new TermList(owner.getTermConstant(465) /*demonstration*/, TermList.NIL))), TermList.NIL))), owner.getTermVariable(5))), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[6] = new PreconditionAtomic(new Predicate(149, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowProofSession [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowProofSession
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method683 extends Method
	{
	/**
	 * Method -1 for compound task createShowProofSession
	 */
		public Method683(Domain owner)
		{
			super(owner, new Predicate(516, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(518, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProofSession [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition395(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method683Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProofActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method684 extends Method
	{
	/**
	 * Method -1 for compound task createShowProofActivity
	 */
		public Method684(Domain owner)
		{
			super(owner, new Predicate(518, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(519, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(520, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProofActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method684Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowProofEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method685 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowProofEnvironment
	 */
		public Method685(Domain owner)
		{
			super(owner, new Predicate(519, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(462) /*ShowProof*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(462) /*ShowProof*/, new TermList(owner.getTermConstant(241) /*Environment*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(521, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(240) /*environment*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(239) /*environment-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowProofEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(238) /*env*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method685Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProofEnvironment
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method686 extends Method
	{
	/**
	 * Method -1 for compound task createShowProofEnvironment
	 */
		public Method686(Domain owner)
		{
			super(owner, new Predicate(521, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(22, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProofEnvironment [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method686Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDShowProofSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method687 extends Method
	{
	/**
	 * Method -1 for compound task createLDShowProofSessionDescription
	 */
		public Method687(Domain owner)
		{
			super(owner, new Predicate(520, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(522, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(3, 2, new TermList(owner.getTermConstant(263) /*activity-description*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDShowProofSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method687Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProofSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method688 extends Method
	{
	/**
	 * Method -1 for compound task createShowProofSessionDescription
	 */
		public Method688(Domain owner)
		{
			super(owner, new Predicate(522, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(523, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProofSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method688Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createShowProofSessionDescription!
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method689 extends Method
	{
	/**
	 * Method -1 for compound task createShowProofSessionDescription!
	 */
		public Method689(Domain owner)
		{
			super(owner, new Predicate(523, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 3, new TermList(owner.getTermVariable(2), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProofSessionDescription! [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(59, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(466) /*ShowProofActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method689Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createShowProofSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition396 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition396(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(466) /*ShowProofActivity*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(391) /*SessionDescription*/, TermList.NIL)), TermList.NIL)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createShowProofSessionDescription [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createShowProofSessionDescription
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method690 extends Method
	{
	/**
	 * Method -1 for compound task createShowProofSessionDescription
	 */
		public Method690(Domain owner)
		{
			super(owner, new Predicate(522, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(18, 5, new TermList(owner.getTermVariable(4), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createShowProofSessionDescription [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition396(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method690Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscoverGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method691 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscoverGroupActivity
	 */
		public Method691(Domain owner)
		{
			super(owner, new Predicate(525, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(467) /*Discover*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(467) /*Discover*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(524, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscoverGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method691Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createDiscoverGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method692 extends Method
	{
	/**
	 * Method -1 for compound task createDiscoverGroupActivity
	 */
		public Method692(Domain owner)
		{
			super(owner, new Predicate(524, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(526, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscoverGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method692Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscoverSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method693 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscoverSessions
	 */
		public Method693(Domain owner)
		{
			super(owner, new Predicate(526, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(467) /*Discover*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(467) /*Discover*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(527, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscoverSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method693Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #3 of Precondition #0 of Method -1 for compound task createDiscoverSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition397 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition397(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermConstant(468) /*law*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermConstant(469) /*theorem*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermConstant(470) /*law-of-nature*/, new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition #0 of Method -1 for compound task createDiscoverSessions [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscoverSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition398 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition398(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition397(owner, unifier) /*Conjunct 4 of Precondition #0 of Method -1 for compound task createDiscoverSessions*/;
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscoverSessions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscoverSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method694 extends Method
	{
	/**
	 * Method -1 for compound task createDiscoverSessions
	 */
		public Method694(Domain owner)
		{
			super(owner, new Predicate(527, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(528, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(479, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(517, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(501, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(138) /*easy*/, new TermList(owner.getTermConstant(139) /*very-easy*/, TermList.NIL)), TermList.NIL)))), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(528, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(479, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(501, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(138) /*easy*/, new TermList(owner.getTermConstant(139) /*very-easy*/, TermList.NIL)), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscoverSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition398(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(5)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method694Branch0";
				case 1: return "Method694Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method695 extends Method
	{
	/**
	 * Method -1 for compound task createLDIntroductionSessions
	 */
		public Method695(Domain owner)
		{
			super(owner, new Predicate(528, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, new TermList(new TermList(new TermList(owner.getTermConstant(218) /*ref*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), TermList.NIL))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(299) /*structure-type*/, new TermList(owner.getTermConstant(306) /*sequence*/, TermList.NIL)), TermList.NIL)), new TermList(new TermList(new TermList(owner.getTermConstant(471) /*Introduction*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(471) /*Introduction*/, new TermList(owner.getTermConstant(397) /*Sessions*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(529, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(298) /*activity-structure*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(297) /*activity-structure-ref*/, TermList.NIL)), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDIntroductionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(296) /*as*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method695Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition399 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition399(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 2);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(46, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(177) /*hasAnxiety*/, new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermConstant(132) /*very-high*/, new TermList(owner.getTermConstant(133) /*high*/, TermList.NIL)), TermList.NIL)))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[5] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createIntroductionSessions [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createIntroductionSessions
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method696 extends Method
	{
	/**
	 * Method -1 for compound task createIntroductionSessions
	 */
		public Method696(Domain owner)
		{
			super(owner, new Predicate(529, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = createTaskList0();
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(510, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(486, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(132) /*very-high*/, new TermList(owner.getTermConstant(133) /*high*/, TermList.NIL)), TermList.NIL)))), false, false));

			return retVal;
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(493, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(510, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(486, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(136) /*medium*/, TermList.NIL), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createIntroductionSessions [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition399(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(7)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method696Branch0";
				case 1: return "Method696Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticeGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method697 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticeGroupActivity
	 */
		public Method697(Domain owner)
		{
			super(owner, new Predicate(531, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(0, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(408) /*GroupActivity*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(530, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(344) /*role-part*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticeGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(343) /*rp*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method697Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createPracticeGroupActivity
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method698 extends Method
	{
	/**
	 * Method -1 for compound task createPracticeGroupActivity
	 */
		public Method698(Domain owner)
		{
			super(owner, new Predicate(530, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(24, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(501, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticeGroupActivity [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method698Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDDiscoverPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method699 extends Method
	{
	/**
	 * Method -1 for compound task createLDDiscoverPhase
	 */
		public Method699(Domain owner)
		{
			super(owner, new Predicate(533, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(467) /*Discover*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(467) /*Discover*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(532, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDDiscoverPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method699Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createDiscoverPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition400 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition400(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(155, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createDiscoverPhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createDiscoverPhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method700 extends Method
	{
	/**
	 * Method -1 for compound task createDiscoverPhase
	 */
		public Method700(Domain owner)
		{
			super(owner, new Predicate(532, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(534, 4, new TermList(owner.getTermVariable(3), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createDiscoverPhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition400(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method700Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeDiscoverGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method701 extends Method
	{
	/**
	 * Method -1 for compound task distributeDiscoverGroupActivityByCLGroups
	 */
		public Method701(Domain owner)
		{
			super(owner, new Predicate(534, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDiscoverGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method701Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeDiscoverGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition401 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition401(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(172, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(175, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeDiscoverGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeDiscoverGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method702 extends Method
	{
	/**
	 * Method -1 for compound task distributeDiscoverGroupActivityByCLGroups
	 */
		public Method702(Domain owner)
		{
			super(owner, new Predicate(534, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(525, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(534, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeDiscoverGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition401(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method702Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createLDPracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method703 extends Method
	{
	/**
	 * Method -1 for compound task createLDPracticePhase
	 */
		public Method703(Domain owner)
		{
			super(owner, new Predicate(536, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(4, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 3, new TermList(new TermList(owner.getTermConstant(457) /*Practice*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(535, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(3, 3, new TermList(owner.getTermConstant(355) /*act*/, new TermList(owner.getTermVariable(2), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDPracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(355) /*act*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method703Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createPracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition402 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition402(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(155, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateGetCLGrouping, "((domain)owner).calculateGetCLGrouping"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createPracticePhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createPracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method704 extends Method
	{
	/**
	 * Method -1 for compound task createPracticePhase
	 */
		public Method704(Domain owner)
		{
			super(owner, new Predicate(535, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(537, 4, new TermList(owner.getTermVariable(3), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createPracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition402(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method704Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributePracticeGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method705 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticeGroupActivityByCLGroups
	 */
		public Method705(Domain owner)
		{
			super(owner, new Predicate(537, 0, new TermList(TermList.NIL, TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticeGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method705Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributePracticeGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition403 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition403(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(172, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(175, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributePracticeGroupActivityByCLGroups [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributePracticeGroupActivityByCLGroups
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method706 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticeGroupActivityByCLGroups
	 */
		public Method706(Domain owner)
		{
			super(owner, new Predicate(537, 4, new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL)));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(3, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(12, 4, new TermList(owner.getTermVariable(0), TermList.NIL)), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(531, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(537, 4, new TermList(owner.getTermVariable(1), TermList.NIL)), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticeGroupActivityByCLGroups [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition403(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method706Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition404 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition404(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(358) /*Fundamental*/, TermList.NIL)), TermList.NIL)), new TermList(new TermCall(new List(new TermCall(new List(owner.getTermConstant(378) /*ld*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), TermList.NIL)), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(245) /*hasResource*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(200) /*hasHref*/, TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFundamentalUoL [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method707 extends Method
	{
	/**
	 * Method -1 for compound task createLDFundamentalUoL
	 */
		public Method707(Domain owner)
		{
			super(owner, new Predicate(539, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(6, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(new TermList(new TermList(owner.getTermConstant(381) /*uri*/, new TermList(owner.getTermVariable(6), TermList.NIL)), new TermList(new TermList(owner.getTermConstant(382) /*level*/, new TermList(owner.getTermConstant(383) /*B*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), new TermList(new TermList(new TermList(owner.getTermConstant(358) /*Fundamental*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(8, 7, new TermList(new TermList(owner.getTermConstant(358) /*Fundamental*/, new TermList(owner.getTermConstant(376) /*UoL*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(2, 7, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(538, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 7, new TermList(owner.getTermConstant(384) /*method*/, TermList.NIL)), false, true));
			retVal.subtasks[5] = new TaskList(new TaskAtom(new Predicate(3, 7, new TermList(owner.getTermConstant(380) /*learning-design*/, new TermList(owner.getTermVariable(4), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFundamentalUoL [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition404(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method707Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition405 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition405(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(141, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(100, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(16) /*isRequiredBy*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createFundamentalUoL [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createFundamentalUoL
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method708 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalUoL
	 */
		public Method708(Domain owner)
		{
			super(owner, new Predicate(538, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(1, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(540, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalUoL [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition405(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method708Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method709 extends Method
	{
	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 */
		public Method709(Domain owner)
		{
			super(owner, new Predicate(540, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = TaskList.empty;

			setSubs(subsIn);
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeFundamentalScriptByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method709Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributeFundamentalScriptByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition406 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition406(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(161, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(166, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributeFundamentalScriptByComps [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method710 extends Method
	{
	/**
	 * Method -1 for compound task distributeFundamentalScriptByComps
	 */
		public Method710(Domain owner)
		{
			super(owner, new Predicate(540, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), TermList.NIL)))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(541, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(540, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributeFundamentalScriptByComps [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition406(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method710Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task createLDFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition407 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition407(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(142, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermConstant(357) /*play*/, TermList.NIL), ((domain)owner).calculateGetUUID, "((domain)owner).calculateGetUUID"), unifier, 3);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task createLDFundamentalScript [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task createLDFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method711 extends Method
	{
	/**
	 * Method -1 for compound task createLDFundamentalScript
	 */
		public Method711(Domain owner)
		{
			super(owner, new Predicate(541, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(5, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(2, 4, new TermList(owner.getTermConstant(357) /*play*/, new TermList(new TermList(new TermList(owner.getTermConstant(221) /*identifier*/, new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL), new TermList(new TermList(new TermList(owner.getTermConstant(358) /*Fundamental*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)))), TermList.NIL)))), false, true));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(7, 4, new TermList(owner.getTermVariable(2), TermList.NIL)), false, true));
			retVal.subtasks[2] = new TaskList(new TaskAtom(new Predicate(8, 4, new TermList(new TermList(owner.getTermConstant(358) /*Fundamental*/, new TermList(owner.getTermConstant(387) /*Script*/, TermList.NIL)), new TermList(owner.getTermVariable(0), TermList.NIL))), false, false));
			retVal.subtasks[3] = new TaskList(new TaskAtom(new Predicate(542, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[4] = new TaskList(new TaskAtom(new Predicate(3, 4, new TermList(owner.getTermConstant(357) /*play*/, new TermList(owner.getTermVariable(3), TermList.NIL))), false, true));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createLDFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition407(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method711Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Method -1 for compound task createFundamentalScript
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method712 extends Method
	{
	/**
	 * Method -1 for compound task createFundamentalScript
	 */
		public Method712(Domain owner)
		{
			super(owner, new Predicate(542, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[1];

			subsIn[0] = createTaskList0();

			setSubs(subsIn);
		}

		TaskList createTaskList0()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(533, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(543, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task createFundamentalScript [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method712Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #3 of Precondition #0 of Method -1 for compound task distributePracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition408 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition408(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new PreconditionAtomic(new Predicate(169, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);

			p[1] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition #0 of Method -1 for compound task distributePracticePhase [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition #0 of Method -1 for compound task distributePracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition409 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition409(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(2), TermList.NIL), new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(356) /*Phase*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(457) /*Practice*/, TermList.NIL)), TermList.NIL)), TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition408(owner, unifier) /*Conjunct 4 of Precondition #0 of Method -1 for compound task distributePracticePhase*/;
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition #0 of Method -1 for compound task distributePracticePhase [unknown source pos]";
		}
	}

	/**
	 * Method -1 for compound task distributePracticePhase
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalMethod)
	 */
	public static class Method713 extends Method
	{
	/**
	 * Method -1 for compound task distributePracticePhase
	 */
		public Method713(Domain owner)
		{
			super(owner, new Predicate(543, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))));
			TaskList[] subsIn = new TaskList[2];

			subsIn[0] = TaskList.empty;
			subsIn[1] = createTaskList1();

			setSubs(subsIn);
		}

		TaskList createTaskList1()
		{
			TaskList retVal;

			retVal = new TaskList(2, true);
			retVal.subtasks[0] = new TaskList(new TaskAtom(new Predicate(536, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));
			retVal.subtasks[1] = new TaskList(new TaskAtom(new Predicate(543, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), false, false));

			return retVal;
		}

		@Override
		public String toString()
		{
			return "Method -1 for compound task distributePracticePhase [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition409(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionNil(5)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public int getApplicability(State state, Term[] unifier, int which) {
			int toReturn = 0;
			Precondition p;
			switch(which) {
				case 0:
				break;
				case 1:
				break;
			}
			return toReturn;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Method713Branch0";
				case 1: return "Method713Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom same
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom0 extends Axiom
{
	/**
	 * Branch -1 for axiom same
	 */
		public Axiom0(Domain owner)
		{
			super(owner, new Predicate(0, 1, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(0), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom same [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom0Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom different
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom1 extends Axiom
{
	/**
	 * Branch -1 for axiom different
	 */
		public Axiom1(Domain owner)
		{
			super(owner, new Predicate(1, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom different [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNegation(new PreconditionAtomic(new Predicate(0, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), 2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom1Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom first
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom2 extends Axiom
{
	/**
	 * Branch -1 for axiom first
	 */
		public Axiom2(Domain owner)
		{
			super(owner, new Predicate(2, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom first [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom2Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom last
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom3 extends Axiom
{
	/**
	 * Branch -1 for axiom last
	 */
		public Axiom3(Domain owner)
		{
			super(owner, new Predicate(3, 1, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom last [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom3Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom last
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom4 extends Axiom
{
	/**
	 * Branch -1 for axiom last
	 */
		public Axiom4(Domain owner)
		{
			super(owner, new Predicate(3, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom last [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(3, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom4Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom rest
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom5 extends Axiom
{
	/**
	 * Branch -1 for axiom rest
	 */
		public Axiom5(Domain owner)
		{
			super(owner, new Predicate(4, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(0)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom rest [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom5Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom length
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom6 extends Axiom
{
	/**
	 * Branch -1 for axiom length
	 */
		public Axiom6(Domain owner)
		{
			super(owner, new Predicate(5, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom length [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateLength, "((domain)owner).calculateLength"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom6Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom exist
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom7 extends Axiom
{
	/**
	 * Branch -1 for axiom exist
	 */
		public Axiom7(Domain owner)
		{
			super(owner, new Predicate(6, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom exist [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom7Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom exist
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom8 extends Axiom
{
	/**
	 * Branch -1 for axiom exist
	 */
		public Axiom8(Domain owner)
		{
			super(owner, new Predicate(6, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom exist [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom8Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom assignIterator
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom9 extends Axiom
{
	/**
	 * Branch -1 for axiom assignIterator
	 */
		public Axiom9(Domain owner)
		{
			super(owner, new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom assignIterator [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom9Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom assignIterator
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom10 extends Axiom
{
	/**
	 * Branch -1 for axiom assignIterator
	 */
		public Axiom10(Domain owner)
		{
			super(owner, new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom assignIterator [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom10Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom remove
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom11 extends Axiom
{
	/**
	 * Branch -1 for axiom remove
	 */
		public Axiom11(Domain owner)
		{
			super(owner, new Predicate(8, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom remove [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateRemove, "((domain)owner).calculateRemove"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom11Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom divide
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom12 extends Axiom
{
	/**
	 * Branch -1 for axiom divide
	 */
		public Axiom12(Domain owner)
		{
			super(owner, new Predicate(9, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom divide [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateDivideList, "((domain)owner).calculateDivideList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom12Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom13 extends Axiom
{
	/**
	 * Branch -1 for axiom duplicate
	 */
		public Axiom13(Domain owner)
		{
			super(owner, new Predicate(10, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom duplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(1), TermList.NIL)), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom13Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom14 extends Axiom
{
	/**
	 * Branch -1 for axiom duplicate
	 */
		public Axiom14(Domain owner)
		{
			super(owner, new Predicate(10, 1, new TermList(new TermList(owner.getTermVariable(0), TermList.NIL), new TermList(owner.getTermVariable(0), new TermList(new TermNumber(1.0), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom duplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom14Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition0 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition0(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(10, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(new TermCall(new List(owner.getTermVariable(2), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom duplicate [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom duplicate
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom15 extends Axiom
{
	/**
	 * Branch -1 for axiom duplicate
	 */
		public Axiom15(Domain owner)
		{
			super(owner, new Predicate(10, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom duplicate [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition0(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom15Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublistH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom16 extends Axiom
{
	/**
	 * Branch -1 for axiom sublistH
	 */
		public Axiom16(Domain owner)
		{
			super(owner, new Predicate(11, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermNumber(0.0), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublistH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom16Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublistH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom17 extends Axiom
{
	/**
	 * Branch -1 for axiom sublistH
	 */
		public Axiom17(Domain owner)
		{
			super(owner, new Predicate(11, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublistH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom17Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublistH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom18 extends Axiom
{
	/**
	 * Branch -1 for axiom sublistH
	 */
		public Axiom18(Domain owner)
		{
			super(owner, new Predicate(11, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublistH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(11, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom18Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sublist
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom19 extends Axiom
{
	/**
	 * Branch -1 for axiom sublist
	 */
		public Axiom19(Domain owner)
		{
			super(owner, new Predicate(12, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sublist [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(11, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom19Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom inverseOf
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom20 extends Axiom
{
	/**
	 * Branch -1 for axiom inverseOf
	 */
		public Axiom20(Domain owner)
		{
			super(owner, new Predicate(15, 0, new TermList(owner.getTermConstant(13) /*isPartOf*/, new TermList(owner.getTermConstant(14) /*inverseIsPartOf*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom inverseOf [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom20Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom inverseOf
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom21 extends Axiom
{
	/**
	 * Branch -1 for axiom inverseOf
	 */
		public Axiom21(Domain owner)
		{
			super(owner, new Predicate(15, 0, new TermList(owner.getTermConstant(16) /*isRequiredBy*/, new TermList(owner.getTermConstant(17) /*inverseIsRequiredBy*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom inverseOf [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom21Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom inverseOf
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom22 extends Axiom
{
	/**
	 * Branch -1 for axiom inverseOf
	 */
		public Axiom22(Domain owner)
		{
			super(owner, new Predicate(15, 0, new TermList(owner.getTermConstant(18) /*isVariantOf*/, new TermList(owner.getTermConstant(19) /*inverseIsVariantOf*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom inverseOf [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom22Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom23 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom23(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(20) /*s0k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom23Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom24 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom24(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(22) /*s0k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom24Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom25 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom25(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(23) /*s0k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom25Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom26 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom26(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(24) /*s0k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom26Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom27 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom27(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(25) /*s1k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom27Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom28 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom28(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(26) /*s1k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom28Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom29 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom29(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(27) /*s1k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom29Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom30 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom30(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(28) /*s1k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom30Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom31 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom31(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(29) /*s2k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom31Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom32 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom32(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(30) /*s2k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom32Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom33 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom33(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(31) /*s2k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom33Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom34 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom34(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(32) /*s2k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom34Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom35 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom35(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(33) /*s3k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom35Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom36 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom36(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(34) /*s3k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom36Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom37 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom37(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(35) /*s3k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom37Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom38 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom38(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(36) /*s3k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom38Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom39 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom39(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(37) /*s4k0*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom39Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom40 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom40(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(38) /*s4k1*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom40Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom41 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom41(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(39) /*s4k2*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom41Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom isGoal
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom42 extends Axiom
{
	/**
	 * Branch -1 for axiom isGoal
	 */
		public Axiom42(Domain owner)
		{
			super(owner, new Predicate(21, 1, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(40) /*s4k3*/, TermList.NIL)), TermList.NIL)), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom isGoal [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom42Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom43 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom43(Domain owner)
		{
			super(owner, new Predicate(41, 1, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom43Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition1 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition1(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(42, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition2 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition2(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(3), new TermList(new TermCall(new List(owner.getTermVariable(0), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom44 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom44(Domain owner)
		{
			super(owner, new Predicate(41, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition1(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition2(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom44Branch0";
				case 1: return "Axiom44Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition3 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition3(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(42, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(41, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition4 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition4(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), unifier, 3);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom45 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom45(Domain owner)
		{
			super(owner, new Predicate(41, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition3(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition4(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom45Branch0";
				case 1: return "Axiom45Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition5 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition5(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition6 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition6(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom46 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom46(Domain owner)
		{
			super(owner, new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition5(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition6(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom46Branch0";
				case 1: return "Axiom46Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition7 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition7(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition8 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition8(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), unifier, 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom47 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom47(Domain owner)
		{
			super(owner, new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition7(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition8(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom47Branch0";
				case 1: return "Axiom47Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition9 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition9(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(21, 5, new TermList(owner.getTermVariable(2), TermList.NIL)), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(44, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition10 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition10(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(21, 5, new TermList(owner.getTermVariable(2), TermList.NIL)), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 5, new TermList(owner.getTermVariable(4), new TermList(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom48 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom48(Domain owner)
		{
			super(owner, new Predicate(41, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition9(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition10(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom48Branch0";
				case 1: return "Axiom48Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition11 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition11(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition12 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition12(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom49 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom49(Domain owner)
		{
			super(owner, new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(3)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition11(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition12(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom49Branch0";
				case 1: return "Axiom49Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition13 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition13(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(21, 6, new TermList(owner.getTermVariable(3), TermList.NIL)), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition14 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition14(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[1] = new PreconditionNegation(new PreconditionAtomic(new Predicate(21, 6, new TermList(owner.getTermVariable(3), TermList.NIL)), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 6, new TermList(owner.getTermVariable(5), new TermList(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom50 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom50(Domain owner)
		{
			super(owner, new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), owner.getTermVariable(4)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition13(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition14(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom50Branch0";
				case 1: return "Axiom50Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition15 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition15(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition16 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition16(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[1] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom51 extends Axiom
{
	/**
	 * Branch -1 for axiom filterElement
	 */
		public Axiom51(Domain owner)
		{
			super(owner, new Predicate(41, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), owner.getTermVariable(4)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition15(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new Precondition16(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom51Branch0";
				case 1: return "Axiom51Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterByQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom52 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQueryH
	 */
		public Axiom52(Domain owner)
		{
			super(owner, new Predicate(45, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom52Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterByQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition17 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition17(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(41, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterByQueryH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterByQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom53 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQueryH
	 */
		public Axiom53(Domain owner)
		{
			super(owner, new Predicate(45, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition17(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(45, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom53Branch0";
				case 1: return "Axiom53Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterByQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom54 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQuery
	 */
		public Axiom54(Domain owner)
		{
			super(owner, new Predicate(46, 1, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom54Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterByQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom55 extends Axiom
{
	/**
	 * Branch -1 for axiom filterByQuery
	 */
		public Axiom55(Domain owner)
		{
			super(owner, new Predicate(46, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterByQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(45, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom55Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom56 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 */
		public Axiom56(Domain owner)
		{
			super(owner, new Predicate(47, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom56Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition18 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition18(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(48, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(47, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom57 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 */
		public Axiom57(Domain owner)
		{
			super(owner, new Predicate(47, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition18(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom57Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition19 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition19(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(42, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(2), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition20 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition20(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(42, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(47, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(2)), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom58 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentStateH
	 */
		public Axiom58(Domain owner)
		{
			super(owner, new Predicate(47, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition19(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition20(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom58Branch0";
				case 1: return "Axiom58Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom59 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByTypeFromCurrentState
	 */
		public Axiom59(Domain owner)
		{
			super(owner, new Predicate(48, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByTypeFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(47, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom59Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom60 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 */
		public Axiom60(Domain owner)
		{
			super(owner, new Predicate(49, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom60Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition21 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition21(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(50, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(49, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom61 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 */
		public Axiom61(Domain owner)
		{
			super(owner, new Predicate(49, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition21(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom61Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition22 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition22(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(44, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition23 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition23(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(49, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom62 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentStateH
	 */
		public Axiom62(Domain owner)
		{
			super(owner, new Predicate(49, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition22(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition23(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom62Branch0";
				case 1: return "Axiom62Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom63 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyFromCurrentState
	 */
		public Axiom63(Domain owner)
		{
			super(owner, new Predicate(50, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(49, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom63Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom64 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 */
		public Axiom64(Domain owner)
		{
			super(owner, new Predicate(51, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom64Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition24 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition24(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(52, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(51, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom65 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 */
		public Axiom65(Domain owner)
		{
			super(owner, new Predicate(51, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition24(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom65Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition25 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition25(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition26 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition26(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(51, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL)))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom66 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH
	 */
		public Axiom66(Domain owner)
		{
			super(owner, new Predicate(51, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition25(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition26(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom66Branch0";
				case 1: return "Axiom66Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom67 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByPropertyDestValueFromCurrentState
	 */
		public Axiom67(Domain owner)
		{
			super(owner, new Predicate(52, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByPropertyDestValueFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(51, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom67Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom68 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 */
		public Axiom68(Domain owner)
		{
			super(owner, new Predicate(53, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom68Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition27 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition27(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(54, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(53, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom69 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 */
		public Axiom69(Domain owner)
		{
			super(owner, new Predicate(53, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition27(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom69Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition28 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition28(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition29 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition29(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(53, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom70 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentStateH
	 */
		public Axiom70(Domain owner)
		{
			super(owner, new Predicate(53, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition28(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition29(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom70Branch0";
				case 1: return "Axiom70Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition30 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition30(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition31 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition31(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(55, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsByInvRelationFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom71 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByInvRelationFromCurrentStateH
	 */
		public Axiom71(Domain owner)
		{
			super(owner, new Predicate(55, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByInvRelationFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition30(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition31(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom71Branch0";
				case 1: return "Axiom71Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition32 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition32(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(15, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(55, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsByRelationFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom72 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsByRelationFromCurrentState
	 */
		public Axiom72(Domain owner)
		{
			super(owner, new Predicate(54, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsByRelationFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition32(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(53, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom72Branch0";
				case 1: return "Axiom72Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom73 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom73(Domain owner)
		{
			super(owner, new Predicate(56, 2, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(48, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom73Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom74 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom74(Domain owner)
		{
			super(owner, new Predicate(56, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(50, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom74Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom75 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom75(Domain owner)
		{
			super(owner, new Predicate(56, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(52, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom75Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom76 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentStateH
	 */
		public Axiom76(Domain owner)
		{
			super(owner, new Predicate(56, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(54, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom76Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition33 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition33(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(56, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom77 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsFromCurrentState
	 */
		public Axiom77(Domain owner)
		{
			super(owner, new Predicate(57, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition33(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom77Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElements
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition34 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition34(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(57, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(2), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateGetElements, "((domain)owner).calculateGetElements"), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElements [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElements
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom78 extends Axiom
{
	/**
	 * Branch -1 for axiom getElements
	 */
		public Axiom78(Domain owner)
		{
			super(owner, new Predicate(58, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElements [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition34(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom78Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition35 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition35(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElement [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElement
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom79 extends Axiom
{
	/**
	 * Branch -1 for axiom getElement
	 */
		public Axiom79(Domain owner)
		{
			super(owner, new Predicate(59, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElement [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition35(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom79Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTypesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom80 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesH
	 */
		public Axiom80(Domain owner)
		{
			super(owner, new Predicate(60, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom80Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTypesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition36 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition36(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(61, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(60, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTypesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTypesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom81 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesH
	 */
		public Axiom81(Domain owner)
		{
			super(owner, new Predicate(60, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition36(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom81Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTypes
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom82 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypes
	 */
		public Axiom82(Domain owner)
		{
			super(owner, new Predicate(61, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypes [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(60, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom82Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition37 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition37(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(42, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(2), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getTypesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition38 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition38(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(42, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier), 4);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(62, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(2)), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getTypesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTypesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom83 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesFromCurrentStateH
	 */
		public Axiom83(Domain owner)
		{
			super(owner, new Predicate(62, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition37(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition38(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom83Branch0";
				case 1: return "Axiom83Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition39 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition39(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(62, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 3, new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(2), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTypesFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTypesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom84 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypesFromCurrentState
	 */
		public Axiom84(Domain owner)
		{
			super(owner, new Predicate(63, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypesFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition39(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom84Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTypes
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom85 extends Axiom
{
	/**
	 * Branch -1 for axiom getTypes
	 */
		public Axiom85(Domain owner)
		{
			super(owner, new Predicate(61, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTypes [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(63, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom85Branch0";
				case 1: return "Axiom85Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom86 extends Axiom
{
	/**
	 * Branch -1 for axiom getType
	 */
		public Axiom86(Domain owner)
		{
			super(owner, new Predicate(64, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(42, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(7, 2, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateGetType, "((domain)owner).calculateGetType"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom86Branch0";
				case 1: return "Axiom86Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom87 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom87(Domain owner)
		{
			super(owner, new Predicate(65, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom87Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition40 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition40(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(65, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom88 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom88(Domain owner)
		{
			super(owner, new Predicate(65, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition40(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom88Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom89 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom89(Domain owner)
		{
			super(owner, new Predicate(66, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(65, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom89Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition41 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition41(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(44, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition42 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition42(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(67, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom90 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 */
		public Axiom90(Domain owner)
		{
			super(owner, new Predicate(67, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition41(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition42(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom90Branch0";
				case 1: return "Axiom90Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition43 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition43(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(67, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 4, new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom91 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 */
		public Axiom91(Domain owner)
		{
			super(owner, new Predicate(68, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition43(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom91Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom92 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom92(Domain owner)
		{
			super(owner, new Predicate(66, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(68, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom92Branch0";
				case 1: return "Axiom92Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValue
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom93 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValue
	 */
		public Axiom93(Domain owner)
		{
			super(owner, new Predicate(69, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValue [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(44, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom93Branch0";
				case 1: return "Axiom93Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom94 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom94(Domain owner)
		{
			super(owner, new Predicate(65, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom94Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition44 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition44(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(65, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom95 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesH
	 */
		public Axiom95(Domain owner)
		{
			super(owner, new Predicate(65, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition44(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom95Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom96 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom96(Domain owner)
		{
			super(owner, new Predicate(66, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(65, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom96Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition45 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition45(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition46 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition46(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(44, 6, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), TermList.NIL)), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier), 6);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(67, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL)))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom97 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentStateH
	 */
		public Axiom97(Domain owner)
		{
			super(owner, new Predicate(67, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition45(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition46(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom97Branch0";
				case 1: return "Axiom97Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition47 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition47(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(67, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 5, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom98 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValuesFromCurrentState
	 */
		public Axiom98(Domain owner)
		{
			super(owner, new Predicate(68, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValuesFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition47(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom98Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValues
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom99 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValues
	 */
		public Axiom99(Domain owner)
		{
			super(owner, new Predicate(66, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValues [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(68, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom99Branch0";
				case 1: return "Axiom99Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getPropertyValue
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom100 extends Axiom
{
	/**
	 * Branch -1 for axiom getPropertyValue
	 */
		public Axiom100(Domain owner)
		{
			super(owner, new Predicate(69, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getPropertyValue [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(44, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL)), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), ((domain)owner).calculateGetPropertyValue, "((domain)owner).calculateGetPropertyValue"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom100Branch0";
				case 1: return "Axiom100Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom101 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom101(Domain owner)
		{
			super(owner, new Predicate(70, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom101Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition48 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition48(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(70, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom102 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom102(Domain owner)
		{
			super(owner, new Predicate(70, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition48(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom102Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom103 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom103(Domain owner)
		{
			super(owner, new Predicate(71, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(70, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom103Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition49 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition49(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getInvRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition50 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition50(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(72, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getInvRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom104 extends Axiom
{
	/**
	 * Branch -1 for axiom getInvRelatedsFromCurrentStateH
	 */
		public Axiom104(Domain owner)
		{
			super(owner, new Predicate(72, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getInvRelatedsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition49(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition50(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom104Branch0";
				case 1: return "Axiom104Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition51 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition51(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier), new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(3), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition52 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition52(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(43, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(73, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentStateH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsFromCurrentStateH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom105 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsFromCurrentStateH
	 */
		public Axiom105(Domain owner)
		{
			super(owner, new Predicate(73, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsFromCurrentStateH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition51(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition52(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom105Branch0";
				case 1: return "Axiom105Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition53 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition53(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(15, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(72, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(1, 5, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition54 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition54(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(73, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(1, 5, new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(4), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getRelatedsFromCurrentState [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsFromCurrentState
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom106 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsFromCurrentState
	 */
		public Axiom106(Domain owner)
		{
			super(owner, new Predicate(74, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsFromCurrentState [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition53(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition54(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom106Branch0";
				case 1: return "Axiom106Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom107 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom107(Domain owner)
		{
			super(owner, new Predicate(71, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(74, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom107Branch0";
				case 1: return "Axiom107Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelated
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition55 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition55(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(15, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(43, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelated [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelated
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom108 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelated
	 */
		public Axiom108(Domain owner)
		{
			super(owner, new Predicate(75, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 3);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelated [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition55(owner, unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(43, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), TermList.NIL)))), unifier)).setComparator(null);
					p.setFirst(true);
				break;
				case 2:
					p = (new PreconditionAtomic(new Predicate(7, 4, new TermList(owner.getTermVariable(0), new TermList(new TermCall(new List(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetRelated, "((domain)owner).calculateGetRelated"), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom108Branch0";
				case 1: return "Axiom108Branch1";
				case 2: return "Axiom108Branch2";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom109 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom109(Domain owner)
		{
			super(owner, new Predicate(70, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermNumber(0.0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom109Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom110 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom110(Domain owner)
		{
			super(owner, new Predicate(70, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom110Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition56 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition56(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(1, 8, new TermList(owner.getTermVariable(3), new TermList(new TermNumber(0.0), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(71, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(3), new TermList(new TermNumber(1.0), TermList.NIL)), StdLib.minus, "StdLib.minus"), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(70, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(new TermCall(new List(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelatedsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom111 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelatedsH
	 */
		public Axiom111(Domain owner)
		{
			super(owner, new Predicate(70, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelatedsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition56(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom111Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom112 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom112(Domain owner)
		{
			super(owner, new Predicate(71, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(70, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom112Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition57 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition57(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(71, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getRelateds [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getRelateds
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom113 extends Axiom
{
	/**
	 * Branch -1 for axiom getRelateds
	 */
		public Axiom113(Domain owner)
		{
			super(owner, new Predicate(71, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getRelateds [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition57(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom113Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition58 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition58(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(78) /*Level*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom equivalent [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom114 extends Axiom
{
	/**
	 * Branch -1 for axiom equivalent
	 */
		public Axiom114(Domain owner)
		{
			super(owner, new Predicate(77, 3, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(76) /*any*/, TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom equivalent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition58(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom114Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition59 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition59(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 3, new TermList(owner.getTermVariable(2), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(78) /*Level*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(80) /*hasKnowledgeLevel*/, new TermList(owner.getTermVariable(0), TermList.NIL))), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 3, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom equivalent [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom115 extends Axiom
{
	/**
	 * Branch -1 for axiom equivalent
	 */
		public Axiom115(Domain owner)
		{
			super(owner, new Predicate(77, 3, new TermList(new TermList(owner.getTermConstant(76) /*any*/, new TermList(owner.getTermVariable(0), TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom equivalent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition59(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom115Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition60 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition60(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 4, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(78) /*Level*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(79) /*hasSkillLevel*/, new TermList(owner.getTermVariable(0), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(80) /*hasKnowledgeLevel*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom equivalent [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom equivalent
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom116 extends Axiom
{
	/**
	 * Branch -1 for axiom equivalent
	 */
		public Axiom116(Domain owner)
		{
			super(owner, new Predicate(77, 4, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom equivalent [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition60(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom116Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom117 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom117(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(20) /*s0k0*/, new TermList(new TermList(owner.getTermConstant(81) /*nothing*/, new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom117Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom118 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom118(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(22) /*s0k1*/, new TermList(new TermList(owner.getTermConstant(81) /*nothing*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom118Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom119 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom119(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(23) /*s0k2*/, new TermList(new TermList(owner.getTermConstant(81) /*nothing*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom119Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom120 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom120(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(24) /*s0k3*/, new TermList(new TermList(owner.getTermConstant(81) /*nothing*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom120Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom121 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom121(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(25) /*s1k0*/, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom121Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom122 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom122(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(26) /*s1k1*/, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom122Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom123 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom123(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(27) /*s1k2*/, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom123Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom124 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom124(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(28) /*s1k3*/, new TermList(new TermList(owner.getTermConstant(86) /*rough*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom124Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom125 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom125(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(29) /*s2k0*/, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom125Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom126 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom126(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(30) /*s2k1*/, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom126Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom127 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom127(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(31) /*s2k2*/, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom127Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom128 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom128(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(32) /*s2k3*/, new TermList(new TermList(owner.getTermConstant(87) /*explanatory*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom128Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom129 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom129(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(33) /*s3k0*/, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom129Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom130 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom130(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(34) /*s3k1*/, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom130Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom131 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom131(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(35) /*s3k2*/, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom131Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom132 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom132(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(36) /*s3k3*/, new TermList(new TermList(owner.getTermConstant(88) /*associative*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom132Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom133 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom133(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(37) /*s4k0*/, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom133Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom134 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom134(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(38) /*s4k1*/, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom134Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom135 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom135(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(39) /*s4k2*/, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom135Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom136 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevel
	 */
		public Axiom136(Domain owner)
		{
			super(owner, new Predicate(82, 0, new TermList(owner.getTermConstant(40) /*s4k3*/, new TermList(new TermList(owner.getTermConstant(89) /*autonomous*/, new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom136Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom137 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom137(Domain owner)
		{
			super(owner, new Predicate(90, 0, new TermList(new TermNumber(0.0), new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom137Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom138 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom138(Domain owner)
		{
			super(owner, new Predicate(90, 0, new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(86) /*rough*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom138Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom139 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom139(Domain owner)
		{
			super(owner, new Predicate(90, 0, new TermList(new TermNumber(2.0), new TermList(owner.getTermConstant(87) /*explanatory*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom139Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom140 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom140(Domain owner)
		{
			super(owner, new Predicate(90, 0, new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(88) /*associative*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom140Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom141 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom141(Domain owner)
		{
			super(owner, new Predicate(90, 0, new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(89) /*autonomous*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom141Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom slevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom142 extends Axiom
{
	/**
	 * Branch -1 for axiom slevel
	 */
		public Axiom142(Domain owner)
		{
			super(owner, new Predicate(90, 0, new TermList(new TermNumber(5.0), new TermList(owner.getTermConstant(89) /*autonomous*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom slevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom142Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom143 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom143(Domain owner)
		{
			super(owner, new Predicate(91, 0, new TermList(new TermNumber(0.0), new TermList(owner.getTermConstant(81) /*nothing*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom143Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom144 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom144(Domain owner)
		{
			super(owner, new Predicate(91, 0, new TermList(new TermNumber(1.0), new TermList(owner.getTermConstant(83) /*accretion*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom144Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom145 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom145(Domain owner)
		{
			super(owner, new Predicate(91, 0, new TermList(new TermNumber(2.0), new TermList(owner.getTermConstant(84) /*tuning*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom145Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom146 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom146(Domain owner)
		{
			super(owner, new Predicate(91, 0, new TermList(new TermNumber(3.0), new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom146Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom klevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom147 extends Axiom
{
	/**
	 * Branch -1 for axiom klevel
	 */
		public Axiom147(Domain owner)
		{
			super(owner, new Predicate(91, 0, new TermList(new TermNumber(4.0), new TermList(owner.getTermConstant(85) /*restructuring*/, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom klevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom147Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getNumericalLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition61 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition61(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(82, 5, new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(90, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(91, 5, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getNumericalLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getNumericalLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom148 extends Axiom
{
	/**
	 * Branch -1 for axiom getNumericalLevel
	 */
		public Axiom148(Domain owner)
		{
			super(owner, new Predicate(92, 5, new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), new TermList(owner.getTermVariable(2), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getNumericalLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition61(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom148Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom hasKnowledgeType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition62 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition62(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(61, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(6, 4, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom hasKnowledgeType [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom hasKnowledgeType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom149 extends Axiom
{
	/**
	 * Branch -1 for axiom hasKnowledgeType
	 */
		public Axiom149(Domain owner)
		{
			super(owner, new Predicate(93, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom hasKnowledgeType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition62(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom149Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom150 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 */
		public Axiom150(Domain owner)
		{
			super(owner, new Predicate(95, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom150Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Conjunct #5 of Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition63 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition63(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition64 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition64(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(75, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition63(owner, unifier) /*Conjunct 6 of Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #0 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #5 of Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition65 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition65(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(14), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(15), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition66 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition66(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 19, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(75, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition65(owner, unifier) /*Conjunct 6 of Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #1 of Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition67 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition67(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new Precondition64(owner, unifier);

			p[1] = new Precondition66(owner, unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #3 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition68 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition68(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(15, 19, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(64, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(0, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(96) /*Competency*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[4] = new Precondition67(owner, unifier) /*Conjunct 4 of Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(95, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #5 of Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition69 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition69(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(9), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(10), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(11), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition70 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition70(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 19, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(10), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(11), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(94) /*hasKnowledge*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(75, 19, new TermList(owner.getTermVariable(12), new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition69(owner, unifier) /*Conjunct 6 of Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #0 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #5 of Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition71 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition71(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(14), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(15), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(16), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #5 of Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition72 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition72(Domain owner, Term[] unifier)
		{
			p = new Precondition[7];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 19, new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(14), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(15), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(66, 19, new TermList(owner.getTermVariable(16), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(75, 19, new TermList(owner.getTermVariable(17), new TermList(owner.getTermVariable(13), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[6] = new Precondition71(owner, unifier) /*Conjunct 6 of Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH*/;
			b = new Term[7][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[6] == null)
			{
				boolean b5changed = false;
				while (b[5] == null)
				{
					boolean b4changed = false;
					while (b[4] == null)
					{
						boolean b3changed = false;
						while (b[3] == null)
						{
							boolean b2changed = false;
							while (b[2] == null)
							{
								boolean b1changed = false;
								while (b[1] == null)
								{
									b[1] = p[1].nextBinding(state);
									if (b[1] == null)
										return null;
									else
										bestMatch = Math.max(bestMatch, 1);
									b1changed = true;
								}
								if ( b1changed ) {
									p[2].reset(state);
									p[2].bind(Term.merge(b, 2));
								}
								b[2] = p[2].nextBinding(state);
								if (b[2] == null)
									b[1] = null;
								else
									bestMatch = Math.max(bestMatch, 2);
								b2changed = true;
							}
							if ( b2changed ) {
								p[3].reset(state);
								p[3].bind(Term.merge(b, 3));
							}
							b[3] = p[3].nextBinding(state);
							if (b[3] == null)
								b[2] = null;
							else
								bestMatch = Math.max(bestMatch, 3);
							b3changed = true;
						}
						if ( b3changed ) {
							p[4].reset(state);
							p[4].bind(Term.merge(b, 4));
						}
						b[4] = p[4].nextBinding(state);
						if (b[4] == null)
							b[3] = null;
						else
							bestMatch = Math.max(bestMatch, 4);
						b4changed = true;
					}
					if ( b4changed ) {
						p[5].reset(state);
						p[5].bind(Term.merge(b, 5));
					}
					b[5] = p[5].nextBinding(state);
					if (b[5] == null)
						b[4] = null;
					else
						bestMatch = Math.max(bestMatch, 5);
					b5changed = true;
				}
				if ( b5changed ) {
					p[6].reset(state);
					p[6].bind(Term.merge(b, 6));
				}
				b[6] = p[6].nextBinding(state);
				if (b[6] == null)
					b[5] = null;
				else
					bestMatch = Math.max(bestMatch, 6);
			}

			Term[] retVal = Term.merge(b, 7);
			b[6] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			p[6].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
			b[6] = null;
		}
		@Override
		public String toString()
		{
			return "Disjunct #1 of Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition73 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition73(Domain owner, Term[] unifier)
		{
			p = new Precondition[2];
			p[0] = new Precondition70(owner, unifier);

			p[1] = new Precondition72(owner, unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 2)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition74 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition74(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(64, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(0, 19, new TermList(owner.getTermVariable(7), new TermList(owner.getTermConstant(96) /*Competency*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition73(owner, unifier) /*Conjunct 3 of Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(95, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #2 of Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition75 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition75(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #2 of Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition76 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition76(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(15, 19, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(75, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[3] = new Precondition75(owner, unifier) /*Conjunct 3 of Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(95, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #2 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Conjunct #1 of Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
	 */
	public static class Precondition77 extends Precondition
	{
		Precondition[] p;
		Term[] b;
		int whichClause;

		public Precondition77(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			p[0] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);

			p[1] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);

			p[2] = new PreconditionAtomic(new Predicate(6, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			p[0].bind(binding);
			p[1].bind(binding);
			p[2].bind(binding);
		}

		protected Term[] nextBindingHelper(State state)
		{
			while (whichClause < 3)
			{
				b = p[whichClause].nextBinding(state);
				if (b != null)
					 return b;
				whichClause++;
			}

			return null;
		}

		@Override
		public String toString()
		{
			return "Conjunct #1 of Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		protected void resetHelper(State state)
		{
			p[0].reset(state);
			p[1].reset(state);
			p[2].reset(state);
			whichClause = 0;
		}
	}

	/**
	 * Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition78 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition78(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(75, 19, new TermList(owner.getTermVariable(18), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionDisjunction)
			p[2] = new Precondition77(owner, unifier) /*Conjunct 2 of Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH*/;
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(95, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #3 of Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom151 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsWithoutRelationH
	 */
		public Axiom151(Domain owner)
		{
			super(owner, new Predicate(95, 19, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 5);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsWithoutRelationH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition68(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition74(owner, unifier)).setComparator(null);
				break;
				case 2:
					p = (new Precondition76(owner, unifier)).setComparator(null);
				break;
				case 3:
					p = (new Precondition78(owner, unifier)).setComparator(null);
				break;
				case 4:
					p = (new PreconditionAtomic(new Predicate(95, 19, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(5)), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom151Branch0";
				case 1: return "Axiom151Branch1";
				case 2: return "Axiom151Branch2";
				case 3: return "Axiom151Branch3";
				case 4: return "Axiom151Branch4";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getElementsWithoutRelation
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom152 extends Axiom
{
	/**
	 * Branch -1 for axiom getElementsWithoutRelation
	 */
		public Axiom152(Domain owner)
		{
			super(owner, new Predicate(98, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getElementsWithoutRelation [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(95, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom152Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortByH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom153 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByH
	 */
		public Axiom153(Domain owner)
		{
			super(owner, new Predicate(99, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom153Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom sortByH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition79 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition79(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(98, 6, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(8, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(99, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom sortByH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom sortByH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom154 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByH
	 */
		public Axiom154(Domain owner)
		{
			super(owner, new Predicate(99, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition79(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom154Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortBy
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom155 extends Axiom
{
	/**
	 * Branch -1 for axiom sortBy
	 */
		public Axiom155(Domain owner)
		{
			super(owner, new Predicate(100, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortBy [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(99, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom155Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom alreadySeenByLearners
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition80 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition80(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(102) /*hasAlreadySeen*/, new TermList(owner.getTermVariable(0), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(0, 4, new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(103) /*true*/, TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom alreadySeenByLearners [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom alreadySeenByLearners
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom156 extends Axiom
{
	/**
	 * Branch -1 for axiom alreadySeenByLearners
	 */
		public Axiom156(Domain owner)
		{
			super(owner, new Predicate(101, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), TermList.NIL))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom alreadySeenByLearners [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition80(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(101, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom156Branch0";
				case 1: return "Axiom156Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom157 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 */
		public Axiom157(Domain owner)
		{
			super(owner, new Predicate(104, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByAlreadySeenH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL)), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom157Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom sortByAlreadySeenH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition81 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition81(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(101, 6, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(104, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom sortByAlreadySeenH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom158 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByAlreadySeenH
	 */
		public Axiom158(Domain owner)
		{
			super(owner, new Predicate(104, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByAlreadySeenH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition81(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(104, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom158Branch0";
				case 1: return "Axiom158Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom sortByAlreadySeen
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom159 extends Axiom
{
	/**
	 * Branch -1 for axiom sortByAlreadySeen
	 */
		public Axiom159(Domain owner)
		{
			super(owner, new Predicate(105, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom sortByAlreadySeen [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(104, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom159Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom160 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom160(Domain owner)
		{
			super(owner, new Predicate(106, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom160Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom161 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom161(Domain owner)
		{
			super(owner, new Predicate(106, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(106, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(4)), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom161Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom162 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQuery
	 */
		public Axiom162(Domain owner)
		{
			super(owner, new Predicate(107, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(106, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom162Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom163 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom163(Domain owner)
		{
			super(owner, new Predicate(106, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom163Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom164 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQueryH
	 */
		public Axiom164(Domain owner)
		{
			super(owner, new Predicate(106, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(106, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), owner.getTermVariable(5)), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom164Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom165 extends Axiom
{
	/**
	 * Branch -1 for axiom buildPropertyQuery
	 */
		public Axiom165(Domain owner)
		{
			super(owner, new Predicate(107, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(106, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom165Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildRelationQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom166 extends Axiom
{
	/**
	 * Branch -1 for axiom buildRelationQueryH
	 */
		public Axiom166(Domain owner)
		{
			super(owner, new Predicate(108, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildRelationQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom166Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildRelationQueryH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom167 extends Axiom
{
	/**
	 * Branch -1 for axiom buildRelationQueryH
	 */
		public Axiom167(Domain owner)
		{
			super(owner, new Predicate(108, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildRelationQueryH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(108, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(43) /*relation*/, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))), owner.getTermVariable(4)), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom167Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom buildRelationQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom168 extends Axiom
{
	/**
	 * Branch -1 for axiom buildRelationQuery
	 */
		public Axiom168(Domain owner)
		{
			super(owner, new Predicate(109, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom buildRelationQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(108, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom168Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLearnerFundCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom169 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerFundCompetencyLevel
	 */
		public Axiom169(Domain owner)
		{
			super(owner, new Predicate(110, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerFundCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(69, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(111) /*hasCompetencyLevel*/, new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(owner.getTermConstant(20) /*s0k0*/, unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom169Branch0";
				case 1: return "Axiom169Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getLearnerAuxCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition82 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition82(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 5, new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(114) /*hasFundCompetency*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(110, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(4), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getLearnerAuxCompetencyLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerAuxCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom170 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerAuxCompetencyLevel
	 */
		public Axiom170(Domain owner)
		{
			super(owner, new Predicate(112, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerAuxCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(111) /*hasCompetencyLevel*/, new TermList(owner.getTermVariable(2), TermList.NIL))))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition82(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom170Branch0";
				case 1: return "Axiom170Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition83 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition83(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(93, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(116) /*Auxiliary*/, TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(112, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom171 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevel
	 */
		public Axiom171(Domain owner)
		{
			super(owner, new Predicate(115, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition83(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(110, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom171Branch0";
				case 1: return "Axiom171Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom172 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 */
		public Axiom172(Domain owner)
		{
			super(owner, new Predicate(117, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevelsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom172Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevelsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition84 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition84(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(115, 6, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(117, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(5), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerCompetencyLevelsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom173 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevelsH
	 */
		public Axiom173(Domain owner)
		{
			super(owner, new Predicate(117, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevelsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition84(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom173Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLearnerCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom174 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerCompetencyLevels
	 */
		public Axiom174(Domain owner)
		{
			super(owner, new Predicate(118, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerCompetencyLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(117, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom174Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom175 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 */
		public Axiom175(Domain owner)
		{
			super(owner, new Predicate(119, 5, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom175Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition85 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition85(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(115, 10, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(92, 10, new TermList(new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(9), TermList.NIL)), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[3] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(8), new TermList(owner.getTermVariable(4), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(119, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevelH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom176 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevelH
	 */
		public Axiom176(Domain owner)
		{
			super(owner, new Predicate(119, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition85(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(119, 10, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom176Branch0";
				case 1: return "Axiom176Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition86 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition86(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(92, 6, new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(119, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL)), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterLearnersByCompetencyLevel [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom177 extends Axiom
{
	/**
	 * Branch -1 for axiom filterLearnersByCompetencyLevel
	 */
		public Axiom177(Domain owner)
		{
			super(owner, new Predicate(120, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterLearnersByCompetencyLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition86(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom177Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom178 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 */
		public Axiom178(Domain owner)
		{
			super(owner, new Predicate(121, 1, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedCompetencyLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom178Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom reachedCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition87 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition87(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(120, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(5), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(121, 7, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom reachedCompetencyLevels [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom179 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedCompetencyLevels
	 */
		public Axiom179(Domain owner)
		{
			super(owner, new Predicate(121, 7, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedCompetencyLevels [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition87(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom179Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom readyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition88 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition88(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(123) /*hasPrerequisite*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(121, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(1), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom readyAux [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom readyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom180 extends Axiom
{
	/**
	 * Branch -1 for axiom readyAux
	 */
		public Axiom180(Domain owner)
		{
			super(owner, new Predicate(122, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom readyAux [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition88(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(122, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom180Branch0";
				case 1: return "Axiom180Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getReadyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition89 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition89(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(58, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(105, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(122, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getReadyAux [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getReadyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom181 extends Axiom
{
	/**
	 * Branch -1 for axiom getReadyAux
	 */
		public Axiom181(Domain owner)
		{
			super(owner, new Predicate(124, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getReadyAux [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition89(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom181Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getOrBuildReadyAux
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom182 extends Axiom
{
	/**
	 * Branch -1 for axiom getOrBuildReadyAux
	 */
		public Axiom182(Domain owner)
		{
			super(owner, new Predicate(125, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getOrBuildReadyAux [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(124, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(126) /*hasTitle*/, new TermList(owner.getTermConstant(127) /*temporarily-auxiliary*/, TermList.NIL))), owner.getTermVariable(1)), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom182Branch0";
				case 1: return "Axiom182Branch1";
				default: return null;
			}
		}
	}

	/**
	 * consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition90 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition90(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(66, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), new TermList(owner.getTermConstant(129) /*hasEducationalLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition91 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition91(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 7, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(129) /*hasEducationalLevel*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[3] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier), new Precondition90(owner, unifier), 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(130) /*hasContext*/, new TermList(owner.getTermVariable(4), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(131) /*hasDifficult*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL)), unifier, 0);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom183 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 */
		public Axiom183(Domain owner)
		{
			super(owner, new Predicate(128, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition91(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(131) /*hasDifficult*/, new TermList(owner.getTermVariable(2), TermList.NIL))), TermList.NIL), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom183Branch0";
				case 1: return "Axiom183Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition92 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition92(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 9, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermConstant(132) /*very-high*/, new TermList(owner.getTermConstant(133) /*high*/, TermList.NIL)), TermList.NIL)))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(6), new TermList(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(134) /*very-difficult*/, new TermList(owner.getTermConstant(135) /*difficult*/, TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition93 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition93(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(46, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermConstant(136) /*medium*/, new TermList(owner.getTermConstant(137) /*low*/, TermList.NIL)), TermList.NIL)))), TermList.NIL), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(5, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[4] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(8), new TermList(new TermCall(new List(owner.getTermVariable(4), new TermList(new TermNumber(2.0), TermList.NIL)), StdLib.div, "StdLib.div"), TermList.NIL)), StdLib.more, "StdLib.more"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(128, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(136) /*medium*/, new TermList(owner.getTermConstant(138) /*easy*/, TermList.NIL)), TermList.NIL)))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom184 extends Axiom
{
	/**
	 * Branch -1 for axiom getLearnerPropertyQuery
	 */
		public Axiom184(Domain owner)
		{
			super(owner, new Predicate(128, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 3);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLearnerPropertyQuery [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition92(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition93(owner, unifier)).setComparator(null);
				break;
				case 2:
					p = (new PreconditionAtomic(new Predicate(128, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(new TermList(owner.getTermConstant(138) /*easy*/, new TermList(owner.getTermConstant(139) /*very-easy*/, TermList.NIL)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom184Branch0";
				case 1: return "Axiom184Branch1";
				case 2: return "Axiom184Branch2";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom185 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 */
		public Axiom185(Domain owner)
		{
			super(owner, new Predicate(140, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom185Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getCompsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition94 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition94(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionNegation)
			p[2] = new PreconditionNegation(new PreconditionAtomic(new Predicate(6, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(140, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getCompsFromGoalsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom186 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompsFromGoalsH
	 */
		public Axiom186(Domain owner)
		{
			super(owner, new Predicate(140, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition94(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(140, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom186Branch0";
				case 1: return "Axiom186Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getCompsFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom187 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompsFromGoals
	 */
		public Axiom187(Domain owner)
		{
			super(owner, new Predicate(141, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompsFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(140, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom187Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getCompFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom188 extends Axiom
{
	/**
	 * Branch -1 for axiom getCompFromGoals
	 */
		public Axiom188(Domain owner)
		{
			super(owner, new Predicate(142, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCompFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom188Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom189 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 */
		public Axiom189(Domain owner)
		{
			super(owner, new Predicate(143, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom189Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLevelsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition95 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition95(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(143, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLevelsFromGoalsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom190 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelsFromGoalsH
	 */
		public Axiom190(Domain owner)
		{
			super(owner, new Predicate(143, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelsFromGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition95(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom190Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getLevelsFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom191 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelsFromGoals
	 */
		public Axiom191(Domain owner)
		{
			super(owner, new Predicate(144, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelsFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(143, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom191Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getLevelFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition96 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition96(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(144, 3, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(7, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getLevelFromGoals [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getLevelFromGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom192 extends Axiom
{
	/**
	 * Branch -1 for axiom getLevelFromGoals
	 */
		public Axiom192(Domain owner)
		{
			super(owner, new Predicate(145, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getLevelFromGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition96(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom192Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition97 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition97(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(96) /*Competency*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(147) /*ForAuxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(97) /*hasSkill*/, new TermList(owner.getTermVariable(4), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(94) /*hasKnowledge*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL)))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL)), unifier, 0);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalFromAuxiliary [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getGoalFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition98 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition98(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(4), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(96) /*Competency*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(147) /*ForAuxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(126) /*hasTitle*/, new TermList(new TermCall(new List(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL)), ((domain)owner).calculateConcatText, "((domain)owner).calculateConcatText"), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(97) /*hasSkill*/, new TermList(owner.getTermVariable(4), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(94) /*hasKnowledge*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL))))), TermList.NIL), ((domain)owner).calculateBuildElement, "((domain)owner).calculateBuildElement"), unifier, 5);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[5] = new PreconditionAssign(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), TermList.NIL)), unifier, 0);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getGoalFromAuxiliary [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom193 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalFromAuxiliary
	 */
		public Axiom193(Domain owner)
		{
			super(owner, new Predicate(146, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalFromAuxiliary [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition97(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition98(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom193Branch0";
				case 1: return "Axiom193Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom194 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 */
		public Axiom194(Domain owner)
		{
			super(owner, new Predicate(148, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliaryHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom194Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliaryHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition99 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition99(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(146, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(148, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliaryHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom195 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaryHH
	 */
		public Axiom195(Domain owner)
		{
			super(owner, new Predicate(148, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliaryHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition99(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom195Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliary
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom196 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliary
	 */
		public Axiom196(Domain owner)
		{
			super(owner, new Predicate(149, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliary [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(148, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom196Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom197 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 */
		public Axiom197(Domain owner)
		{
			super(owner, new Predicate(150, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliariesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom197Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliariesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition100 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition100(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(3), new TermList(owner.getTermConstant(97) /*hasSkill*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(59, 8, new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(96) /*Competency*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(147) /*ForAuxiliary*/, TermList.NIL)), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(97) /*hasSkill*/, new TermList(owner.getTermVariable(5), TermList.NIL))), new TermList(new TermList(owner.getTermConstant(44) /*property*/, new TermList(owner.getTermConstant(94) /*hasKnowledge*/, new TermList(owner.getTermVariable(1), TermList.NIL))), TermList.NIL)))), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(151) /*hasLearningObjective*/, new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(150, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL)), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalsFromAuxiliariesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom198 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliariesH
	 */
		public Axiom198(Domain owner)
		{
			super(owner, new Predicate(150, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliariesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition100(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom198Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaries
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom199 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromAuxiliaries
	 */
		public Axiom199(Domain owner)
		{
			super(owner, new Predicate(152, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromAuxiliaries [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(150, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom199Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom200 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsHH
	 */
		public Axiom200(Domain owner)
		{
			super(owner, new Predicate(153, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom200Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition101 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition101(Domain owner, Term[] unifier)
		{
			p = new Precondition[4];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(115, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(6), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetIndGoal, "((domain)owner).calculateGetIndGoal"), unifier, 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(153, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(new TermList(new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(7), TermList.NIL)), TermList.NIL)), owner.getTermVariable(5)), TermList.NIL))))), unifier);
			b = new Term[4][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[3] == null)
			{
				boolean b2changed = false;
				while (b[2] == null)
				{
					boolean b1changed = false;
					while (b[1] == null)
					{
						b[1] = p[1].nextBinding(state);
						if (b[1] == null)
							return null;
						else
							bestMatch = Math.max(bestMatch, 1);
						b1changed = true;
					}
					if ( b1changed ) {
						p[2].reset(state);
						p[2].bind(Term.merge(b, 2));
					}
					b[2] = p[2].nextBinding(state);
					if (b[2] == null)
						b[1] = null;
					else
						bestMatch = Math.max(bestMatch, 2);
					b2changed = true;
				}
				if ( b2changed ) {
					p[3].reset(state);
					p[3].bind(Term.merge(b, 3));
				}
				b[3] = p[3].nextBinding(state);
				if (b[3] == null)
					b[2] = null;
				else
					bestMatch = Math.max(bestMatch, 3);
			}

			Term[] retVal = Term.merge(b, 4);
			b[3] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom201 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsHH
	 */
		public Axiom201(Domain owner)
		{
			super(owner, new Predicate(153, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition101(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom201Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom202 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsH
	 */
		public Axiom202(Domain owner)
		{
			super(owner, new Predicate(154, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom202Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition102 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition102(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(153, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(154, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(6), owner.getTermVariable(5)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom203 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsH
	 */
		public Axiom203(Domain owner)
		{
			super(owner, new Predicate(154, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition102(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom203Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom204 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom204(Domain owner)
		{
			super(owner, new Predicate(155, 1, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(1)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom204Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom205 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom205(Domain owner)
		{
			super(owner, new Predicate(155, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(154, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom205Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom206 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 */
		public Axiom206(Domain owner)
		{
			super(owner, new Predicate(156, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(3), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom206Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition103 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition103(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 9, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(115, 9, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(7), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetIndGoal, "((domain)owner).calculateGetIndGoal"), unifier, 8);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(156, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(new TermList(new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(8), TermList.NIL)), TermList.NIL)), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom207 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompHH
	 */
		public Axiom207(Domain owner)
		{
			super(owner, new Predicate(156, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition103(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(156, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom207Branch0";
				case 1: return "Axiom207Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom208 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 */
		public Axiom208(Domain owner)
		{
			super(owner, new Predicate(157, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom208Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition104 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition104(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(156, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), new TermList(TermList.NIL, TermList.NIL)))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(157, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(7), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom209 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompH
	 */
		public Axiom209(Domain owner)
		{
			super(owner, new Predicate(157, 8, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition104(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom209Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom210 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom210(Domain owner)
		{
			super(owner, new Predicate(155, 2, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(2)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom210Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom211 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom211(Domain owner)
		{
			super(owner, new Predicate(155, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(157, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom211Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom212 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 */
		public Axiom212(Domain owner)
		{
			super(owner, new Predicate(158, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(4), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom212Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition105 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition105(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 10, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(6), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(115, 10, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[4] = new PreconditionAssign(new TermCall(new List(owner.getTermVariable(8), new TermList(owner.getTermVariable(2), TermList.NIL)), ((domain)owner).calculateGetIndGoal, "((domain)owner).calculateGetIndGoal"), unifier, 9);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(158, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(new TermList(new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(9), TermList.NIL)), TermList.NIL)), owner.getTermVariable(7)), TermList.NIL))))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersHH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom213 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersHH
	 */
		public Axiom213(Domain owner)
		{
			super(owner, new Predicate(158, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition105(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(158, 10, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom213Branch0";
				case 1: return "Axiom213Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom214 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 */
		public Axiom214(Domain owner)
		{
			super(owner, new Predicate(159, 4, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(3), TermList.NIL), ((domain)owner).calculateConcatList, "((domain)owner).calculateConcatList"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom214Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition106 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition106(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(158, 9, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(TermList.NIL, TermList.NIL))))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(159, 9, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(new TermList(owner.getTermVariable(8), owner.getTermVariable(7)), TermList.NIL))))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getIndGoalsByCompLearnersH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom215 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoalsByCompLearnersH
	 */
		public Axiom215(Domain owner)
		{
			super(owner, new Predicate(159, 9, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(7), TermList.NIL))))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoalsByCompLearnersH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition106(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom215Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom216 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom216(Domain owner)
		{
			super(owner, new Predicate(155, 3, new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(3)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom216Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getIndGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom217 extends Axiom
{
	/**
	 * Branch -1 for axiom getIndGoals
	 */
		public Axiom217(Domain owner)
		{
			super(owner, new Predicate(155, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getIndGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(159, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), new TermList(TermList.NIL, TermList.NIL))))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom217Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom218 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 */
		public Axiom218(Domain owner)
		{
			super(owner, new Predicate(160, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom218Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition107 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition107(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(160, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGoalsByCompH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom219 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByCompH
	 */
		public Axiom219(Domain owner)
		{
			super(owner, new Predicate(160, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition107(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(160, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom219Branch0";
				case 1: return "Axiom219Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByComp
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom220 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByComp
	 */
		public Axiom220(Domain owner)
		{
			super(owner, new Predicate(161, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByComp [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(160, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom220Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalByGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom221 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalByGroup
	 */
		public Axiom221(Domain owner)
		{
			super(owner, new Predicate(162, 4, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(0), owner.getTermVariable(1)), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(3)), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalByGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(4)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom221Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom filterGoalByGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition108 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition108(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[1] = new PreconditionForAll(new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier), new PreconditionAtomic(new Predicate(6, 7, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(3), TermList.NIL))), unifier), 7);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[2] = new PreconditionAssign(owner.getTermVariable(1), unifier, 0);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom filterGoalByGroup [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalByGroup
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom222 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalByGroup
	 */
		public Axiom222(Domain owner)
		{
			super(owner, new Predicate(162, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalByGroup [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(162, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), TermList.NIL))))), unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition108(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom222Branch0";
				case 1: return "Axiom222Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom223 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 */
		public Axiom223(Domain owner)
		{
			super(owner, new Predicate(163, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(2), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom223Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGoalsByLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition109 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition109(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(3, 5, new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(163, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(4)), TermList.NIL))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGoalsByLevelH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom224 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByLevelH
	 */
		public Axiom224(Domain owner)
		{
			super(owner, new Predicate(163, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByLevelH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition109(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(163, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom224Branch0";
				case 1: return "Axiom224Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGoalsByLevel
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom225 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGoalsByLevel
	 */
		public Axiom225(Domain owner)
		{
			super(owner, new Predicate(164, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGoalsByLevel [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(163, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(TermList.NIL, TermList.NIL))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom225Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom226 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 */
		public Axiom226(Domain owner)
		{
			super(owner, new Predicate(165, 3, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGroupsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(2), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom226Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom filterGroupsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition110 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition110(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(2, 7, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(165, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(6)), TermList.NIL)))))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom filterGroupsByCompH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom227 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGroupsByCompH
	 */
		public Axiom227(Domain owner)
		{
			super(owner, new Predicate(165, 7, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGroupsByCompH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition110(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(165, 7, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom227Branch0";
				case 1: return "Axiom227Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom filterGroupsByComp
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom228 extends Axiom
{
	/**
	 * Branch -1 for axiom filterGroupsByComp
	 */
		public Axiom228(Domain owner)
		{
			super(owner, new Predicate(166, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom filterGroupsByComp [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(165, 4, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(TermList.NIL, TermList.NIL)))))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom228Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getCurrentLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition111 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition111(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(59, 2, new TermList(owner.getTermVariable(1), new TermList(new TermList(new TermList(owner.getTermConstant(42) /*class*/, new TermList(owner.getTermConstant(113) /*CurrentLDElement*/, TermList.NIL)), TermList.NIL), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(66, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getCurrentLearningResourceType [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getCurrentLearningResourceType
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom229 extends Axiom
{
	/**
	 * Branch -1 for axiom getCurrentLearningResourceType
	 */
		public Axiom229(Domain owner)
		{
			super(owner, new Predicate(167, 2, new TermList(owner.getTermVariable(0), TermList.NIL)), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getCurrentLearningResourceType [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition111(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermConstant(168) /*hasLearningResourceType*/, TermList.NIL), ((domain)owner).calculateGetDefaultValue, "((domain)owner).calculateGetDefaultValue"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom229Branch0";
				case 1: return "Axiom229Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom230 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedGoals
	 */
		public Axiom230(Domain owner)
		{
			super(owner, new Predicate(169, 0, new TermList(TermList.NIL, new TermList(TermList.NIL, TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionNil(0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom230Branch0";
				default: return null;
			}
		}
	}

	/**
	 * premise of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition112 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition112(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(6, 11, new TermList(owner.getTermVariable(8), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(92, 11, new TermList(new TermList(owner.getTermVariable(9), new TermList(owner.getTermVariable(10), TermList.NIL)), new TermList(owner.getTermVariable(8), TermList.NIL))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "premise of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals [unknown source pos]";
		}
	}

	/**
	 * consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition113 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition113(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[1] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(9), new TermList(owner.getTermVariable(5), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionCall)
			p[2] = new PreconditionCall(new TermCall(new List(owner.getTermVariable(10), new TermList(owner.getTermVariable(6), TermList.NIL)), StdLib.moreEq, "StdLib.moreEq"), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "consequence of Conjunct #2 of Precondition of branch #0 of Branch -1 for axiom reachedGoals [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition114 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition114(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(92, 11, new TermList(new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(6), TermList.NIL)), new TermList(owner.getTermVariable(1), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(118, 11, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(0), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionForAll)
			p[3] = new PreconditionForAll(new Precondition112(owner, unifier), new Precondition113(owner, unifier), 11);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(169, 11, new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom reachedGoals [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom reachedGoals
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom231 extends Axiom
{
	/**
	 * Branch -1 for axiom reachedGoals
	 */
		public Axiom231(Domain owner)
		{
			super(owner, new Predicate(169, 11, new TermList(new TermList(new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL)), owner.getTermVariable(2)), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(4)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom reachedGoals [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition114(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom231Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom232 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 */
		public Axiom232(Domain owner)
		{
			super(owner, new Predicate(170, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom232Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom233 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLStrategiesH
	 */
		public Axiom233(Domain owner)
		{
			super(owner, new Predicate(170, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(170, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(2), owner.getTermVariable(5)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom233Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLStrategies
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom234 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLStrategies
	 */
		public Axiom234(Domain owner)
		{
			super(owner, new Predicate(171, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLStrategies [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(170, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom234Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGoalsFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom235 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalsFromCLGrouping
	 */
		public Axiom235(Domain owner)
		{
			super(owner, new Predicate(172, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalsFromCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(171, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom235Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom236 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 */
		public Axiom236(Domain owner)
		{
			super(owner, new Predicate(173, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(owner.getTermVariable(1), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom236Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom237 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLStrategiesH
	 */
		public Axiom237(Domain owner)
		{
			super(owner, new Predicate(173, 6, new TermList(owner.getTermVariable(0), new TermList(new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), TermList.NIL))), owner.getTermVariable(4)), new TermList(owner.getTermVariable(5), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLStrategiesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(173, 6, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(4), new TermList(new TermList(owner.getTermVariable(3), owner.getTermVariable(5)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom237Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLStrategies
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom238 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLStrategies
	 */
		public Axiom238(Domain owner)
		{
			super(owner, new Predicate(174, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLStrategies [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(173, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom238Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getGroupsFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom239 extends Axiom
{
	/**
	 * Branch -1 for axiom getGroupsFromCLGrouping
	 */
		public Axiom239(Domain owner)
		{
			super(owner, new Predicate(175, 3, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), TermList.NIL)), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGroupsFromCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(174, 3, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom239Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getEducationalLevelHH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom240 extends Axiom
{
	/**
	 * Branch -1 for axiom getEducationalLevelHH
	 */
		public Axiom240(Domain owner)
		{
			super(owner, new Predicate(178, 1, new TermList(owner.getTermVariable(0), new TermList(owner.getTermConstant(129) /*hasEducationalLevel*/, new TermList(owner.getTermConstant(176) /*hasMotivation*/, new TermList(owner.getTermConstant(177) /*hasAnxiety*/, TermList.NIL))))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getEducationalLevelHH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(7, 1, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermConstant(179) /*training*/, new TermList(owner.getTermConstant(180) /*higher-education*/, new TermList(owner.getTermConstant(181) /*school*/, new TermList(owner.getTermConstant(182) /*other*/, new TermList(owner.getTermConstant(132) /*very-high*/, new TermList(owner.getTermConstant(133) /*high*/, new TermList(owner.getTermConstant(134) /*very-difficult*/, new TermList(owner.getTermConstant(135) /*difficult*/, new TermList(owner.getTermConstant(136) /*medium*/, new TermList(owner.getTermConstant(137) /*low*/, new TermList(owner.getTermConstant(136) /*medium*/, new TermList(owner.getTermConstant(138) /*easy*/, TermList.NIL)))))))))))), TermList.NIL))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom240Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTitlesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom241 extends Axiom
{
	/**
	 * Branch -1 for axiom getTitlesH
	 */
		public Axiom241(Domain owner)
		{
			super(owner, new Predicate(253, 2, new TermList(owner.getTermVariable(0), new TermList(TermList.NIL, new TermList(owner.getTermVariable(1), TermList.NIL)))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTitlesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAssign(new TermCall(new List(owner.getTermVariable(1), TermList.NIL), ((domain)owner).calculateReverse, "((domain)owner).calculateReverse"), unifier, 0)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom241Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getTitlesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition161 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition161(Domain owner, Term[] unifier)
		{
			p = new Precondition[3];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 5, new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(1), new TermList(owner.getTermConstant(126) /*hasTitle*/, TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(253, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(4), owner.getTermVariable(3)), TermList.NIL)))), unifier);
			b = new Term[3][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[2] == null)
			{
				boolean b1changed = false;
				while (b[1] == null)
				{
					b[1] = p[1].nextBinding(state);
					if (b[1] == null)
						return null;
					else
						bestMatch = Math.max(bestMatch, 1);
					b1changed = true;
				}
				if ( b1changed ) {
					p[2].reset(state);
					p[2].bind(Term.merge(b, 2));
				}
				b[2] = p[2].nextBinding(state);
				if (b[2] == null)
					b[1] = null;
				else
					bestMatch = Math.max(bestMatch, 2);
			}

			Term[] retVal = Term.merge(b, 3);
			b[2] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			b[1] = null;
			b[2] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getTitlesH [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getTitlesH
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom242 extends Axiom
{
	/**
	 * Branch -1 for axiom getTitlesH
	 */
		public Axiom242(Domain owner)
		{
			super(owner, new Predicate(253, 5, new TermList(owner.getTermVariable(0), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(2)), new TermList(owner.getTermVariable(3), TermList.NIL)))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTitlesH [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition161(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new PreconditionAtomic(new Predicate(253, 5, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(2), new TermList(new TermList(owner.getTermVariable(1), owner.getTermVariable(3)), TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom242Branch0";
				case 1: return "Axiom242Branch1";
				default: return null;
			}
		}
	}

	/**
	 * Branch -1 for axiom getTitles
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom243 extends Axiom
{
	/**
	 * Branch -1 for axiom getTitles
	 */
		public Axiom243(Domain owner)
		{
			super(owner, new Predicate(254, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), TermList.NIL))), 1);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getTitles [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new PreconditionAtomic(new Predicate(253, 2, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(TermList.NIL, TermList.NIL)))), unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom243Branch0";
				default: return null;
			}
		}
	}

	/**
	 * Precondition of branch #0 of Branch -1 for axiom getGoalLearnersFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition372 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition372(Domain owner, Term[] unifier)
		{
			p = new Precondition[5];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(6, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(4), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAssignment)
			p[3] = new PreconditionAssign(owner.getTermVariable(5), unifier, 0);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			b = new Term[5][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[4] == null)
			{
				boolean b3changed = false;
				while (b[3] == null)
				{
					boolean b2changed = false;
					while (b[2] == null)
					{
						boolean b1changed = false;
						while (b[1] == null)
						{
							b[1] = p[1].nextBinding(state);
							if (b[1] == null)
								return null;
							else
								bestMatch = Math.max(bestMatch, 1);
							b1changed = true;
						}
						if ( b1changed ) {
							p[2].reset(state);
							p[2].bind(Term.merge(b, 2));
						}
						b[2] = p[2].nextBinding(state);
						if (b[2] == null)
							b[1] = null;
						else
							bestMatch = Math.max(bestMatch, 2);
						b2changed = true;
					}
					if ( b2changed ) {
						p[3].reset(state);
						p[3].bind(Term.merge(b, 3));
					}
					b[3] = p[3].nextBinding(state);
					if (b[3] == null)
						b[2] = null;
					else
						bestMatch = Math.max(bestMatch, 3);
					b3changed = true;
				}
				if ( b3changed ) {
					p[4].reset(state);
					p[4].bind(Term.merge(b, 4));
				}
				b[4] = p[4].nextBinding(state);
				if (b[4] == null)
					b[3] = null;
				else
					bestMatch = Math.max(bestMatch, 4);
			}

			Term[] retVal = Term.merge(b, 5);
			b[4] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #0 of Branch -1 for axiom getGoalLearnersFromCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Precondition of branch #1 of Branch -1 for axiom getGoalLearnersFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionConjunction)
	 */
	public static class Precondition373 extends Precondition
	{
		Precondition[] p;
		Term[][] b;

		public Precondition373(Domain owner, Term[] unifier)
		{
			p = new Precondition[6];
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[1] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(5), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(188) /*hasCLGroupingGoal*/, new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[2] = new PreconditionAtomic(new Predicate(3, 8, new TermList(owner.getTermVariable(6), new TermList(owner.getTermVariable(5), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[3] = new PreconditionAtomic(new Predicate(164, 8, new TermList(owner.getTermVariable(7), new TermList(owner.getTermVariable(4), new TermList(owner.getTermVariable(6), TermList.NIL)))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[4] = new PreconditionAtomic(new Predicate(7, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(7), TermList.NIL))), unifier);
			// The source position was not specified. (class: com.gamalocus.jshop2rt.LogicalExpressionAtomic)
			p[5] = new PreconditionAtomic(new Predicate(69, 8, new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermConstant(189) /*hasCLGroupingLearners*/, new TermList(owner.getTermVariable(3), TermList.NIL))))), unifier);
			b = new Term[6][];
			b[0] = unifier;
			b[0] = Term.merge( b, 1 );

			setFirst(false);
		}

		public void bind(Term[] binding)
		{
			b[0] = binding;
			b[0] = Term.merge( b, 1 );
			p[1].bind(binding);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}

		protected Term[] nextBindingHelper(State state)
		{
			bestMatch = 0;
			while (b[5] == null)
			{
				boolean b4changed = false;
				while (b[4] == null)
				{
					boolean b3changed = false;
					while (b[3] == null)
					{
						boolean b2changed = false;
						while (b[2] == null)
						{
							boolean b1changed = false;
							while (b[1] == null)
							{
								b[1] = p[1].nextBinding(state);
								if (b[1] == null)
									return null;
								else
									bestMatch = Math.max(bestMatch, 1);
								b1changed = true;
							}
							if ( b1changed ) {
								p[2].reset(state);
								p[2].bind(Term.merge(b, 2));
							}
							b[2] = p[2].nextBinding(state);
							if (b[2] == null)
								b[1] = null;
							else
								bestMatch = Math.max(bestMatch, 2);
							b2changed = true;
						}
						if ( b2changed ) {
							p[3].reset(state);
							p[3].bind(Term.merge(b, 3));
						}
						b[3] = p[3].nextBinding(state);
						if (b[3] == null)
							b[2] = null;
						else
							bestMatch = Math.max(bestMatch, 3);
						b3changed = true;
					}
					if ( b3changed ) {
						p[4].reset(state);
						p[4].bind(Term.merge(b, 4));
					}
					b[4] = p[4].nextBinding(state);
					if (b[4] == null)
						b[3] = null;
					else
						bestMatch = Math.max(bestMatch, 4);
					b4changed = true;
				}
				if ( b4changed ) {
					p[5].reset(state);
					p[5].bind(Term.merge(b, 5));
				}
				b[5] = p[5].nextBinding(state);
				if (b[5] == null)
					b[4] = null;
				else
					bestMatch = Math.max(bestMatch, 5);
			}

			Term[] retVal = Term.merge(b, 6);
			b[5] = null;
			return retVal;
		}

		protected void resetHelper(State state)
		{
			p[1].reset(state);
			p[2].reset(state);
			p[3].reset(state);
			p[4].reset(state);
			p[5].reset(state);
			b[1] = null;
			b[2] = null;
			b[3] = null;
			b[4] = null;
			b[5] = null;
		}
		@Override
		public String toString()
		{
			return "Precondition of branch #1 of Branch -1 for axiom getGoalLearnersFromCLGrouping [unknown source pos]";
		}
	}

	/**
	 * Branch -1 for axiom getGoalLearnersFromCLGrouping
	 * The source position was not specified. (class: com.gamalocus.jshop2rt.InternalAxiom)
	 */
	public static class Axiom244 extends Axiom
{
	/**
	 * Branch -1 for axiom getGoalLearnersFromCLGrouping
	 */
		public Axiom244(Domain owner)
		{
			super(owner, new Predicate(425, 8, new TermList(owner.getTermVariable(0), new TermList(owner.getTermVariable(1), new TermList(owner.getTermVariable(2), new TermList(owner.getTermVariable(3), new TermList(owner.getTermVariable(4), TermList.NIL)))))), 2);
		}

		@Override
		public String toString()
		{
			return "Branch -1 for axiom getGoalLearnersFromCLGrouping [unknown source pos]";
		}
		public Precondition getIterator(State state, Term[] unifier, int which)
		{
			Precondition p;

			switch (which)
			{
				case 0:
					p = (new Precondition372(owner, unifier)).setComparator(null);
				break;
				case 1:
					p = (new Precondition373(owner, unifier)).setComparator(null);
				break;
				default:
					return null;
			}

			p.reset(state);

			return p;
		}

		public String getLabel(int which)
		{
			switch (which)
			{
				case 0: return "Axiom244Branch0";
				case 1: return "Axiom244Branch1";
				default: return null;
			}
		}
	}

	public static final String sourcePath = "/Users/gcc/Dropbox/test/arquive/coursegenerator/planner/build/domain.lisp";
	public static final long sourceLastModified = 1347250365000L;

	public Length calculateLength = new Length();

	public Remove calculateRemove = new Remove();

	public DivideList calculateDivideList = new DivideList();

	public GetType calculateGetType = new GetType();

	public GetRelated calculateGetRelated = new GetRelated();

	public GetPropertyValue calculateGetPropertyValue = new GetPropertyValue();

	public ConcatList calculateConcatList = new ConcatList();

	public GetElements calculateGetElements = new GetElements();

	public Reverse calculateReverse = new Reverse();

	public BuildElement calculateBuildElement = new BuildElement();

	public ConcatText calculateConcatText = new ConcatText();

	public GetIndGoal calculateGetIndGoal = new GetIndGoal();

	public GetDefaultValue calculateGetDefaultValue = new GetDefaultValue();

	public GetUUID calculateGetUUID = new GetUUID();

	public Union calculateUnion = new Union();

	public GetCLGrouping calculateGetCLGrouping = new GetCLGrouping();

	public Floor calculateFloor = new Floor();

	public domain()
	{
		constants = new String[472];
		constants[0] = "same";
		constants[1] = "different";
		constants[2] = "first";
		constants[3] = "last";
		constants[4] = "rest";
		constants[5] = "length";
		constants[6] = "exist";
		constants[7] = "assignIterator";
		constants[8] = "remove";
		constants[9] = "divide";
		constants[10] = "duplicate";
		constants[11] = "sublistH";
		constants[12] = "sublist";
		constants[13] = "isPartOf";
		constants[14] = "inverseIsPartOf";
		constants[15] = "inverseOf";
		constants[16] = "isRequiredBy";
		constants[17] = "inverseIsRequiredBy";
		constants[18] = "isVariantOf";
		constants[19] = "inverseIsVariantOf";
		constants[20] = "s0k0";
		constants[21] = "isGoal";
		constants[22] = "s0k1";
		constants[23] = "s0k2";
		constants[24] = "s0k3";
		constants[25] = "s1k0";
		constants[26] = "s1k1";
		constants[27] = "s1k2";
		constants[28] = "s1k3";
		constants[29] = "s2k0";
		constants[30] = "s2k1";
		constants[31] = "s2k2";
		constants[32] = "s2k3";
		constants[33] = "s3k0";
		constants[34] = "s3k1";
		constants[35] = "s3k2";
		constants[36] = "s3k3";
		constants[37] = "s4k0";
		constants[38] = "s4k1";
		constants[39] = "s4k2";
		constants[40] = "s4k3";
		constants[41] = "filterElement";
		constants[42] = "class";
		constants[43] = "relation";
		constants[44] = "property";
		constants[45] = "filterByQueryH";
		constants[46] = "filterByQuery";
		constants[47] = "getElementsByTypeFromCurrentStateH";
		constants[48] = "getElementsByTypeFromCurrentState";
		constants[49] = "getElementsByPropertyFromCurrentStateH";
		constants[50] = "getElementsByPropertyFromCurrentState";
		constants[51] = "getElementsByPropertyDestValueFromCurrentStateH";
		constants[52] = "getElementsByPropertyDestValueFromCurrentState";
		constants[53] = "getElementsByRelationFromCurrentStateH";
		constants[54] = "getElementsByRelationFromCurrentState";
		constants[55] = "getElementsByInvRelationFromCurrentStateH";
		constants[56] = "getElementsFromCurrentStateH";
		constants[57] = "getElementsFromCurrentState";
		constants[58] = "getElements";
		constants[59] = "getElement";
		constants[60] = "getTypesH";
		constants[61] = "getTypes";
		constants[62] = "getTypesFromCurrentStateH";
		constants[63] = "getTypesFromCurrentState";
		constants[64] = "getType";
		constants[65] = "getPropertyValuesH";
		constants[66] = "getPropertyValues";
		constants[67] = "getPropertyValuesFromCurrentStateH";
		constants[68] = "getPropertyValuesFromCurrentState";
		constants[69] = "getPropertyValue";
		constants[70] = "getRelatedsH";
		constants[71] = "getRelateds";
		constants[72] = "getInvRelatedsFromCurrentStateH";
		constants[73] = "getRelatedsFromCurrentStateH";
		constants[74] = "getRelatedsFromCurrentState";
		constants[75] = "getRelated";
		constants[76] = "any";
		constants[77] = "equivalent";
		constants[78] = "Level";
		constants[79] = "hasSkillLevel";
		constants[80] = "hasKnowledgeLevel";
		constants[81] = "nothing";
		constants[82] = "getLevel";
		constants[83] = "accretion";
		constants[84] = "tuning";
		constants[85] = "restructuring";
		constants[86] = "rough";
		constants[87] = "explanatory";
		constants[88] = "associative";
		constants[89] = "autonomous";
		constants[90] = "slevel";
		constants[91] = "klevel";
		constants[92] = "getNumericalLevel";
		constants[93] = "hasKnowledgeType";
		constants[94] = "hasKnowledge";
		constants[95] = "getElementsWithoutRelationH";
		constants[96] = "Competency";
		constants[97] = "hasSkill";
		constants[98] = "getElementsWithoutRelation";
		constants[99] = "sortByH";
		constants[100] = "sortBy";
		constants[101] = "alreadySeenByLearners";
		constants[102] = "hasAlreadySeen";
		constants[103] = "true";
		constants[104] = "sortByAlreadySeenH";
		constants[105] = "sortByAlreadySeen";
		constants[106] = "buildPropertyQueryH";
		constants[107] = "buildPropertyQuery";
		constants[108] = "buildRelationQueryH";
		constants[109] = "buildRelationQuery";
		constants[110] = "getLearnerFundCompetencyLevel";
		constants[111] = "hasCompetencyLevel";
		constants[112] = "getLearnerAuxCompetencyLevel";
		constants[113] = "CurrentLDElement";
		constants[114] = "hasFundCompetency";
		constants[115] = "getLearnerCompetencyLevel";
		constants[116] = "Auxiliary";
		constants[117] = "getLearnerCompetencyLevelsH";
		constants[118] = "getLearnerCompetencyLevels";
		constants[119] = "filterLearnersByCompetencyLevelH";
		constants[120] = "filterLearnersByCompetencyLevel";
		constants[121] = "reachedCompetencyLevels";
		constants[122] = "readyAux";
		constants[123] = "hasPrerequisite";
		constants[124] = "getReadyAux";
		constants[125] = "getOrBuildReadyAux";
		constants[126] = "hasTitle";
		constants[127] = "temporarily-auxiliary";
		constants[128] = "getLearnerPropertyQuery";
		constants[129] = "hasEducationalLevel";
		constants[130] = "hasContext";
		constants[131] = "hasDifficult";
		constants[132] = "very-high";
		constants[133] = "high";
		constants[134] = "very-difficult";
		constants[135] = "difficult";
		constants[136] = "medium";
		constants[137] = "low";
		constants[138] = "easy";
		constants[139] = "very-easy";
		constants[140] = "getCompsFromGoalsH";
		constants[141] = "getCompsFromGoals";
		constants[142] = "getCompFromGoals";
		constants[143] = "getLevelsFromGoalsH";
		constants[144] = "getLevelsFromGoals";
		constants[145] = "getLevelFromGoals";
		constants[146] = "getGoalFromAuxiliary";
		constants[147] = "ForAuxiliary";
		constants[148] = "getGoalsFromAuxiliaryHH";
		constants[149] = "getGoalsFromAuxiliary";
		constants[150] = "getGoalsFromAuxiliariesH";
		constants[151] = "hasLearningObjective";
		constants[152] = "getGoalsFromAuxiliaries";
		constants[153] = "getIndGoalsHH";
		constants[154] = "getIndGoalsH";
		constants[155] = "getIndGoals";
		constants[156] = "getIndGoalsByCompHH";
		constants[157] = "getIndGoalsByCompH";
		constants[158] = "getIndGoalsByCompLearnersHH";
		constants[159] = "getIndGoalsByCompLearnersH";
		constants[160] = "filterGoalsByCompH";
		constants[161] = "filterGoalsByComp";
		constants[162] = "filterGoalByGroup";
		constants[163] = "filterGoalsByLevelH";
		constants[164] = "filterGoalsByLevel";
		constants[165] = "filterGroupsByCompH";
		constants[166] = "filterGroupsByComp";
		constants[167] = "getCurrentLearningResourceType";
		constants[168] = "hasLearningResourceType";
		constants[169] = "reachedGoals";
		constants[170] = "getGoalsFromCLStrategiesH";
		constants[171] = "getGoalsFromCLStrategies";
		constants[172] = "getGoalsFromCLGrouping";
		constants[173] = "getGroupsFromCLStrategiesH";
		constants[174] = "getGroupsFromCLStrategies";
		constants[175] = "getGroupsFromCLGrouping";
		constants[176] = "hasMotivation";
		constants[177] = "hasAnxiety";
		constants[178] = "getEducationalLevelHH";
		constants[179] = "training";
		constants[180] = "higher-education";
		constants[181] = "school";
		constants[182] = "other";
		constants[183] = "hasGoal";
		constants[184] = "hasCompetency";
		constants[185] = "hasParticipant";
		constants[186] = "hasCLGroupingTheory";
		constants[187] = "hasCLGroupingStrategy";
		constants[188] = "hasCLGroupingGoal";
		constants[189] = "hasCLGroupingLearners";
		constants[190] = "hasCurrentUoL";
		constants[191] = "hasAttitude";
		constants[192] = "hasIndGoal";
		constants[193] = "hasGoalStage";
		constants[194] = "hasGroup";
		constants[195] = "hasRole";
		constants[196] = "independent";
		constants[197] = "hasBeenSeen";
		constants[198] = "insertedIn";
		constants[199] = "hasType";
		constants[200] = "hasHref";
		constants[201] = "type";
		constants[202] = "href";
		constants[203] = "conditions";
		constants[204] = "ILEvent";
		constants[205] = "Conditions";
		constants[206] = "Role";
		constants[207] = "Instructional";
		constants[208] = "Learning";
		constants[209] = "ILEventItem";
		constants[210] = "Item";
		constants[211] = "if";
		constants[212] = "then";
		constants[213] = "show";
		constants[214] = "hide";
		constants[215] = "else";
		constants[216] = "_or";
		constants[217] = "is-member-of-role";
		constants[218] = "ref";
		constants[219] = "item-ref";
		constants[220] = "service";
		constants[221] = "identifier";
		constants[222] = "serv";
		constants[223] = "isvisible";
		constants[224] = "hasPersonality";
		constants[225] = "introversion";
		constants[226] = "Service";
		constants[227] = "asynchronous";
		constants[228] = "conference";
		constants[229] = "conference-type";
		constants[230] = "Asynchronous";
		constants[231] = "Conference";
		constants[232] = "synchronous";
		constants[233] = "Synchronous";
		constants[234] = "Group";
		constants[235] = "LDLearner";
		constants[236] = "participant";
		constants[237] = "role-ref";
		constants[238] = "env";
		constants[239] = "environment-ref";
		constants[240] = "environment";
		constants[241] = "Environment";
		constants[242] = "group";
		constants[243] = "learner";
		constants[244] = "information";
		constants[245] = "hasResource";
		constants[246] = "item";
		constants[247] = "identifierref";
		constants[248] = "Resource";
		constants[249] = "fall-back";
		constants[250] = "LearningObject";
		constants[251] = "lo";
		constants[252] = "learning-object";
		constants[253] = "getTitlesH";
		constants[254] = "getTitles";
		constants[255] = "title";
		constants[256] = "la";
		constants[257] = "learning-activity-ref";
		constants[258] = "learning-activity";
		constants[259] = "ClarifyingProblem";
		constants[260] = "Interactions";
		constants[261] = "InteractionEnvironment";
		constants[262] = "ILEnvironment";
		constants[263] = "activity-description";
		constants[264] = "IdentifyingProblem";
		constants[265] = "ILEventDescription";
		constants[266] = "ExternalizationProblem";
		constants[267] = "DemonHowSolveProblem";
		constants[268] = "Demonstration";
		constants[269] = "ObservingDemonstration";
		constants[270] = "DiagProblem";
		constants[271] = "Diagnosis";
		constants[272] = "ReceivingDiagnosis";
		constants[273] = "ElicitPerformance";
		constants[274] = "GivingPerformance";
		constants[275] = "ReceivingPerformance";
		constants[276] = "InstDiscussion";
		constants[277] = "RequestOpinion";
		constants[278] = "ExposingOpinion";
		constants[279] = "InstThinking";
		constants[280] = "Argumentation";
		constants[281] = "ReceivingArguments";
		constants[282] = "KnowlTransmission";
		constants[283] = "Explanation";
		constants[284] = "ReceivingExplanation";
		constants[285] = "Monitoring";
		constants[286] = "Checking";
		constants[287] = "BeingChecked";
		constants[288] = "NotifyHowLearnerIs";
		constants[289] = "GivingInformation";
		constants[290] = "ReceivingInformation";
		constants[291] = "ReqProblemDetail";
		constants[292] = "AskProblems";
		constants[293] = "PointProblems";
		constants[294] = "SetLearningContext";
		constants[295] = "ShowSolution";
		constants[296] = "as";
		constants[297] = "activity-structure-ref";
		constants[298] = "activity-structure";
		constants[299] = "structure-type";
		constants[300] = "selection";
		constants[301] = "DemonHowSolveProblemClarifyingProblem";
		constants[302] = "ProblemDetail";
		constants[303] = "Iteractions";
		constants[304] = "DemonHowSolveProblemInstDiscussion";
		constants[305] = "KnowlTransmissionReqProblemDetail";
		constants[306] = "sequence";
		constants[307] = "MetadiagElicitPerformance";
		constants[308] = "Metadiagnosing";
		constants[309] = "MetarecognizeCommunication";
		constants[310] = "WithInstigating";
		constants[311] = "WithMonitoring";
		constants[312] = "MetarecognizeProgress";
		constants[313] = "MonitInstThinkWithMetademon";
		constants[314] = "WithMetademon";
		constants[315] = "MonitoringInstThinking";
		constants[316] = "MonitoringNotifyHowLearnerIs";
		constants[317] = "ReqProblemDetailInstThinking";
		constants[318] = "ReqProblemDetailNotifyHowLearnerIs";
		constants[319] = "ReqProblemDetailShowSolution";
		constants[320] = "ShowSolutionInstDiscussion";
		constants[321] = "Strategy";
		constants[322] = "CurrentLDInteractions";
		constants[323] = "AnchoredInstruction";
		constants[324] = "CogApprenticeship";
		constants[325] = "CogFlexibility";
		constants[326] = "DistCognition";
		constants[327] = "LPP";
		constants[328] = "PeerTutoring";
		constants[329] = "AnchoredInstructor";
		constants[330] = "role";
		constants[331] = "RoleDescription";
		constants[332] = "AnchorHolder";
		constants[333] = "Apprenticeship";
		constants[334] = "Audience";
		constants[335] = "FullParticipantLearner";
		constants[336] = "FullParticipantInstructor";
		constants[337] = "FullParticipant";
		constants[338] = "Master";
		constants[339] = "Panelist";
		constants[340] = "PeerTutee";
		constants[341] = "PeerTutor";
		constants[342] = "Peripheral";
		constants[343] = "rp";
		constants[344] = "role-part";
		constants[345] = "LearningByApprenticeship";
		constants[346] = "LearningByBeingTaught";
		constants[347] = "CLScenario";
		constants[348] = "LearningByDiagnosing";
		constants[349] = "LearningByDiscussion";
		constants[350] = "LearningByGuiding";
		constants[351] = "LearningByPractice";
		constants[352] = "LearningByReflection";
		constants[353] = "LearningBySelfexpression";
		constants[354] = "LearningByTeaching";
		constants[355] = "act";
		constants[356] = "Phase";
		constants[357] = "play";
		constants[358] = "Fundamental";
		constants[359] = "createAnchoredInstruction";
		constants[360] = "createCogApprenticeshipCLScenario";
		constants[361] = "createLDCogFlexibilityCLScenario";
		constants[362] = "createDistCognitionCLScenario";
		constants[363] = "createLPPCLScenario";
		constants[364] = "createPeerTutoringCLScenario";
		constants[365] = "learning-objectives";
		constants[366] = "Output";
		constants[367] = "ResumeDiscussion";
		constants[368] = "Resume";
		constants[369] = "of";
		constants[370] = "Simulation";
		constants[371] = "Result";
		constants[372] = "simulation";
		constants[373] = "in";
		constants[374] = "Solution";
		constants[375] = "for";
		constants[376] = "UoL";
		constants[377] = "DiscussionSession";
		constants[378] = "ld";
		constants[379] = "unit-of-learning-href";
		constants[380] = "learning-design";
		constants[381] = "uri";
		constants[382] = "level";
		constants[383] = "B";
		constants[384] = "method";
		constants[385] = "Discussion";
		constants[386] = "Session";
		constants[387] = "Script";
		constants[388] = "Jigsaw";
		constants[389] = "Expert";
		constants[390] = "DiscussionActivity";
		constants[391] = "SessionDescription";
		constants[392] = "ExpertSession";
		constants[393] = "ExpertActivity";
		constants[394] = "Individual";
		constants[395] = "IndividualActivity";
		constants[396] = "JigsawSession";
		constants[397] = "Sessions";
		constants[398] = "JigsawActivity";
		constants[399] = "PairSession";
		constants[400] = "Pair";
		constants[401] = "PairActivity";
		constants[402] = "RoleSession";
		constants[403] = "RoleActivity";
		constants[404] = "Share";
		constants[405] = "ShareActivity";
		constants[406] = "SimulationSession";
		constants[407] = "SimulationActivity";
		constants[408] = "GroupActivity";
		constants[409] = "nroGroupsInPhase";
		constants[410] = "hasCLExperience";
		constants[411] = "positive-interdependence";
		constants[412] = "individual-accountability";
		constants[413] = "discussion";
		constants[414] = "createJigsawScript";
		constants[415] = "Pyramid";
		constants[416] = "createPyramidScript";
		constants[417] = "createSimulationScript";
		constants[418] = "questionnaire";
		constants[419] = "ThinkPairShare";
		constants[420] = "very-low";
		constants[421] = "focus-students-attention";
		constants[422] = "long-term-memory";
		constants[423] = "analytical-reasoning";
		constants[424] = "createThinkPairShareScript";
		constants[425] = "getGoalLearnersFromCLGrouping";
		constants[426] = "createLDScriptCLScenario";
		constants[427] = "createLDScript";
		constants[428] = "anchored-instruction";
		constants[429] = "learning-by-diagnosing";
		constants[430] = "learning-by-being-taught-anchor-holder";
		constants[431] = "cognitive-apprenticeship";
		constants[432] = "learning-by-guiding";
		constants[433] = "learning-by-apprenticeship";
		constants[434] = "cognitive-flexibility";
		constants[435] = "learning-by-selfexpression";
		constants[436] = "learning-by-reflection";
		constants[437] = "distributed-cognition";
		constants[438] = "learning-by-discussion";
		constants[439] = "lpp";
		constants[440] = "learning-by-practice";
		constants[441] = "peer-tutoring";
		constants[442] = "learning-by-teaching";
		constants[443] = "learning-by-being-taught-peer-tutee";
		constants[444] = "createLDCLScenario";
		constants[445] = "prerequisites";
		constants[446] = "Develop";
		constants[447] = "example";
		constants[448] = "Knowledge";
		constants[449] = "Illustrate";
		constants[450] = "WithExample";
		constants[451] = "IllustrateWithExampleActivity";
		constants[452] = "Motivation";
		constants[453] = "exercise";
		constants[454] = "MotivationActivity";
		constants[455] = "WithExercise";
		constants[456] = "PracticeSession";
		constants[457] = "Practice";
		constants[458] = "PracticeWithExerciseActivity";
		constants[459] = "ShowProblem";
		constants[460] = "real-world-problem";
		constants[461] = "ShowProblemActivity";
		constants[462] = "ShowProof";
		constants[463] = "evidence";
		constants[464] = "proof";
		constants[465] = "demonstration";
		constants[466] = "ShowProofActivity";
		constants[467] = "Discover";
		constants[468] = "law";
		constants[469] = "theorem";
		constants[470] = "law-of-nature";
		constants[471] = "Introduction";

		compoundTasks = new String[544];
		compoundTasks[0] = "startLDElement!";
		compoundTasks[1] = "addUsersToGroup";
		compoundTasks[2] = "removeUsersFromGroup";
		compoundTasks[3] = "addUsersToRole";
		compoundTasks[4] = "removeUsersFromRole";
		compoundTasks[5] = "insertResourceOnce";
		compoundTasks[6] = "createLDILEventConditions!";
		compoundTasks[7] = "createLDILEventConditions";
		compoundTasks[8] = "createLDTitle";
		compoundTasks[9] = "createILEventConditions";
		compoundTasks[10] = "distributeLDMemberOfRole";
		compoundTasks[11] = "distributeItemRef";
		compoundTasks[12] = "distributeMemberOfRole";
		compoundTasks[13] = "createConferenceService";
		compoundTasks[14] = "createLDConferenceService";
		compoundTasks[15] = "createLDAsynchronousConference";
		compoundTasks[16] = "createLDSynchronousConference";
		compoundTasks[17] = "createConference";
		compoundTasks[18] = "createLDItem";
		compoundTasks[19] = "distributeParticipants";
		compoundTasks[20] = "createEnvironment";
		compoundTasks[21] = "createLDEnvironment";
		compoundTasks[22] = "distributeLearningObject";
		compoundTasks[23] = "createLDGroup!";
		compoundTasks[24] = "createLDGroup";
		compoundTasks[25] = "createGroup";
		compoundTasks[26] = "distributeItem";
		compoundTasks[27] = "createLDInformation";
		compoundTasks[28] = "createLDItem!";
		compoundTasks[29] = "createLDInstructItem";
		compoundTasks[30] = "createLDLearningItem";
		compoundTasks[31] = "createLDLearningObject";
		compoundTasks[32] = "createLDLearningObject!";
		compoundTasks[33] = "createLearningObject";
		compoundTasks[34] = "createClarifyingProblemILEvent";
		compoundTasks[35] = "createLDClarifyingProblemILEvent";
		compoundTasks[36] = "createClarifyingProblemILEvent!";
		compoundTasks[37] = "createLDClarifyingProblemILEventDescription";
		compoundTasks[38] = "createLDClarifyingProblemILEnvironment";
		compoundTasks[39] = "createClarifyingProblemILEventDescription";
		compoundTasks[40] = "createClarifyingProblemILEventDescription!";
		compoundTasks[41] = "createDemonHowSolveProblemILEvent";
		compoundTasks[42] = "createLDDemonHowSolveProblemILEvent";
		compoundTasks[43] = "createDemonHowSolveProblemILEvent!";
		compoundTasks[44] = "createLDDemonHowSolveProblemILEventDescription";
		compoundTasks[45] = "createLDDemonHowSolveProblemILEnvironment";
		compoundTasks[46] = "createDemonHowSolveProblemILEventDescription";
		compoundTasks[47] = "createDemonHowSolveProblemILEventDescription!";
		compoundTasks[48] = "createDiagProblemILEvent";
		compoundTasks[49] = "createLDDiagProblemILEvent";
		compoundTasks[50] = "createDiagProblemILEvent!";
		compoundTasks[51] = "createLDDiagProblemILEventDescription";
		compoundTasks[52] = "createLDDiagProblemILEnvironment";
		compoundTasks[53] = "createDiagProblemILEventDescription";
		compoundTasks[54] = "createDiagProblemILEventDescription!";
		compoundTasks[55] = "createElicitPerformanceILEvent";
		compoundTasks[56] = "createLDElicitPerformanceILEvent";
		compoundTasks[57] = "createElicitPerformanceILEvent!";
		compoundTasks[58] = "createLDElicitPerformanceILEventDescription";
		compoundTasks[59] = "createLDElicitPerformanceILEnvironment";
		compoundTasks[60] = "createElicitPerformanceILEventDescription";
		compoundTasks[61] = "createElicitPerformanceILEventDescription!";
		compoundTasks[62] = "createInstDiscussionILEvent";
		compoundTasks[63] = "createLDInstDiscussionILEvent";
		compoundTasks[64] = "createInstDiscussionILEvent!";
		compoundTasks[65] = "createLDInstDiscussionILEventDescription";
		compoundTasks[66] = "createLDInstDiscussionILEnvironment";
		compoundTasks[67] = "createInstDiscussionILEventDescription";
		compoundTasks[68] = "createInstDiscussionILEventDescription!";
		compoundTasks[69] = "createInstThinkingILEvent";
		compoundTasks[70] = "createLDInstThinkingILEvent";
		compoundTasks[71] = "createInstThinkingILEvent!";
		compoundTasks[72] = "createLDInstThinkingILEventDescription";
		compoundTasks[73] = "createLDInstThinkingILEnvironment";
		compoundTasks[74] = "createInstThinkingILEventDescription";
		compoundTasks[75] = "createInstThinkingILEventDescription!";
		compoundTasks[76] = "createKnowlTransmissionILEvent";
		compoundTasks[77] = "createLDKnowlTransmissionILEvent";
		compoundTasks[78] = "createKnowlTransmissionILEvent!";
		compoundTasks[79] = "createLDKnowlTransmissionILEventDescription";
		compoundTasks[80] = "createLDKnowlTransmissionILEnvironment";
		compoundTasks[81] = "createKnowlTransmissionILEventDescription";
		compoundTasks[82] = "createKnowlTransmissionILEventDescription!";
		compoundTasks[83] = "createMonitoringILEvent";
		compoundTasks[84] = "createLDMonitoringILEvent";
		compoundTasks[85] = "createMonitoringILEvent!";
		compoundTasks[86] = "createLDMonitoringILEventDescription";
		compoundTasks[87] = "createLDMonitoringILEnvironment";
		compoundTasks[88] = "createMonitoringILEventDescription";
		compoundTasks[89] = "createMonitoringILEventDescription!";
		compoundTasks[90] = "createNotifyHowLearnerIsILEvent";
		compoundTasks[91] = "createLDNotifyHowLearnerIsILEvent";
		compoundTasks[92] = "createNotifyHowLearnerIsILEvent!";
		compoundTasks[93] = "createLDNotifyHowLearnerIsILEventDescription";
		compoundTasks[94] = "createLDNotifyHowLearnerIsILEnvironment";
		compoundTasks[95] = "createNotifyHowLearnerIsILEventDescription";
		compoundTasks[96] = "createNotifyHowLearnerIsILEventDescription!";
		compoundTasks[97] = "createReqProblemDetailILEvent";
		compoundTasks[98] = "createLDReqProblemDetailILEvent";
		compoundTasks[99] = "createReqProblemDetailILEvent!";
		compoundTasks[100] = "createLDReqProblemDetailILEventDescription";
		compoundTasks[101] = "createLDReqProblemDetailILEnvironment";
		compoundTasks[102] = "createReqProblemDetailILEventDescription";
		compoundTasks[103] = "createReqProblemDetailILEventDescription!";
		compoundTasks[104] = "createSetLearningContextILEvent";
		compoundTasks[105] = "createLDSetLearningContextILEvent";
		compoundTasks[106] = "createSetLearningContextILEvent!";
		compoundTasks[107] = "createLDSetLearningContextILEventDescription";
		compoundTasks[108] = "createLDSetLearningContextILEnvironment";
		compoundTasks[109] = "createSetLearningContextILEventDescription";
		compoundTasks[110] = "createSetLearningContextILEventDescription!";
		compoundTasks[111] = "createShowSolutionILEvent";
		compoundTasks[112] = "createLDShowSolutionILEvent";
		compoundTasks[113] = "createShowSolutionILEvent!";
		compoundTasks[114] = "createLDShowSolutionILEventDescription";
		compoundTasks[115] = "createLDShowSolutionILEnvironment";
		compoundTasks[116] = "createShowSolutionILEventDescription";
		compoundTasks[117] = "createShowSolutionILEventDescription!";
		compoundTasks[118] = "createDemonHowSolveProblemClarifyingProblemInteractions";
		compoundTasks[119] = "createLDDemonHowSolveProblemClarifyingProblemInteractions";
		compoundTasks[120] = "createDemonHowSolveProblemClarifyingProblemInteractions!";
		compoundTasks[121] = "createLDDemonHowSolveProblemClarifyingProblemInteractionEnvironment";
		compoundTasks[122] = "createDemonHowSolveProblemInstDiscussionInteractions";
		compoundTasks[123] = "createLDDemonHowSolveProblemInstDiscussionInteractions";
		compoundTasks[124] = "createDemonHowSolveProblemInstDiscussionInteractions!";
		compoundTasks[125] = "createLDDemonHowSolveProblemInstDiscussionInteractionEnvironment";
		compoundTasks[126] = "createKnowlTransmissionReqProblemDetailInteractions";
		compoundTasks[127] = "createLDKnowlTransmissionReqProblemDetailInteractions";
		compoundTasks[128] = "createKnowlTransmissionReqProblemDetailInteractions!";
		compoundTasks[129] = "createLDKnowlTransmissionReqProblemDetailInteractionEnvironment";
		compoundTasks[130] = "createMetadiagElicitPerformanceInteractions";
		compoundTasks[131] = "createLDMetadiagElicitPerformanceInteractions";
		compoundTasks[132] = "createMetadiagElicitPerformanceInteractions!";
		compoundTasks[133] = "createLDMetadiagElicitPerformanceInteractionEnvironment";
		compoundTasks[134] = "createMetadiagnosingInteractions";
		compoundTasks[135] = "createLDMetadiagnosingInteractions";
		compoundTasks[136] = "createMetadiagnosingInteractions!";
		compoundTasks[137] = "createLDShowSolutionInstDiscussionInteractions";
		compoundTasks[138] = "createLDMetadiagnosingInteractionEnvironment";
		compoundTasks[139] = "createMetarecognizeCommunicationWithInstigatingInteractions";
		compoundTasks[140] = "createLDMetarecognizeCommunicationWithInstigatingInteractions";
		compoundTasks[141] = "createMetarecognizeCommunicationWithInstigatingInteractions!";
		compoundTasks[142] = "createLDMetarecognizeCommunicationWithInstigatingInteractionEnvironment";
		compoundTasks[143] = "createMetarecognizeCommunicationWithMonitoringInteractions";
		compoundTasks[144] = "createLDMetarecognizeCommunicationWithMonitoringInteractions";
		compoundTasks[145] = "createMetarecognizeCommunicationWithMonitoringInteractions!";
		compoundTasks[146] = "createLDMetarecognizeCommunicationWithMonitoringInteractionEnvironment";
		compoundTasks[147] = "createMetarecognizeCommunicationInteractions";
		compoundTasks[148] = "createLDMetarecognizeCommunicationInteractions";
		compoundTasks[149] = "createMetarecognizeCommunicationInteractions!";
		compoundTasks[150] = "createLDMetarecognizeCommunicationInteractionEnvironment";
		compoundTasks[151] = "createMetarecognizeProgressInteractions";
		compoundTasks[152] = "createLDMetarecognizeProgressInteractions";
		compoundTasks[153] = "createMetarecognizeProgressInteractions!";
		compoundTasks[154] = "createLDMetarecognizeProgressInteractionEnvironment";
		compoundTasks[155] = "createMonitInstThinkWithMetademonInteractions";
		compoundTasks[156] = "createLDMonitInstThinkWithMetademonInteractions";
		compoundTasks[157] = "createMonitInstThinkWithMetademonInteractions!";
		compoundTasks[158] = "createLDMonitoringInstThinkingInteractions";
		compoundTasks[159] = "createLDReqProblemDetailShowSolutionInteractions";
		compoundTasks[160] = "createLDMonitInstThinkWithMetademonInteractionEnvironment";
		compoundTasks[161] = "createMonitoringInstThinkingInteractions";
		compoundTasks[162] = "createMonitoringInstThinkingInteractions!";
		compoundTasks[163] = "createLDMonitoringInstThinkingInteractionEnvironment";
		compoundTasks[164] = "createMonitoringNotifyHowLearnerIsInteractions";
		compoundTasks[165] = "createLDMonitoringNotifyHowLearnerIsInteractions";
		compoundTasks[166] = "createMonitoringNotifyHowLearnerIsInteractions!";
		compoundTasks[167] = "createLDMonitoringNotifyHowLearnerIsInteractionEnvironment";
		compoundTasks[168] = "createReqProblemDetailInstThinkingInteractions";
		compoundTasks[169] = "createLDReqProblemDetailInstThinkingInteractions";
		compoundTasks[170] = "createReqProblemDetailInstThinkingInteractions!";
		compoundTasks[171] = "createLDReqProblemDetailInstThinkingInteractionEnvironment";
		compoundTasks[172] = "createReqProblemDetailNotifyHowLearnerIsInteractions";
		compoundTasks[173] = "createLDReqProblemDetailNotifyHowLearnerIsInteractions";
		compoundTasks[174] = "createReqProblemDetailNotifyHowLearnerIsInteractions!";
		compoundTasks[175] = "createLDReqProblemDetailNotifyHowLearnerIsInteractionEnvironment";
		compoundTasks[176] = "createReqProblemDetailShowSolutionInteractions";
		compoundTasks[177] = "createReqProblemDetailShowSolutionInteractions!";
		compoundTasks[178] = "createLDReqProblemDetailShowSolutionInteractionEnvironment";
		compoundTasks[179] = "createShowSolutionInstDiscussionInteractions";
		compoundTasks[180] = "createShowSolutionInstDiscussionInteractions!";
		compoundTasks[181] = "createLDShowSolutionInstDiscussionInteractionEnvironment";
		compoundTasks[182] = "createAnchoredInstructionInteractions";
		compoundTasks[183] = "createLDAnchoredInstructionInteractions";
		compoundTasks[184] = "createLDAnchoredInstructionInteractionEnvironment";
		compoundTasks[185] = "createCogApprenticeshipInteractions";
		compoundTasks[186] = "createLDCogApprenticeshipInteractions";
		compoundTasks[187] = "createLDCogApprenticeshipInteractionEnvironment";
		compoundTasks[188] = "createCogFlexibilityInteractions";
		compoundTasks[189] = "createLDCogFlexibilityInteractions";
		compoundTasks[190] = "createLDCogFlexibilityInteractionEnvironment";
		compoundTasks[191] = "createDistCognitionInteractions";
		compoundTasks[192] = "createLDDistCognitionInteractions";
		compoundTasks[193] = "createLDDistCognitionInteractionEnvironment";
		compoundTasks[194] = "createLPPInteractions";
		compoundTasks[195] = "createLDLPPInteractions";
		compoundTasks[196] = "createLDLPPInteractionEnvironment";
		compoundTasks[197] = "createPeerTutoringInteractions";
		compoundTasks[198] = "createLDPeerTutoringInteractions";
		compoundTasks[199] = "createLDPeerTutoringInteractionEnvironment";
		compoundTasks[200] = "createLDAnchoredInstructorRole!";
		compoundTasks[201] = "createLDAnchoredInstructorRole";
		compoundTasks[202] = "createAnchoredInstructorRole";
		compoundTasks[203] = "createLDAnchoredInstructorInformation!";
		compoundTasks[204] = "createLDAnchoredInstructorInformation";
		compoundTasks[205] = "createLDAnchorHolderRole!";
		compoundTasks[206] = "createLDAnchorHolderRole";
		compoundTasks[207] = "createAnchorHolderRole";
		compoundTasks[208] = "createLDAnchorHolderInformation!";
		compoundTasks[209] = "createLDAnchorHolderInformation";
		compoundTasks[210] = "createLDApprenticeshipRole!";
		compoundTasks[211] = "createLDApprenticeshipRole";
		compoundTasks[212] = "createApprenticeshipRole";
		compoundTasks[213] = "createLDApprenticeshipInformation!";
		compoundTasks[214] = "createLDApprenticeshipInformation";
		compoundTasks[215] = "createLDAudienceRole!";
		compoundTasks[216] = "createLDAudienceRole";
		compoundTasks[217] = "createAudienceRole";
		compoundTasks[218] = "createLDAudienceInformation!";
		compoundTasks[219] = "createLDAudienceInformation";
		compoundTasks[220] = "createLDFullParticipantLearnerRole!";
		compoundTasks[221] = "createLDFullParticipantLearnerRole";
		compoundTasks[222] = "createFullParticipantRole";
		compoundTasks[223] = "createLDFullParticipantInstructorRole!";
		compoundTasks[224] = "createLDFullParticipantInstructorRole";
		compoundTasks[225] = "createLDFullParticipantInformation!";
		compoundTasks[226] = "createLDFullParticipantInformation";
		compoundTasks[227] = "createLDMasterRole!";
		compoundTasks[228] = "createLDMasterRole";
		compoundTasks[229] = "createMasterRole";
		compoundTasks[230] = "createLDMasterInformation!";
		compoundTasks[231] = "createLDMasterInformation";
		compoundTasks[232] = "createLDPanelistRole!";
		compoundTasks[233] = "createLDPanelistRole";
		compoundTasks[234] = "createPanelistRole";
		compoundTasks[235] = "createLDPanelistInformation!";
		compoundTasks[236] = "createLDPanelistInformation";
		compoundTasks[237] = "createLDPeerTuteeRole!";
		compoundTasks[238] = "createLDPeerTuteeRole";
		compoundTasks[239] = "createPeerTuteeRole";
		compoundTasks[240] = "createLDPeerTuteeInformation!";
		compoundTasks[241] = "createLDPeerTuteeInformation";
		compoundTasks[242] = "createLDPeerTutorRole!";
		compoundTasks[243] = "createLDPeerTutorRole";
		compoundTasks[244] = "createPeerTutorRole";
		compoundTasks[245] = "createLDPeerTutorInformation!";
		compoundTasks[246] = "createLDPeerTutorInformation";
		compoundTasks[247] = "createLDPeripheralRole!";
		compoundTasks[248] = "createLDPeripheralRole";
		compoundTasks[249] = "createPeripheralRole";
		compoundTasks[250] = "createLDPeripheralInformation!";
		compoundTasks[251] = "createLDPeripheralInformation";
		compoundTasks[252] = "createLearningByApprenticeshipStrategy";
		compoundTasks[253] = "createLDLearningByApprenticeshipStrategy";
		compoundTasks[254] = "createLDApprenticeshipInteractions";
		compoundTasks[255] = "createLearningByBeingTaughtStrategy";
		compoundTasks[256] = "createLDLearningByBeingTaughtStrategy";
		compoundTasks[257] = "createLDPeerTuteeInteractions";
		compoundTasks[258] = "createLDAnchorHolderInteractions";
		compoundTasks[259] = "createLearningByDiagnosingStrategy";
		compoundTasks[260] = "createLDLearningByDiagnosingStrategy";
		compoundTasks[261] = "createLDAnchoredInstructorInteractions";
		compoundTasks[262] = "createLearningByDiscussionStrategy";
		compoundTasks[263] = "createLDLearningByDiscussionInstructionalStrategy";
		compoundTasks[264] = "createLDFullParticipantInteractions";
		compoundTasks[265] = "createLDLearningByDiscussionLearningStrategy";
		compoundTasks[266] = "createLearningByGuidingStrategy";
		compoundTasks[267] = "createLDLearningByGuidingStrategy";
		compoundTasks[268] = "createLDMasterInteractions";
		compoundTasks[269] = "createLearningByPracticeStrategy";
		compoundTasks[270] = "createLDLearningByPracticeStrategy";
		compoundTasks[271] = "createLDPeripheralInteractions";
		compoundTasks[272] = "createLearningByReflectionStrategy";
		compoundTasks[273] = "createLDLearningByReflectionStrategy";
		compoundTasks[274] = "createLDAudienceInteractions";
		compoundTasks[275] = "createLearningBySelfexpressionStrategy";
		compoundTasks[276] = "createLDLearningBySelfexpressionStrategy";
		compoundTasks[277] = "createLDPanelistInteractions";
		compoundTasks[278] = "createLearningByTeachingStrategy";
		compoundTasks[279] = "createLDLearningByTeachingStrategy";
		compoundTasks[280] = "createLDPeerTutorInteractions";
		compoundTasks[281] = "createAnchoredInstructionPhase";
		compoundTasks[282] = "createLDAnchoredInstructionPhase";
		compoundTasks[283] = "createCogApprenticeshipPhase";
		compoundTasks[284] = "createLDCogApprenticeshipPhase";
		compoundTasks[285] = "createCogFlexibilityPhase";
		compoundTasks[286] = "createLDCogFlexibilityPhase";
		compoundTasks[287] = "createDistCognitionPhase";
		compoundTasks[288] = "createLDDistCognitionPhase";
		compoundTasks[289] = "createLPPPhase";
		compoundTasks[290] = "createLDLPPPhase";
		compoundTasks[291] = "createPeerTutoringPhase";
		compoundTasks[292] = "createLDPeerTutoringPhase";
		compoundTasks[293] = "createLDAnchoredInstructionCLScenario!";
		compoundTasks[294] = "createLDAnchoredInstructionCLScenario";
		compoundTasks[295] = "createAnchoredInstructionCLScenario";
		compoundTasks[296] = "createAnchoredInstructionCLScenario!";
		compoundTasks[297] = "createLDCogApprenticeshipCLScenario!";
		compoundTasks[298] = "createLDCogApprenticeshipCLScenario";
		compoundTasks[299] = "createCogApprenticeshipCLScenario";
		compoundTasks[300] = "createCogApprenticeshipCLScenario!";
		compoundTasks[301] = "createLDCogFlexibilityCLScenario!";
		compoundTasks[302] = "createLDCogFlexibilityCLScenario";
		compoundTasks[303] = "createCogFlexibilityCLScenario";
		compoundTasks[304] = "createCogFlexibilityCLScenario!";
		compoundTasks[305] = "createLDDistCognitionCLScenario!";
		compoundTasks[306] = "createLDDistCognitionCLScenario";
		compoundTasks[307] = "createDistCognitionCLScenario";
		compoundTasks[308] = "createDistCognitionCLScenario!";
		compoundTasks[309] = "createLDLPPCLScenario!";
		compoundTasks[310] = "createLDLPPCLScenario";
		compoundTasks[311] = "createLPPCLScenario";
		compoundTasks[312] = "createLPPCLScenario!";
		compoundTasks[313] = "createLDPeerTutoringCLScenario!";
		compoundTasks[314] = "createLDPeerTutoringCLScenario";
		compoundTasks[315] = "createPeerTutoringCLScenario";
		compoundTasks[316] = "createPeerTutoringCLScenario!";
		compoundTasks[317] = "createResumeDiscussionOutput";
		compoundTasks[318] = "createLDResumeDiscussionOutput";
		compoundTasks[319] = "createSimulationOutput";
		compoundTasks[320] = "createLDSimulationOutput";
		compoundTasks[321] = "createSolutionOutput";
		compoundTasks[322] = "createLDSolutionOutput";
		compoundTasks[323] = "createLDDiscussionSession!";
		compoundTasks[324] = "createLDDiscussionSession";
		compoundTasks[325] = "createDiscussionSession";
		compoundTasks[326] = "createDiscussionSession!";
		compoundTasks[327] = "createLDInputs";
		compoundTasks[328] = "createDiscussionActivity";
		compoundTasks[329] = "createDiscussionActivity!";
		compoundTasks[330] = "createLDScriptCLScenario!";
		compoundTasks[331] = "createLDDiscussionEnvironment";
		compoundTasks[332] = "createLDDiscussionSessionDescription";
		compoundTasks[333] = "createDiscussionSessionDescription";
		compoundTasks[334] = "createDiscussionSessionDescription!";
		compoundTasks[335] = "createLDExpertSession!";
		compoundTasks[336] = "createLDExpertSession";
		compoundTasks[337] = "createExpertSession";
		compoundTasks[338] = "createExpertActivity";
		compoundTasks[339] = "createExpertActivity!";
		compoundTasks[340] = "createLDExpertEnvironment";
		compoundTasks[341] = "createLDExpertSessionDescription";
		compoundTasks[342] = "createExpertSessionDescription";
		compoundTasks[343] = "createExpertSessionDescription!";
		compoundTasks[344] = "createIndividualSession";
		compoundTasks[345] = "createLDIndividualSession";
		compoundTasks[346] = "createIndividualActivity";
		compoundTasks[347] = "createLDIndividualEnvironment";
		compoundTasks[348] = "createLDIndividualSessionDescription";
		compoundTasks[349] = "createIndividualEnvironment";
		compoundTasks[350] = "createIndividualSessionDescription";
		compoundTasks[351] = "createIndividualSessionDescription!";
		compoundTasks[352] = "createLDJigsawSession!";
		compoundTasks[353] = "createLDJigsawSession";
		compoundTasks[354] = "createJigsawSession";
		compoundTasks[355] = "createJigsawSession!";
		compoundTasks[356] = "createJigsawActivity";
		compoundTasks[357] = "createJigsawActivity!";
		compoundTasks[358] = "createLDJigsawEnvironment";
		compoundTasks[359] = "createLDJigsawSessionDescription";
		compoundTasks[360] = "createJigsawSessionDescription";
		compoundTasks[361] = "createJigsawSessionDescription!";
		compoundTasks[362] = "createLDPairSession!";
		compoundTasks[363] = "createLDPairSession";
		compoundTasks[364] = "createPairSession";
		compoundTasks[365] = "createPairActivity";
		compoundTasks[366] = "createPairActivity!";
		compoundTasks[367] = "createLDPairEnvironment";
		compoundTasks[368] = "createLDPairSessionDescription";
		compoundTasks[369] = "createPairSessionDescription";
		compoundTasks[370] = "createPairSessionDescription!";
		compoundTasks[371] = "createLDRoleSession!";
		compoundTasks[372] = "createLDRoleSession";
		compoundTasks[373] = "createRoleSession";
		compoundTasks[374] = "createRoleActivity";
		compoundTasks[375] = "createRoleActivity!";
		compoundTasks[376] = "createLDRoleEnvironment";
		compoundTasks[377] = "createLDRoleSessionDescription";
		compoundTasks[378] = "createRoleSessionDescription";
		compoundTasks[379] = "createRoleSessionDescription!";
		compoundTasks[380] = "createShareSession";
		compoundTasks[381] = "createLDShareSession";
		compoundTasks[382] = "createShareSession!";
		compoundTasks[383] = "createShareActivity";
		compoundTasks[384] = "createLDShareEnvironment";
		compoundTasks[385] = "createLDShareSessionDescription";
		compoundTasks[386] = "createShareSessionDescription";
		compoundTasks[387] = "createShareSessionDescription!";
		compoundTasks[388] = "createLDSimulationSession!";
		compoundTasks[389] = "createLDSimulationSession";
		compoundTasks[390] = "createSimulationSession";
		compoundTasks[391] = "createSimulationActivity";
		compoundTasks[392] = "createSimulationActivity!";
		compoundTasks[393] = "createLDSimulationEnvironment";
		compoundTasks[394] = "createLDSimulationSessionDescription";
		compoundTasks[395] = "createSimulationSessionDescription";
		compoundTasks[396] = "createSimulationSessionDescription!";
		compoundTasks[397] = "createDiscussionGroupActivity";
		compoundTasks[398] = "createLDDiscussionGroupActivity";
		compoundTasks[399] = "createLDDiscussionSessions";
		compoundTasks[400] = "createDiscussionSessions";
		compoundTasks[401] = "createExpertGroupActivity";
		compoundTasks[402] = "createLDExpertGroupActivity";
		compoundTasks[403] = "createLDExpertSessions";
		compoundTasks[404] = "createExpertSessions";
		compoundTasks[405] = "createIndividualGroupActivity";
		compoundTasks[406] = "createLDIndividualGroupActivity";
		compoundTasks[407] = "createLDIndividualSessions";
		compoundTasks[408] = "createIndividualSessions";
		compoundTasks[409] = "createJigsawGroupActivity";
		compoundTasks[410] = "createLDJigsawGroupActivity";
		compoundTasks[411] = "createLDJigsawSessions";
		compoundTasks[412] = "createJigsawSessions";
		compoundTasks[413] = "distributeDiscussionSessionJigsaw";
		compoundTasks[414] = "createPairGroupActivity";
		compoundTasks[415] = "createLDPairGroupActivity";
		compoundTasks[416] = "createLDPairSessions";
		compoundTasks[417] = "createPairSessions";
		compoundTasks[418] = "createRoleGroupActivity";
		compoundTasks[419] = "createLDRoleGroupActivity";
		compoundTasks[420] = "createLDRoleSessions";
		compoundTasks[421] = "createRoleSessions";
		compoundTasks[422] = "createShareGroupActivity";
		compoundTasks[423] = "createLDShareGroupActivity";
		compoundTasks[424] = "createLDShareSessions";
		compoundTasks[425] = "createShareSessions";
		compoundTasks[426] = "createSimulationGroupActivity";
		compoundTasks[427] = "createLDSimulationGroupActivity";
		compoundTasks[428] = "createLDSimulationSessions";
		compoundTasks[429] = "createSimulationSessions";
		compoundTasks[430] = "createDiscussionPhase";
		compoundTasks[431] = "createLDDiscussionPhase";
		compoundTasks[432] = "createDiscussionPhase!";
		compoundTasks[433] = "distributeDiscussionGroupActivityByCLGroups";
		compoundTasks[434] = "createExpertPhase";
		compoundTasks[435] = "createLDExpertPhase";
		compoundTasks[436] = "distributeExpertGroupActivityByComps";
		compoundTasks[437] = "distributeExpertGroupActivityByCLGroups";
		compoundTasks[438] = "createIndividualPhase";
		compoundTasks[439] = "createLDIndividualPhase";
		compoundTasks[440] = "distributeIndGroupActivityByComps";
		compoundTasks[441] = "createJigsawPhase";
		compoundTasks[442] = "createLDJigsawPhase";
		compoundTasks[443] = "createPairPhase";
		compoundTasks[444] = "createLDPairPhase";
		compoundTasks[445] = "distributePairGroupActivityByCLGroups";
		compoundTasks[446] = "createRolePhase";
		compoundTasks[447] = "createLDRolePhase";
		compoundTasks[448] = "distributeRoleGroupActivityByComps";
		compoundTasks[449] = "distributeRoleGroupActivityByCLGroups";
		compoundTasks[450] = "createSharePhase";
		compoundTasks[451] = "createLDSharePhase";
		compoundTasks[452] = "createSimulationPhase";
		compoundTasks[453] = "createLDSimulationPhase";
		compoundTasks[454] = "createLDJigsawScript";
		compoundTasks[455] = "createLDScript!";
		compoundTasks[456] = "createLDJigsawScript!";
		compoundTasks[457] = "createJigsawScript";
		compoundTasks[458] = "createJigsawScript!";
		compoundTasks[459] = "createLDPyramidScript";
		compoundTasks[460] = "createLDPyramidScript!";
		compoundTasks[461] = "createPyramidScript";
		compoundTasks[462] = "createPyramidScript!";
		compoundTasks[463] = "distributePyramidDiscussionPhase";
		compoundTasks[464] = "createLDSimulationScript";
		compoundTasks[465] = "createLDSimulationScript!";
		compoundTasks[466] = "createSimulationScript";
		compoundTasks[467] = "createSimulationScript!";
		compoundTasks[468] = "createLDThinkPairShareScript";
		compoundTasks[469] = "createLDThinkPairShareScript!";
		compoundTasks[470] = "createThinkPairShareScript";
		compoundTasks[471] = "createThinkPairShareScript!";
		compoundTasks[472] = "createLDScriptCLScenario";
		compoundTasks[473] = "createLDScriptCLScenario!!";
		compoundTasks[474] = "createLDCLScenario!";
		compoundTasks[475] = "createLDScript";
		compoundTasks[476] = "createLDCLScenario";
		compoundTasks[477] = "createInputs";
		compoundTasks[478] = "createDevelopSession";
		compoundTasks[479] = "createLDDevelopSession";
		compoundTasks[480] = "createDevelopActivity";
		compoundTasks[481] = "createLDDevelopEnvironment";
		compoundTasks[482] = "createLDDevelopSessionDescription";
		compoundTasks[483] = "createDevelopSessionDescription";
		compoundTasks[484] = "createDevelopSessionDescription!";
		compoundTasks[485] = "createIllustrateWithExampleSession";
		compoundTasks[486] = "createLDIllustrateWithExampleSession";
		compoundTasks[487] = "createIllustrateWithExampleActivity";
		compoundTasks[488] = "createLDIllustrateWithExampleEnvironment";
		compoundTasks[489] = "createLDIllustrateWithExampleSessionDescription";
		compoundTasks[490] = "createIllustrateWithExampleSessionDescription";
		compoundTasks[491] = "createIllustrateWithExampleSessionDescription!";
		compoundTasks[492] = "createMotivationSession";
		compoundTasks[493] = "createLDMotivationSession";
		compoundTasks[494] = "createMotivationActivity";
		compoundTasks[495] = "createLDMotivationEnvironment";
		compoundTasks[496] = "createLDMotivationSessionDescription";
		compoundTasks[497] = "createMotivationEnvironment";
		compoundTasks[498] = "createMotivationSessionDescription";
		compoundTasks[499] = "createMotivationSessionDescription!";
		compoundTasks[500] = "createLDPracticeWithExerciseSession!";
		compoundTasks[501] = "createLDPracticeWithExerciseSession";
		compoundTasks[502] = "createPracticeWithExerciseSession";
		compoundTasks[503] = "createPracticeWithExerciseActivity";
		compoundTasks[504] = "createPracticeWithExerciseActivity!";
		compoundTasks[505] = "createLDPracticeWithExerciseEnvironment";
		compoundTasks[506] = "createLDPracticeWithExerciseSessionDescription";
		compoundTasks[507] = "createPracticeWithExerciseSessionDescription";
		compoundTasks[508] = "createPracticeWithExerciseSessionDescription!";
		compoundTasks[509] = "createShowProblemSession";
		compoundTasks[510] = "createLDShowProblemSession";
		compoundTasks[511] = "createShowProblemActivity";
		compoundTasks[512] = "createLDShowProblemEnvironment";
		compoundTasks[513] = "createLDShowProblemSessionDescription";
		compoundTasks[514] = "createShowProblemSessionDescription";
		compoundTasks[515] = "createShowProblemSessionDescription!";
		compoundTasks[516] = "createShowProofSession";
		compoundTasks[517] = "createLDShowProofSession";
		compoundTasks[518] = "createShowProofActivity";
		compoundTasks[519] = "createLDShowProofEnvironment";
		compoundTasks[520] = "createLDShowProofSessionDescription";
		compoundTasks[521] = "createShowProofEnvironment";
		compoundTasks[522] = "createShowProofSessionDescription";
		compoundTasks[523] = "createShowProofSessionDescription!";
		compoundTasks[524] = "createDiscoverGroupActivity";
		compoundTasks[525] = "createLDDiscoverGroupActivity";
		compoundTasks[526] = "createLDDiscoverSessions";
		compoundTasks[527] = "createDiscoverSessions";
		compoundTasks[528] = "createLDIntroductionSessions";
		compoundTasks[529] = "createIntroductionSessions";
		compoundTasks[530] = "createPracticeGroupActivity";
		compoundTasks[531] = "createLDPracticeGroupActivity";
		compoundTasks[532] = "createDiscoverPhase";
		compoundTasks[533] = "createLDDiscoverPhase";
		compoundTasks[534] = "distributeDiscoverGroupActivityByCLGroups";
		compoundTasks[535] = "createPracticePhase";
		compoundTasks[536] = "createLDPracticePhase";
		compoundTasks[537] = "distributePracticeGroupActivityByCLGroups";
		compoundTasks[538] = "createFundamentalUoL";
		compoundTasks[539] = "createLDFundamentalUoL";
		compoundTasks[540] = "distributeFundamentalScriptByComps";
		compoundTasks[541] = "createLDFundamentalScript";
		compoundTasks[542] = "createFundamentalScript";
		compoundTasks[543] = "distributePracticePhase";

		primitiveTasks = new String[17];
		primitiveTasks[0] = "!!addInWorldState";
		primitiveTasks[1] = "!!removeFromWorldState";
		primitiveTasks[2] = "!startLDElement";
		primitiveTasks[3] = "!endLDElement";
		primitiveTasks[4] = "!!changeIndGoals";
		primitiveTasks[5] = "!!changeCurrentLDElement";
		primitiveTasks[6] = "!!changeLearningResourceType";
		primitiveTasks[7] = "!!changeFundCompetency";
		primitiveTasks[8] = "!addUserToGroup";
		primitiveTasks[9] = "!removeUserFromGroup";
		primitiveTasks[10] = "!addUserToRole";
		primitiveTasks[11] = "!removeUserFromRole";
		primitiveTasks[12] = "!!changeCLGrouping";
		primitiveTasks[13] = "!text";
		primitiveTasks[14] = "!insertElement";
		primitiveTasks[15] = "!insertResource";
		primitiveTasks[16] = "!!addInWorldStateAsAlreadySeen";

		initializeTermVariables(22);

		initializeTermConstants();

		methods = new Method[544][];

		methods[0] = new Method[1];
		methods[0][0] = new Method0(this);

		methods[1] = new Method[2];
		methods[1][0] = new Method1(this);
		methods[1][1] = new Method2(this);

		methods[2] = new Method[2];
		methods[2][0] = new Method3(this);
		methods[2][1] = new Method4(this);

		methods[3] = new Method[2];
		methods[3][0] = new Method5(this);
		methods[3][1] = new Method6(this);

		methods[4] = new Method[2];
		methods[4][0] = new Method7(this);
		methods[4][1] = new Method8(this);

		methods[5] = new Method[1];
		methods[5][0] = new Method9(this);

		methods[6] = new Method[1];
		methods[6][0] = new Method12(this);

		methods[7] = new Method[2];
		methods[7][0] = new Method10(this);
		methods[7][1] = new Method11(this);

		methods[8] = new Method[3];
		methods[8][0] = new Method49(this);
		methods[8][1] = new Method50(this);
		methods[8][2] = new Method51(this);

		methods[9] = new Method[1];
		methods[9][0] = new Method13(this);

		methods[10] = new Method[1];
		methods[10][0] = new Method14(this);

		methods[11] = new Method[2];
		methods[11][0] = new Method17(this);
		methods[11][1] = new Method18(this);

		methods[12] = new Method[2];
		methods[12][0] = new Method15(this);
		methods[12][1] = new Method16(this);

		methods[13] = new Method[1];
		methods[13][0] = new Method20(this);

		methods[14] = new Method[1];
		methods[14][0] = new Method19(this);

		methods[15] = new Method[1];
		methods[15][0] = new Method21(this);

		methods[16] = new Method[1];
		methods[16][0] = new Method22(this);

		methods[17] = new Method[1];
		methods[17][0] = new Method23(this);

		methods[18] = new Method[3];
		methods[18][0] = new Method33(this);
		methods[18][1] = new Method35(this);
		methods[18][2] = new Method38(this);

		methods[19] = new Method[2];
		methods[19][0] = new Method24(this);
		methods[19][1] = new Method25(this);

		methods[20] = new Method[1];
		methods[20][0] = new Method27(this);

		methods[21] = new Method[1];
		methods[21][0] = new Method26(this);

		methods[22] = new Method[2];
		methods[22][0] = new Method43(this);
		methods[22][1] = new Method44(this);

		methods[23] = new Method[1];
		methods[23][0] = new Method29(this);

		methods[24] = new Method[2];
		methods[24][0] = new Method28(this);
		methods[24][1] = new Method30(this);

		methods[25] = new Method[1];
		methods[25][0] = new Method31(this);

		methods[26] = new Method[4];
		methods[26][0] = new Method36(this);
		methods[26][1] = new Method37(this);
		methods[26][2] = new Method39(this);
		methods[26][3] = new Method40(this);

		methods[27] = new Method[1];
		methods[27][0] = new Method32(this);

		methods[28] = new Method[1];
		methods[28][0] = new Method34(this);

		methods[29] = new Method[1];
		methods[29][0] = new Method41(this);

		methods[30] = new Method[1];
		methods[30][0] = new Method42(this);

		methods[31] = new Method[2];
		methods[31][0] = new Method45(this);
		methods[31][1] = new Method47(this);

		methods[32] = new Method[1];
		methods[32][0] = new Method46(this);

		methods[33] = new Method[1];
		methods[33][0] = new Method48(this);

		methods[34] = new Method[2];
		methods[34][0] = new Method53(this);
		methods[34][1] = new Method55(this);

		methods[35] = new Method[1];
		methods[35][0] = new Method52(this);

		methods[36] = new Method[1];
		methods[36][0] = new Method54(this);

		methods[37] = new Method[1];
		methods[37][0] = new Method57(this);

		methods[38] = new Method[1];
		methods[38][0] = new Method56(this);

		methods[39] = new Method[2];
		methods[39][0] = new Method58(this);
		methods[39][1] = new Method60(this);

		methods[40] = new Method[1];
		methods[40][0] = new Method59(this);

		methods[41] = new Method[2];
		methods[41][0] = new Method62(this);
		methods[41][1] = new Method64(this);

		methods[42] = new Method[1];
		methods[42][0] = new Method61(this);

		methods[43] = new Method[1];
		methods[43][0] = new Method63(this);

		methods[44] = new Method[1];
		methods[44][0] = new Method66(this);

		methods[45] = new Method[1];
		methods[45][0] = new Method65(this);

		methods[46] = new Method[2];
		methods[46][0] = new Method67(this);
		methods[46][1] = new Method69(this);

		methods[47] = new Method[1];
		methods[47][0] = new Method68(this);

		methods[48] = new Method[2];
		methods[48][0] = new Method71(this);
		methods[48][1] = new Method73(this);

		methods[49] = new Method[1];
		methods[49][0] = new Method70(this);

		methods[50] = new Method[1];
		methods[50][0] = new Method72(this);

		methods[51] = new Method[1];
		methods[51][0] = new Method75(this);

		methods[52] = new Method[1];
		methods[52][0] = new Method74(this);

		methods[53] = new Method[2];
		methods[53][0] = new Method76(this);
		methods[53][1] = new Method78(this);

		methods[54] = new Method[1];
		methods[54][0] = new Method77(this);

		methods[55] = new Method[2];
		methods[55][0] = new Method80(this);
		methods[55][1] = new Method82(this);

		methods[56] = new Method[1];
		methods[56][0] = new Method79(this);

		methods[57] = new Method[1];
		methods[57][0] = new Method81(this);

		methods[58] = new Method[1];
		methods[58][0] = new Method84(this);

		methods[59] = new Method[1];
		methods[59][0] = new Method83(this);

		methods[60] = new Method[2];
		methods[60][0] = new Method85(this);
		methods[60][1] = new Method87(this);

		methods[61] = new Method[1];
		methods[61][0] = new Method86(this);

		methods[62] = new Method[2];
		methods[62][0] = new Method89(this);
		methods[62][1] = new Method91(this);

		methods[63] = new Method[1];
		methods[63][0] = new Method88(this);

		methods[64] = new Method[1];
		methods[64][0] = new Method90(this);

		methods[65] = new Method[1];
		methods[65][0] = new Method93(this);

		methods[66] = new Method[1];
		methods[66][0] = new Method92(this);

		methods[67] = new Method[2];
		methods[67][0] = new Method94(this);
		methods[67][1] = new Method96(this);

		methods[68] = new Method[1];
		methods[68][0] = new Method95(this);

		methods[69] = new Method[2];
		methods[69][0] = new Method98(this);
		methods[69][1] = new Method100(this);

		methods[70] = new Method[1];
		methods[70][0] = new Method97(this);

		methods[71] = new Method[1];
		methods[71][0] = new Method99(this);

		methods[72] = new Method[1];
		methods[72][0] = new Method102(this);

		methods[73] = new Method[1];
		methods[73][0] = new Method101(this);

		methods[74] = new Method[2];
		methods[74][0] = new Method103(this);
		methods[74][1] = new Method105(this);

		methods[75] = new Method[1];
		methods[75][0] = new Method104(this);

		methods[76] = new Method[2];
		methods[76][0] = new Method107(this);
		methods[76][1] = new Method109(this);

		methods[77] = new Method[1];
		methods[77][0] = new Method106(this);

		methods[78] = new Method[1];
		methods[78][0] = new Method108(this);

		methods[79] = new Method[1];
		methods[79][0] = new Method111(this);

		methods[80] = new Method[1];
		methods[80][0] = new Method110(this);

		methods[81] = new Method[2];
		methods[81][0] = new Method112(this);
		methods[81][1] = new Method114(this);

		methods[82] = new Method[1];
		methods[82][0] = new Method113(this);

		methods[83] = new Method[2];
		methods[83][0] = new Method116(this);
		methods[83][1] = new Method118(this);

		methods[84] = new Method[1];
		methods[84][0] = new Method115(this);

		methods[85] = new Method[1];
		methods[85][0] = new Method117(this);

		methods[86] = new Method[1];
		methods[86][0] = new Method120(this);

		methods[87] = new Method[1];
		methods[87][0] = new Method119(this);

		methods[88] = new Method[2];
		methods[88][0] = new Method121(this);
		methods[88][1] = new Method123(this);

		methods[89] = new Method[1];
		methods[89][0] = new Method122(this);

		methods[90] = new Method[2];
		methods[90][0] = new Method125(this);
		methods[90][1] = new Method127(this);

		methods[91] = new Method[1];
		methods[91][0] = new Method124(this);

		methods[92] = new Method[1];
		methods[92][0] = new Method126(this);

		methods[93] = new Method[1];
		methods[93][0] = new Method129(this);

		methods[94] = new Method[1];
		methods[94][0] = new Method128(this);

		methods[95] = new Method[2];
		methods[95][0] = new Method130(this);
		methods[95][1] = new Method132(this);

		methods[96] = new Method[1];
		methods[96][0] = new Method131(this);

		methods[97] = new Method[2];
		methods[97][0] = new Method134(this);
		methods[97][1] = new Method136(this);

		methods[98] = new Method[1];
		methods[98][0] = new Method133(this);

		methods[99] = new Method[1];
		methods[99][0] = new Method135(this);

		methods[100] = new Method[1];
		methods[100][0] = new Method138(this);

		methods[101] = new Method[1];
		methods[101][0] = new Method137(this);

		methods[102] = new Method[2];
		methods[102][0] = new Method139(this);
		methods[102][1] = new Method141(this);

		methods[103] = new Method[1];
		methods[103][0] = new Method140(this);

		methods[104] = new Method[2];
		methods[104][0] = new Method143(this);
		methods[104][1] = new Method145(this);

		methods[105] = new Method[1];
		methods[105][0] = new Method142(this);

		methods[106] = new Method[1];
		methods[106][0] = new Method144(this);

		methods[107] = new Method[1];
		methods[107][0] = new Method147(this);

		methods[108] = new Method[1];
		methods[108][0] = new Method146(this);

		methods[109] = new Method[2];
		methods[109][0] = new Method148(this);
		methods[109][1] = new Method150(this);

		methods[110] = new Method[1];
		methods[110][0] = new Method149(this);

		methods[111] = new Method[2];
		methods[111][0] = new Method152(this);
		methods[111][1] = new Method154(this);

		methods[112] = new Method[1];
		methods[112][0] = new Method151(this);

		methods[113] = new Method[1];
		methods[113][0] = new Method153(this);

		methods[114] = new Method[1];
		methods[114][0] = new Method156(this);

		methods[115] = new Method[1];
		methods[115][0] = new Method155(this);

		methods[116] = new Method[2];
		methods[116][0] = new Method157(this);
		methods[116][1] = new Method159(this);

		methods[117] = new Method[1];
		methods[117][0] = new Method158(this);

		methods[118] = new Method[2];
		methods[118][0] = new Method161(this);
		methods[118][1] = new Method163(this);

		methods[119] = new Method[1];
		methods[119][0] = new Method160(this);

		methods[120] = new Method[1];
		methods[120][0] = new Method162(this);

		methods[121] = new Method[1];
		methods[121][0] = new Method164(this);

		methods[122] = new Method[2];
		methods[122][0] = new Method166(this);
		methods[122][1] = new Method168(this);

		methods[123] = new Method[1];
		methods[123][0] = new Method165(this);

		methods[124] = new Method[1];
		methods[124][0] = new Method167(this);

		methods[125] = new Method[1];
		methods[125][0] = new Method169(this);

		methods[126] = new Method[2];
		methods[126][0] = new Method171(this);
		methods[126][1] = new Method173(this);

		methods[127] = new Method[1];
		methods[127][0] = new Method170(this);

		methods[128] = new Method[1];
		methods[128][0] = new Method172(this);

		methods[129] = new Method[1];
		methods[129][0] = new Method174(this);

		methods[130] = new Method[2];
		methods[130][0] = new Method176(this);
		methods[130][1] = new Method178(this);

		methods[131] = new Method[1];
		methods[131][0] = new Method175(this);

		methods[132] = new Method[1];
		methods[132][0] = new Method177(this);

		methods[133] = new Method[1];
		methods[133][0] = new Method179(this);

		methods[134] = new Method[2];
		methods[134][0] = new Method181(this);
		methods[134][1] = new Method183(this);

		methods[135] = new Method[1];
		methods[135][0] = new Method180(this);

		methods[136] = new Method[1];
		methods[136][0] = new Method182(this);

		methods[137] = new Method[1];
		methods[137][0] = new Method235(this);

		methods[138] = new Method[1];
		methods[138][0] = new Method184(this);

		methods[139] = new Method[2];
		methods[139][0] = new Method186(this);
		methods[139][1] = new Method188(this);

		methods[140] = new Method[1];
		methods[140][0] = new Method185(this);

		methods[141] = new Method[1];
		methods[141][0] = new Method187(this);

		methods[142] = new Method[1];
		methods[142][0] = new Method189(this);

		methods[143] = new Method[2];
		methods[143][0] = new Method191(this);
		methods[143][1] = new Method193(this);

		methods[144] = new Method[1];
		methods[144][0] = new Method190(this);

		methods[145] = new Method[1];
		methods[145][0] = new Method192(this);

		methods[146] = new Method[1];
		methods[146][0] = new Method194(this);

		methods[147] = new Method[2];
		methods[147][0] = new Method196(this);
		methods[147][1] = new Method198(this);

		methods[148] = new Method[1];
		methods[148][0] = new Method195(this);

		methods[149] = new Method[1];
		methods[149][0] = new Method197(this);

		methods[150] = new Method[1];
		methods[150][0] = new Method199(this);

		methods[151] = new Method[2];
		methods[151][0] = new Method201(this);
		methods[151][1] = new Method203(this);

		methods[152] = new Method[1];
		methods[152][0] = new Method200(this);

		methods[153] = new Method[1];
		methods[153][0] = new Method202(this);

		methods[154] = new Method[1];
		methods[154][0] = new Method204(this);

		methods[155] = new Method[2];
		methods[155][0] = new Method206(this);
		methods[155][1] = new Method208(this);

		methods[156] = new Method[1];
		methods[156][0] = new Method205(this);

		methods[157] = new Method[1];
		methods[157][0] = new Method207(this);

		methods[158] = new Method[1];
		methods[158][0] = new Method210(this);

		methods[159] = new Method[1];
		methods[159][0] = new Method230(this);

		methods[160] = new Method[1];
		methods[160][0] = new Method209(this);

		methods[161] = new Method[2];
		methods[161][0] = new Method211(this);
		methods[161][1] = new Method213(this);

		methods[162] = new Method[1];
		methods[162][0] = new Method212(this);

		methods[163] = new Method[1];
		methods[163][0] = new Method214(this);

		methods[164] = new Method[2];
		methods[164][0] = new Method216(this);
		methods[164][1] = new Method218(this);

		methods[165] = new Method[1];
		methods[165][0] = new Method215(this);

		methods[166] = new Method[1];
		methods[166][0] = new Method217(this);

		methods[167] = new Method[1];
		methods[167][0] = new Method219(this);

		methods[168] = new Method[2];
		methods[168][0] = new Method221(this);
		methods[168][1] = new Method223(this);

		methods[169] = new Method[1];
		methods[169][0] = new Method220(this);

		methods[170] = new Method[1];
		methods[170][0] = new Method222(this);

		methods[171] = new Method[1];
		methods[171][0] = new Method224(this);

		methods[172] = new Method[2];
		methods[172][0] = new Method226(this);
		methods[172][1] = new Method228(this);

		methods[173] = new Method[1];
		methods[173][0] = new Method225(this);

		methods[174] = new Method[1];
		methods[174][0] = new Method227(this);

		methods[175] = new Method[1];
		methods[175][0] = new Method229(this);

		methods[176] = new Method[2];
		methods[176][0] = new Method231(this);
		methods[176][1] = new Method233(this);

		methods[177] = new Method[1];
		methods[177][0] = new Method232(this);

		methods[178] = new Method[1];
		methods[178][0] = new Method234(this);

		methods[179] = new Method[2];
		methods[179][0] = new Method236(this);
		methods[179][1] = new Method238(this);

		methods[180] = new Method[1];
		methods[180][0] = new Method237(this);

		methods[181] = new Method[1];
		methods[181][0] = new Method239(this);

		methods[182] = new Method[2];
		methods[182][0] = new Method241(this);
		methods[182][1] = new Method242(this);

		methods[183] = new Method[1];
		methods[183][0] = new Method240(this);

		methods[184] = new Method[1];
		methods[184][0] = new Method243(this);

		methods[185] = new Method[2];
		methods[185][0] = new Method245(this);
		methods[185][1] = new Method246(this);

		methods[186] = new Method[1];
		methods[186][0] = new Method244(this);

		methods[187] = new Method[1];
		methods[187][0] = new Method247(this);

		methods[188] = new Method[1];
		methods[188][0] = new Method249(this);

		methods[189] = new Method[1];
		methods[189][0] = new Method248(this);

		methods[190] = new Method[1];
		methods[190][0] = new Method250(this);

		methods[191] = new Method[1];
		methods[191][0] = new Method252(this);

		methods[192] = new Method[1];
		methods[192][0] = new Method251(this);

		methods[193] = new Method[1];
		methods[193][0] = new Method253(this);

		methods[194] = new Method[2];
		methods[194][0] = new Method255(this);
		methods[194][1] = new Method256(this);

		methods[195] = new Method[1];
		methods[195][0] = new Method254(this);

		methods[196] = new Method[1];
		methods[196][0] = new Method257(this);

		methods[197] = new Method[1];
		methods[197][0] = new Method259(this);

		methods[198] = new Method[1];
		methods[198][0] = new Method258(this);

		methods[199] = new Method[1];
		methods[199][0] = new Method260(this);

		methods[200] = new Method[1];
		methods[200][0] = new Method262(this);

		methods[201] = new Method[2];
		methods[201][0] = new Method261(this);
		methods[201][1] = new Method263(this);

		methods[202] = new Method[1];
		methods[202][0] = new Method264(this);

		methods[203] = new Method[1];
		methods[203][0] = new Method266(this);

		methods[204] = new Method[2];
		methods[204][0] = new Method265(this);
		methods[204][1] = new Method267(this);

		methods[205] = new Method[1];
		methods[205][0] = new Method269(this);

		methods[206] = new Method[2];
		methods[206][0] = new Method268(this);
		methods[206][1] = new Method270(this);

		methods[207] = new Method[1];
		methods[207][0] = new Method271(this);

		methods[208] = new Method[1];
		methods[208][0] = new Method273(this);

		methods[209] = new Method[2];
		methods[209][0] = new Method272(this);
		methods[209][1] = new Method274(this);

		methods[210] = new Method[1];
		methods[210][0] = new Method276(this);

		methods[211] = new Method[2];
		methods[211][0] = new Method275(this);
		methods[211][1] = new Method277(this);

		methods[212] = new Method[1];
		methods[212][0] = new Method278(this);

		methods[213] = new Method[1];
		methods[213][0] = new Method280(this);

		methods[214] = new Method[2];
		methods[214][0] = new Method279(this);
		methods[214][1] = new Method281(this);

		methods[215] = new Method[1];
		methods[215][0] = new Method283(this);

		methods[216] = new Method[2];
		methods[216][0] = new Method282(this);
		methods[216][1] = new Method284(this);

		methods[217] = new Method[1];
		methods[217][0] = new Method285(this);

		methods[218] = new Method[1];
		methods[218][0] = new Method287(this);

		methods[219] = new Method[2];
		methods[219][0] = new Method286(this);
		methods[219][1] = new Method288(this);

		methods[220] = new Method[1];
		methods[220][0] = new Method290(this);

		methods[221] = new Method[2];
		methods[221][0] = new Method289(this);
		methods[221][1] = new Method291(this);

		methods[222] = new Method[1];
		methods[222][0] = new Method292(this);

		methods[223] = new Method[1];
		methods[223][0] = new Method294(this);

		methods[224] = new Method[2];
		methods[224][0] = new Method293(this);
		methods[224][1] = new Method295(this);

		methods[225] = new Method[1];
		methods[225][0] = new Method297(this);

		methods[226] = new Method[2];
		methods[226][0] = new Method296(this);
		methods[226][1] = new Method298(this);

		methods[227] = new Method[1];
		methods[227][0] = new Method300(this);

		methods[228] = new Method[2];
		methods[228][0] = new Method299(this);
		methods[228][1] = new Method301(this);

		methods[229] = new Method[1];
		methods[229][0] = new Method302(this);

		methods[230] = new Method[1];
		methods[230][0] = new Method304(this);

		methods[231] = new Method[2];
		methods[231][0] = new Method303(this);
		methods[231][1] = new Method305(this);

		methods[232] = new Method[1];
		methods[232][0] = new Method307(this);

		methods[233] = new Method[2];
		methods[233][0] = new Method306(this);
		methods[233][1] = new Method308(this);

		methods[234] = new Method[1];
		methods[234][0] = new Method309(this);

		methods[235] = new Method[1];
		methods[235][0] = new Method311(this);

		methods[236] = new Method[2];
		methods[236][0] = new Method310(this);
		methods[236][1] = new Method312(this);

		methods[237] = new Method[1];
		methods[237][0] = new Method314(this);

		methods[238] = new Method[2];
		methods[238][0] = new Method313(this);
		methods[238][1] = new Method315(this);

		methods[239] = new Method[1];
		methods[239][0] = new Method316(this);

		methods[240] = new Method[1];
		methods[240][0] = new Method318(this);

		methods[241] = new Method[2];
		methods[241][0] = new Method317(this);
		methods[241][1] = new Method319(this);

		methods[242] = new Method[1];
		methods[242][0] = new Method321(this);

		methods[243] = new Method[2];
		methods[243][0] = new Method320(this);
		methods[243][1] = new Method322(this);

		methods[244] = new Method[1];
		methods[244][0] = new Method323(this);

		methods[245] = new Method[1];
		methods[245][0] = new Method325(this);

		methods[246] = new Method[2];
		methods[246][0] = new Method324(this);
		methods[246][1] = new Method326(this);

		methods[247] = new Method[1];
		methods[247][0] = new Method328(this);

		methods[248] = new Method[2];
		methods[248][0] = new Method327(this);
		methods[248][1] = new Method329(this);

		methods[249] = new Method[1];
		methods[249][0] = new Method330(this);

		methods[250] = new Method[1];
		methods[250][0] = new Method332(this);

		methods[251] = new Method[2];
		methods[251][0] = new Method331(this);
		methods[251][1] = new Method333(this);

		methods[252] = new Method[1];
		methods[252][0] = new Method335(this);

		methods[253] = new Method[1];
		methods[253][0] = new Method334(this);

		methods[254] = new Method[1];
		methods[254][0] = new Method336(this);

		methods[255] = new Method[2];
		methods[255][0] = new Method338(this);
		methods[255][1] = new Method339(this);

		methods[256] = new Method[1];
		methods[256][0] = new Method337(this);

		methods[257] = new Method[1];
		methods[257][0] = new Method340(this);

		methods[258] = new Method[1];
		methods[258][0] = new Method341(this);

		methods[259] = new Method[1];
		methods[259][0] = new Method343(this);

		methods[260] = new Method[1];
		methods[260][0] = new Method342(this);

		methods[261] = new Method[1];
		methods[261][0] = new Method344(this);

		methods[262] = new Method[2];
		methods[262][0] = new Method346(this);
		methods[262][1] = new Method348(this);

		methods[263] = new Method[1];
		methods[263][0] = new Method345(this);

		methods[264] = new Method[1];
		methods[264][0] = new Method349(this);

		methods[265] = new Method[1];
		methods[265][0] = new Method347(this);

		methods[266] = new Method[1];
		methods[266][0] = new Method351(this);

		methods[267] = new Method[1];
		methods[267][0] = new Method350(this);

		methods[268] = new Method[1];
		methods[268][0] = new Method352(this);

		methods[269] = new Method[1];
		methods[269][0] = new Method354(this);

		methods[270] = new Method[1];
		methods[270][0] = new Method353(this);

		methods[271] = new Method[1];
		methods[271][0] = new Method355(this);

		methods[272] = new Method[1];
		methods[272][0] = new Method357(this);

		methods[273] = new Method[1];
		methods[273][0] = new Method356(this);

		methods[274] = new Method[1];
		methods[274][0] = new Method358(this);

		methods[275] = new Method[1];
		methods[275][0] = new Method360(this);

		methods[276] = new Method[1];
		methods[276][0] = new Method359(this);

		methods[277] = new Method[1];
		methods[277][0] = new Method361(this);

		methods[278] = new Method[1];
		methods[278][0] = new Method363(this);

		methods[279] = new Method[1];
		methods[279][0] = new Method362(this);

		methods[280] = new Method[1];
		methods[280][0] = new Method364(this);

		methods[281] = new Method[1];
		methods[281][0] = new Method366(this);

		methods[282] = new Method[1];
		methods[282][0] = new Method365(this);

		methods[283] = new Method[1];
		methods[283][0] = new Method368(this);

		methods[284] = new Method[1];
		methods[284][0] = new Method367(this);

		methods[285] = new Method[1];
		methods[285][0] = new Method370(this);

		methods[286] = new Method[1];
		methods[286][0] = new Method369(this);

		methods[287] = new Method[1];
		methods[287][0] = new Method372(this);

		methods[288] = new Method[1];
		methods[288][0] = new Method371(this);

		methods[289] = new Method[1];
		methods[289][0] = new Method374(this);

		methods[290] = new Method[1];
		methods[290][0] = new Method373(this);

		methods[291] = new Method[1];
		methods[291][0] = new Method376(this);

		methods[292] = new Method[1];
		methods[292][0] = new Method375(this);

		methods[293] = new Method[1];
		methods[293][0] = new Method378(this);

		methods[294] = new Method[2];
		methods[294][0] = new Method377(this);
		methods[294][1] = new Method379(this);

		methods[295] = new Method[2];
		methods[295][0] = new Method380(this);
		methods[295][1] = new Method387(this);

		methods[296] = new Method[6];
		methods[296][0] = new Method381(this);
		methods[296][1] = new Method382(this);
		methods[296][2] = new Method383(this);
		methods[296][3] = new Method384(this);
		methods[296][4] = new Method385(this);
		methods[296][5] = new Method386(this);

		methods[297] = new Method[1];
		methods[297][0] = new Method389(this);

		methods[298] = new Method[2];
		methods[298][0] = new Method388(this);
		methods[298][1] = new Method390(this);

		methods[299] = new Method[2];
		methods[299][0] = new Method391(this);
		methods[299][1] = new Method394(this);

		methods[300] = new Method[2];
		methods[300][0] = new Method392(this);
		methods[300][1] = new Method393(this);

		methods[301] = new Method[1];
		methods[301][0] = new Method396(this);

		methods[302] = new Method[3];
		methods[302][0] = new Method395(this);
		methods[302][1] = new Method397(this);
		methods[302][2] = new Method400(this);

		methods[303] = new Method[1];
		methods[303][0] = new Method398(this);

		methods[304] = new Method[1];
		methods[304][0] = new Method399(this);

		methods[305] = new Method[1];
		methods[305][0] = new Method402(this);

		methods[306] = new Method[2];
		methods[306][0] = new Method401(this);
		methods[306][1] = new Method403(this);

		methods[307] = new Method[2];
		methods[307][0] = new Method404(this);
		methods[307][1] = new Method406(this);

		methods[308] = new Method[1];
		methods[308][0] = new Method405(this);

		methods[309] = new Method[1];
		methods[309][0] = new Method408(this);

		methods[310] = new Method[2];
		methods[310][0] = new Method407(this);
		methods[310][1] = new Method409(this);

		methods[311] = new Method[2];
		methods[311][0] = new Method410(this);
		methods[311][1] = new Method413(this);

		methods[312] = new Method[2];
		methods[312][0] = new Method411(this);
		methods[312][1] = new Method412(this);

		methods[313] = new Method[1];
		methods[313][0] = new Method415(this);

		methods[314] = new Method[2];
		methods[314][0] = new Method414(this);
		methods[314][1] = new Method416(this);

		methods[315] = new Method[2];
		methods[315][0] = new Method417(this);
		methods[315][1] = new Method419(this);

		methods[316] = new Method[1];
		methods[316][0] = new Method418(this);

		methods[317] = new Method[1];
		methods[317][0] = new Method421(this);

		methods[318] = new Method[1];
		methods[318][0] = new Method420(this);

		methods[319] = new Method[1];
		methods[319][0] = new Method423(this);

		methods[320] = new Method[1];
		methods[320][0] = new Method422(this);

		methods[321] = new Method[1];
		methods[321][0] = new Method425(this);

		methods[322] = new Method[1];
		methods[322][0] = new Method424(this);

		methods[323] = new Method[1];
		methods[323][0] = new Method427(this);

		methods[324] = new Method[2];
		methods[324][0] = new Method426(this);
		methods[324][1] = new Method428(this);

		methods[325] = new Method[2];
		methods[325][0] = new Method429(this);
		methods[325][1] = new Method432(this);

		methods[326] = new Method[2];
		methods[326][0] = new Method430(this);
		methods[326][1] = new Method431(this);

		methods[327] = new Method[2];
		methods[327][0] = new Method628(this);
		methods[327][1] = new Method629(this);

		methods[328] = new Method[2];
		methods[328][0] = new Method433(this);
		methods[328][1] = new Method435(this);

		methods[329] = new Method[1];
		methods[329][0] = new Method434(this);

		methods[330] = new Method[2];
		methods[330][0] = new Method619(this);
		methods[330][1] = new Method621(this);

		methods[331] = new Method[1];
		methods[331][0] = new Method436(this);

		methods[332] = new Method[1];
		methods[332][0] = new Method437(this);

		methods[333] = new Method[2];
		methods[333][0] = new Method438(this);
		methods[333][1] = new Method440(this);

		methods[334] = new Method[1];
		methods[334][0] = new Method439(this);

		methods[335] = new Method[1];
		methods[335][0] = new Method442(this);

		methods[336] = new Method[2];
		methods[336][0] = new Method441(this);
		methods[336][1] = new Method443(this);

		methods[337] = new Method[1];
		methods[337][0] = new Method444(this);

		methods[338] = new Method[2];
		methods[338][0] = new Method445(this);
		methods[338][1] = new Method447(this);

		methods[339] = new Method[1];
		methods[339][0] = new Method446(this);

		methods[340] = new Method[1];
		methods[340][0] = new Method448(this);

		methods[341] = new Method[1];
		methods[341][0] = new Method449(this);

		methods[342] = new Method[2];
		methods[342][0] = new Method450(this);
		methods[342][1] = new Method452(this);

		methods[343] = new Method[1];
		methods[343][0] = new Method451(this);

		methods[344] = new Method[1];
		methods[344][0] = new Method454(this);

		methods[345] = new Method[1];
		methods[345][0] = new Method453(this);

		methods[346] = new Method[1];
		methods[346][0] = new Method455(this);

		methods[347] = new Method[1];
		methods[347][0] = new Method456(this);

		methods[348] = new Method[1];
		methods[348][0] = new Method458(this);

		methods[349] = new Method[1];
		methods[349][0] = new Method457(this);

		methods[350] = new Method[2];
		methods[350][0] = new Method459(this);
		methods[350][1] = new Method461(this);

		methods[351] = new Method[1];
		methods[351][0] = new Method460(this);

		methods[352] = new Method[1];
		methods[352][0] = new Method463(this);

		methods[353] = new Method[2];
		methods[353][0] = new Method462(this);
		methods[353][1] = new Method464(this);

		methods[354] = new Method[2];
		methods[354][0] = new Method465(this);
		methods[354][1] = new Method467(this);

		methods[355] = new Method[1];
		methods[355][0] = new Method466(this);

		methods[356] = new Method[2];
		methods[356][0] = new Method468(this);
		methods[356][1] = new Method470(this);

		methods[357] = new Method[1];
		methods[357][0] = new Method469(this);

		methods[358] = new Method[1];
		methods[358][0] = new Method471(this);

		methods[359] = new Method[1];
		methods[359][0] = new Method472(this);

		methods[360] = new Method[2];
		methods[360][0] = new Method473(this);
		methods[360][1] = new Method475(this);

		methods[361] = new Method[1];
		methods[361][0] = new Method474(this);

		methods[362] = new Method[1];
		methods[362][0] = new Method477(this);

		methods[363] = new Method[2];
		methods[363][0] = new Method476(this);
		methods[363][1] = new Method478(this);

		methods[364] = new Method[1];
		methods[364][0] = new Method479(this);

		methods[365] = new Method[2];
		methods[365][0] = new Method480(this);
		methods[365][1] = new Method482(this);

		methods[366] = new Method[1];
		methods[366][0] = new Method481(this);

		methods[367] = new Method[1];
		methods[367][0] = new Method483(this);

		methods[368] = new Method[1];
		methods[368][0] = new Method484(this);

		methods[369] = new Method[2];
		methods[369][0] = new Method485(this);
		methods[369][1] = new Method487(this);

		methods[370] = new Method[1];
		methods[370][0] = new Method486(this);

		methods[371] = new Method[1];
		methods[371][0] = new Method489(this);

		methods[372] = new Method[2];
		methods[372][0] = new Method488(this);
		methods[372][1] = new Method490(this);

		methods[373] = new Method[1];
		methods[373][0] = new Method491(this);

		methods[374] = new Method[2];
		methods[374][0] = new Method492(this);
		methods[374][1] = new Method494(this);

		methods[375] = new Method[1];
		methods[375][0] = new Method493(this);

		methods[376] = new Method[1];
		methods[376][0] = new Method495(this);

		methods[377] = new Method[1];
		methods[377][0] = new Method496(this);

		methods[378] = new Method[2];
		methods[378][0] = new Method497(this);
		methods[378][1] = new Method499(this);

		methods[379] = new Method[1];
		methods[379][0] = new Method498(this);

		methods[380] = new Method[2];
		methods[380][0] = new Method501(this);
		methods[380][1] = new Method504(this);

		methods[381] = new Method[1];
		methods[381][0] = new Method500(this);

		methods[382] = new Method[2];
		methods[382][0] = new Method502(this);
		methods[382][1] = new Method503(this);

		methods[383] = new Method[1];
		methods[383][0] = new Method505(this);

		methods[384] = new Method[1];
		methods[384][0] = new Method506(this);

		methods[385] = new Method[1];
		methods[385][0] = new Method507(this);

		methods[386] = new Method[2];
		methods[386][0] = new Method508(this);
		methods[386][1] = new Method510(this);

		methods[387] = new Method[1];
		methods[387][0] = new Method509(this);

		methods[388] = new Method[1];
		methods[388][0] = new Method512(this);

		methods[389] = new Method[2];
		methods[389][0] = new Method511(this);
		methods[389][1] = new Method513(this);

		methods[390] = new Method[1];
		methods[390][0] = new Method514(this);

		methods[391] = new Method[2];
		methods[391][0] = new Method515(this);
		methods[391][1] = new Method517(this);

		methods[392] = new Method[1];
		methods[392][0] = new Method516(this);

		methods[393] = new Method[1];
		methods[393][0] = new Method518(this);

		methods[394] = new Method[1];
		methods[394][0] = new Method519(this);

		methods[395] = new Method[2];
		methods[395][0] = new Method520(this);
		methods[395][1] = new Method522(this);

		methods[396] = new Method[1];
		methods[396][0] = new Method521(this);

		methods[397] = new Method[1];
		methods[397][0] = new Method524(this);

		methods[398] = new Method[1];
		methods[398][0] = new Method523(this);

		methods[399] = new Method[1];
		methods[399][0] = new Method525(this);

		methods[400] = new Method[1];
		methods[400][0] = new Method526(this);

		methods[401] = new Method[1];
		methods[401][0] = new Method528(this);

		methods[402] = new Method[1];
		methods[402][0] = new Method527(this);

		methods[403] = new Method[1];
		methods[403][0] = new Method529(this);

		methods[404] = new Method[1];
		methods[404][0] = new Method530(this);

		methods[405] = new Method[1];
		methods[405][0] = new Method532(this);

		methods[406] = new Method[1];
		methods[406][0] = new Method531(this);

		methods[407] = new Method[1];
		methods[407][0] = new Method533(this);

		methods[408] = new Method[1];
		methods[408][0] = new Method534(this);

		methods[409] = new Method[1];
		methods[409][0] = new Method536(this);

		methods[410] = new Method[1];
		methods[410][0] = new Method535(this);

		methods[411] = new Method[1];
		methods[411][0] = new Method537(this);

		methods[412] = new Method[1];
		methods[412][0] = new Method538(this);

		methods[413] = new Method[2];
		methods[413][0] = new Method539(this);
		methods[413][1] = new Method540(this);

		methods[414] = new Method[1];
		methods[414][0] = new Method542(this);

		methods[415] = new Method[1];
		methods[415][0] = new Method541(this);

		methods[416] = new Method[1];
		methods[416][0] = new Method543(this);

		methods[417] = new Method[1];
		methods[417][0] = new Method544(this);

		methods[418] = new Method[1];
		methods[418][0] = new Method546(this);

		methods[419] = new Method[1];
		methods[419][0] = new Method545(this);

		methods[420] = new Method[1];
		methods[420][0] = new Method547(this);

		methods[421] = new Method[1];
		methods[421][0] = new Method548(this);

		methods[422] = new Method[1];
		methods[422][0] = new Method550(this);

		methods[423] = new Method[1];
		methods[423][0] = new Method549(this);

		methods[424] = new Method[1];
		methods[424][0] = new Method551(this);

		methods[425] = new Method[1];
		methods[425][0] = new Method552(this);

		methods[426] = new Method[1];
		methods[426][0] = new Method554(this);

		methods[427] = new Method[1];
		methods[427][0] = new Method553(this);

		methods[428] = new Method[1];
		methods[428][0] = new Method555(this);

		methods[429] = new Method[1];
		methods[429][0] = new Method556(this);

		methods[430] = new Method[2];
		methods[430][0] = new Method558(this);
		methods[430][1] = new Method560(this);

		methods[431] = new Method[1];
		methods[431][0] = new Method557(this);

		methods[432] = new Method[1];
		methods[432][0] = new Method559(this);

		methods[433] = new Method[2];
		methods[433][0] = new Method561(this);
		methods[433][1] = new Method562(this);

		methods[434] = new Method[1];
		methods[434][0] = new Method564(this);

		methods[435] = new Method[1];
		methods[435][0] = new Method563(this);

		methods[436] = new Method[2];
		methods[436][0] = new Method565(this);
		methods[436][1] = new Method566(this);

		methods[437] = new Method[2];
		methods[437][0] = new Method567(this);
		methods[437][1] = new Method568(this);

		methods[438] = new Method[1];
		methods[438][0] = new Method570(this);

		methods[439] = new Method[1];
		methods[439][0] = new Method569(this);

		methods[440] = new Method[2];
		methods[440][0] = new Method571(this);
		methods[440][1] = new Method572(this);

		methods[441] = new Method[1];
		methods[441][0] = new Method574(this);

		methods[442] = new Method[1];
		methods[442][0] = new Method573(this);

		methods[443] = new Method[1];
		methods[443][0] = new Method576(this);

		methods[444] = new Method[1];
		methods[444][0] = new Method575(this);

		methods[445] = new Method[2];
		methods[445][0] = new Method577(this);
		methods[445][1] = new Method578(this);

		methods[446] = new Method[1];
		methods[446][0] = new Method580(this);

		methods[447] = new Method[1];
		methods[447][0] = new Method579(this);

		methods[448] = new Method[2];
		methods[448][0] = new Method581(this);
		methods[448][1] = new Method582(this);

		methods[449] = new Method[2];
		methods[449][0] = new Method583(this);
		methods[449][1] = new Method584(this);

		methods[450] = new Method[1];
		methods[450][0] = new Method586(this);

		methods[451] = new Method[1];
		methods[451][0] = new Method585(this);

		methods[452] = new Method[1];
		methods[452][0] = new Method588(this);

		methods[453] = new Method[1];
		methods[453][0] = new Method587(this);

		methods[454] = new Method[2];
		methods[454][0] = new Method590(this);
		methods[454][1] = new Method592(this);

		methods[455] = new Method[4];
		methods[455][0] = new Method589(this);
		methods[455][1] = new Method596(this);
		methods[455][2] = new Method604(this);
		methods[455][3] = new Method611(this);

		methods[456] = new Method[1];
		methods[456][0] = new Method591(this);

		methods[457] = new Method[2];
		methods[457][0] = new Method593(this);
		methods[457][1] = new Method595(this);

		methods[458] = new Method[1];
		methods[458][0] = new Method594(this);

		methods[459] = new Method[2];
		methods[459][0] = new Method597(this);
		methods[459][1] = new Method599(this);

		methods[460] = new Method[1];
		methods[460][0] = new Method598(this);

		methods[461] = new Method[2];
		methods[461][0] = new Method600(this);
		methods[461][1] = new Method602(this);

		methods[462] = new Method[1];
		methods[462][0] = new Method601(this);

		methods[463] = new Method[1];
		methods[463][0] = new Method603(this);

		methods[464] = new Method[2];
		methods[464][0] = new Method605(this);
		methods[464][1] = new Method607(this);

		methods[465] = new Method[1];
		methods[465][0] = new Method606(this);

		methods[466] = new Method[2];
		methods[466][0] = new Method608(this);
		methods[466][1] = new Method610(this);

		methods[467] = new Method[1];
		methods[467][0] = new Method609(this);

		methods[468] = new Method[2];
		methods[468][0] = new Method612(this);
		methods[468][1] = new Method614(this);

		methods[469] = new Method[1];
		methods[469][0] = new Method613(this);

		methods[470] = new Method[2];
		methods[470][0] = new Method615(this);
		methods[470][1] = new Method617(this);

		methods[471] = new Method[1];
		methods[471][0] = new Method616(this);

		methods[472] = new Method[2];
		methods[472][0] = new Method618(this);
		methods[472][1] = new Method622(this);

		methods[473] = new Method[1];
		methods[473][0] = new Method620(this);

		methods[474] = new Method[1];
		methods[474][0] = new Method626(this);

		methods[475] = new Method[2];
		methods[475][0] = new Method623(this);
		methods[475][1] = new Method624(this);

		methods[476] = new Method[2];
		methods[476][0] = new Method625(this);
		methods[476][1] = new Method627(this);

		methods[477] = new Method[1];
		methods[477][0] = new Method630(this);

		methods[478] = new Method[1];
		methods[478][0] = new Method632(this);

		methods[479] = new Method[1];
		methods[479][0] = new Method631(this);

		methods[480] = new Method[1];
		methods[480][0] = new Method633(this);

		methods[481] = new Method[1];
		methods[481][0] = new Method634(this);

		methods[482] = new Method[1];
		methods[482][0] = new Method635(this);

		methods[483] = new Method[2];
		methods[483][0] = new Method636(this);
		methods[483][1] = new Method638(this);

		methods[484] = new Method[1];
		methods[484][0] = new Method637(this);

		methods[485] = new Method[2];
		methods[485][0] = new Method640(this);
		methods[485][1] = new Method648(this);

		methods[486] = new Method[2];
		methods[486][0] = new Method639(this);
		methods[486][1] = new Method647(this);

		methods[487] = new Method[1];
		methods[487][0] = new Method641(this);

		methods[488] = new Method[1];
		methods[488][0] = new Method642(this);

		methods[489] = new Method[1];
		methods[489][0] = new Method643(this);

		methods[490] = new Method[2];
		methods[490][0] = new Method644(this);
		methods[490][1] = new Method646(this);

		methods[491] = new Method[1];
		methods[491][0] = new Method645(this);

		methods[492] = new Method[1];
		methods[492][0] = new Method650(this);

		methods[493] = new Method[1];
		methods[493][0] = new Method649(this);

		methods[494] = new Method[1];
		methods[494][0] = new Method651(this);

		methods[495] = new Method[1];
		methods[495][0] = new Method652(this);

		methods[496] = new Method[1];
		methods[496][0] = new Method654(this);

		methods[497] = new Method[1];
		methods[497][0] = new Method653(this);

		methods[498] = new Method[2];
		methods[498][0] = new Method655(this);
		methods[498][1] = new Method657(this);

		methods[499] = new Method[1];
		methods[499][0] = new Method656(this);

		methods[500] = new Method[2];
		methods[500][0] = new Method659(this);
		methods[500][1] = new Method671(this);

		methods[501] = new Method[4];
		methods[501][0] = new Method658(this);
		methods[501][1] = new Method660(this);
		methods[501][2] = new Method670(this);
		methods[501][3] = new Method672(this);

		methods[502] = new Method[2];
		methods[502][0] = new Method661(this);
		methods[502][1] = new Method673(this);

		methods[503] = new Method[2];
		methods[503][0] = new Method662(this);
		methods[503][1] = new Method664(this);

		methods[504] = new Method[1];
		methods[504][0] = new Method663(this);

		methods[505] = new Method[1];
		methods[505][0] = new Method665(this);

		methods[506] = new Method[1];
		methods[506][0] = new Method666(this);

		methods[507] = new Method[2];
		methods[507][0] = new Method667(this);
		methods[507][1] = new Method669(this);

		methods[508] = new Method[1];
		methods[508][0] = new Method668(this);

		methods[509] = new Method[1];
		methods[509][0] = new Method675(this);

		methods[510] = new Method[1];
		methods[510][0] = new Method674(this);

		methods[511] = new Method[1];
		methods[511][0] = new Method676(this);

		methods[512] = new Method[1];
		methods[512][0] = new Method677(this);

		methods[513] = new Method[1];
		methods[513][0] = new Method678(this);

		methods[514] = new Method[2];
		methods[514][0] = new Method679(this);
		methods[514][1] = new Method681(this);

		methods[515] = new Method[1];
		methods[515][0] = new Method680(this);

		methods[516] = new Method[1];
		methods[516][0] = new Method683(this);

		methods[517] = new Method[1];
		methods[517][0] = new Method682(this);

		methods[518] = new Method[1];
		methods[518][0] = new Method684(this);

		methods[519] = new Method[1];
		methods[519][0] = new Method685(this);

		methods[520] = new Method[1];
		methods[520][0] = new Method687(this);

		methods[521] = new Method[1];
		methods[521][0] = new Method686(this);

		methods[522] = new Method[2];
		methods[522][0] = new Method688(this);
		methods[522][1] = new Method690(this);

		methods[523] = new Method[1];
		methods[523][0] = new Method689(this);

		methods[524] = new Method[1];
		methods[524][0] = new Method692(this);

		methods[525] = new Method[1];
		methods[525][0] = new Method691(this);

		methods[526] = new Method[1];
		methods[526][0] = new Method693(this);

		methods[527] = new Method[1];
		methods[527][0] = new Method694(this);

		methods[528] = new Method[1];
		methods[528][0] = new Method695(this);

		methods[529] = new Method[1];
		methods[529][0] = new Method696(this);

		methods[530] = new Method[1];
		methods[530][0] = new Method698(this);

		methods[531] = new Method[1];
		methods[531][0] = new Method697(this);

		methods[532] = new Method[1];
		methods[532][0] = new Method700(this);

		methods[533] = new Method[1];
		methods[533][0] = new Method699(this);

		methods[534] = new Method[2];
		methods[534][0] = new Method701(this);
		methods[534][1] = new Method702(this);

		methods[535] = new Method[1];
		methods[535][0] = new Method704(this);

		methods[536] = new Method[1];
		methods[536][0] = new Method703(this);

		methods[537] = new Method[2];
		methods[537][0] = new Method705(this);
		methods[537][1] = new Method706(this);

		methods[538] = new Method[1];
		methods[538][0] = new Method708(this);

		methods[539] = new Method[1];
		methods[539][0] = new Method707(this);

		methods[540] = new Method[2];
		methods[540][0] = new Method709(this);
		methods[540][1] = new Method710(this);

		methods[541] = new Method[1];
		methods[541][0] = new Method711(this);

		methods[542] = new Method[1];
		methods[542][0] = new Method712(this);

		methods[543] = new Method[1];
		methods[543][0] = new Method713(this);


		ops = new Operator[17][];

		ops[0] = new Operator[1];
		ops[0][0] = new Operator0(this);

		ops[1] = new Operator[1];
		ops[1][0] = new Operator1(this);

		ops[2] = new Operator[4];
		ops[2][0] = new Operator2(this);
		ops[2][1] = new Operator3(this);
		ops[2][2] = new Operator5(this);
		ops[2][3] = new Operator6(this);

		ops[3] = new Operator[2];
		ops[3][0] = new Operator4(this);
		ops[3][1] = new Operator7(this);

		ops[4] = new Operator[1];
		ops[4][0] = new Operator8(this);

		ops[5] = new Operator[1];
		ops[5][0] = new Operator9(this);

		ops[6] = new Operator[1];
		ops[6][0] = new Operator10(this);

		ops[7] = new Operator[1];
		ops[7][0] = new Operator11(this);

		ops[8] = new Operator[1];
		ops[8][0] = new Operator12(this);

		ops[9] = new Operator[1];
		ops[9][0] = new Operator13(this);

		ops[10] = new Operator[1];
		ops[10][0] = new Operator14(this);

		ops[11] = new Operator[1];
		ops[11][0] = new Operator15(this);

		ops[12] = new Operator[4];
		ops[12][0] = new Operator16(this);
		ops[12][1] = new Operator17(this);
		ops[12][2] = new Operator18(this);
		ops[12][3] = new Operator19(this);

		ops[13] = new Operator[1];
		ops[13][0] = new Operator20(this);

		ops[14] = new Operator[1];
		ops[14][0] = new Operator21(this);

		ops[15] = new Operator[1];
		ops[15][0] = new Operator22(this);

		ops[16] = new Operator[1];
		ops[16][0] = new Operator23(this);

		axioms = new Axiom[472][];

		axioms[0] = new Axiom[1];
		axioms[0][0] = new Axiom0(this);

		axioms[1] = new Axiom[1];
		axioms[1][0] = new Axiom1(this);

		axioms[2] = new Axiom[1];
		axioms[2][0] = new Axiom2(this);

		axioms[3] = new Axiom[2];
		axioms[3][0] = new Axiom3(this);
		axioms[3][1] = new Axiom4(this);

		axioms[4] = new Axiom[1];
		axioms[4][0] = new Axiom5(this);

		axioms[5] = new Axiom[1];
		axioms[5][0] = new Axiom6(this);

		axioms[6] = new Axiom[2];
		axioms[6][0] = new Axiom7(this);
		axioms[6][1] = new Axiom8(this);

		axioms[7] = new Axiom[2];
		axioms[7][0] = new Axiom9(this);
		axioms[7][1] = new Axiom10(this);

		axioms[8] = new Axiom[1];
		axioms[8][0] = new Axiom11(this);

		axioms[9] = new Axiom[1];
		axioms[9][0] = new Axiom12(this);

		axioms[10] = new Axiom[3];
		axioms[10][0] = new Axiom13(this);
		axioms[10][1] = new Axiom14(this);
		axioms[10][2] = new Axiom15(this);

		axioms[11] = new Axiom[3];
		axioms[11][0] = new Axiom16(this);
		axioms[11][1] = new Axiom17(this);
		axioms[11][2] = new Axiom18(this);

		axioms[12] = new Axiom[1];
		axioms[12][0] = new Axiom19(this);

		axioms[13] = new Axiom[0];

		axioms[14] = new Axiom[0];

		axioms[15] = new Axiom[3];
		axioms[15][0] = new Axiom20(this);
		axioms[15][1] = new Axiom21(this);
		axioms[15][2] = new Axiom22(this);

		axioms[16] = new Axiom[0];

		axioms[17] = new Axiom[0];

		axioms[18] = new Axiom[0];

		axioms[19] = new Axiom[0];

		axioms[20] = new Axiom[0];

		axioms[21] = new Axiom[20];
		axioms[21][0] = new Axiom23(this);
		axioms[21][1] = new Axiom24(this);
		axioms[21][2] = new Axiom25(this);
		axioms[21][3] = new Axiom26(this);
		axioms[21][4] = new Axiom27(this);
		axioms[21][5] = new Axiom28(this);
		axioms[21][6] = new Axiom29(this);
		axioms[21][7] = new Axiom30(this);
		axioms[21][8] = new Axiom31(this);
		axioms[21][9] = new Axiom32(this);
		axioms[21][10] = new Axiom33(this);
		axioms[21][11] = new Axiom34(this);
		axioms[21][12] = new Axiom35(this);
		axioms[21][13] = new Axiom36(this);
		axioms[21][14] = new Axiom37(this);
		axioms[21][15] = new Axiom38(this);
		axioms[21][16] = new Axiom39(this);
		axioms[21][17] = new Axiom40(this);
		axioms[21][18] = new Axiom41(this);
		axioms[21][19] = new Axiom42(this);

		axioms[22] = new Axiom[0];

		axioms[23] = new Axiom[0];

		axioms[24] = new Axiom[0];

		axioms[25] = new Axiom[0];

		axioms[26] = new Axiom[0];

		axioms[27] = new Axiom[0];

		axioms[28] = new Axiom[0];

		axioms[29] = new Axiom[0];

		axioms[30] = new Axiom[0];

		axioms[31] = new Axiom[0];

		axioms[32] = new Axiom[0];

		axioms[33] = new Axiom[0];

		axioms[34] = new Axiom[0];

		axioms[35] = new Axiom[0];

		axioms[36] = new Axiom[0];

		axioms[37] = new Axiom[0];

		axioms[38] = new Axiom[0];

		axioms[39] = new Axiom[0];

		axioms[40] = new Axiom[0];

		axioms[41] = new Axiom[9];
		axioms[41][0] = new Axiom43(this);
		axioms[41][1] = new Axiom44(this);
		axioms[41][2] = new Axiom45(this);
		axioms[41][3] = new Axiom46(this);
		axioms[41][4] = new Axiom47(this);
		axioms[41][5] = new Axiom48(this);
		axioms[41][6] = new Axiom49(this);
		axioms[41][7] = new Axiom50(this);
		axioms[41][8] = new Axiom51(this);

		axioms[42] = new Axiom[0];

		axioms[43] = new Axiom[0];

		axioms[44] = new Axiom[0];

		axioms[45] = new Axiom[2];
		axioms[45][0] = new Axiom52(this);
		axioms[45][1] = new Axiom53(this);

		axioms[46] = new Axiom[2];
		axioms[46][0] = new Axiom54(this);
		axioms[46][1] = new Axiom55(this);

		axioms[47] = new Axiom[3];
		axioms[47][0] = new Axiom56(this);
		axioms[47][1] = new Axiom57(this);
		axioms[47][2] = new Axiom58(this);

		axioms[48] = new Axiom[1];
		axioms[48][0] = new Axiom59(this);

		axioms[49] = new Axiom[3];
		axioms[49][0] = new Axiom60(this);
		axioms[49][1] = new Axiom61(this);
		axioms[49][2] = new Axiom62(this);

		axioms[50] = new Axiom[1];
		axioms[50][0] = new Axiom63(this);

		axioms[51] = new Axiom[3];
		axioms[51][0] = new Axiom64(this);
		axioms[51][1] = new Axiom65(this);
		axioms[51][2] = new Axiom66(this);

		axioms[52] = new Axiom[1];
		axioms[52][0] = new Axiom67(this);

		axioms[53] = new Axiom[3];
		axioms[53][0] = new Axiom68(this);
		axioms[53][1] = new Axiom69(this);
		axioms[53][2] = new Axiom70(this);

		axioms[54] = new Axiom[1];
		axioms[54][0] = new Axiom72(this);

		axioms[55] = new Axiom[1];
		axioms[55][0] = new Axiom71(this);

		axioms[56] = new Axiom[4];
		axioms[56][0] = new Axiom73(this);
		axioms[56][1] = new Axiom74(this);
		axioms[56][2] = new Axiom75(this);
		axioms[56][3] = new Axiom76(this);

		axioms[57] = new Axiom[1];
		axioms[57][0] = new Axiom77(this);

		axioms[58] = new Axiom[1];
		axioms[58][0] = new Axiom78(this);

		axioms[59] = new Axiom[1];
		axioms[59][0] = new Axiom79(this);

		axioms[60] = new Axiom[2];
		axioms[60][0] = new Axiom80(this);
		axioms[60][1] = new Axiom81(this);

		axioms[61] = new Axiom[2];
		axioms[61][0] = new Axiom82(this);
		axioms[61][1] = new Axiom85(this);

		axioms[62] = new Axiom[1];
		axioms[62][0] = new Axiom83(this);

		axioms[63] = new Axiom[1];
		axioms[63][0] = new Axiom84(this);

		axioms[64] = new Axiom[1];
		axioms[64][0] = new Axiom86(this);

		axioms[65] = new Axiom[4];
		axioms[65][0] = new Axiom87(this);
		axioms[65][1] = new Axiom88(this);
		axioms[65][2] = new Axiom94(this);
		axioms[65][3] = new Axiom95(this);

		axioms[66] = new Axiom[4];
		axioms[66][0] = new Axiom89(this);
		axioms[66][1] = new Axiom92(this);
		axioms[66][2] = new Axiom96(this);
		axioms[66][3] = new Axiom99(this);

		axioms[67] = new Axiom[2];
		axioms[67][0] = new Axiom90(this);
		axioms[67][1] = new Axiom97(this);

		axioms[68] = new Axiom[2];
		axioms[68][0] = new Axiom91(this);
		axioms[68][1] = new Axiom98(this);

		axioms[69] = new Axiom[2];
		axioms[69][0] = new Axiom93(this);
		axioms[69][1] = new Axiom100(this);

		axioms[70] = new Axiom[5];
		axioms[70][0] = new Axiom101(this);
		axioms[70][1] = new Axiom102(this);
		axioms[70][2] = new Axiom109(this);
		axioms[70][3] = new Axiom110(this);
		axioms[70][4] = new Axiom111(this);

		axioms[71] = new Axiom[4];
		axioms[71][0] = new Axiom103(this);
		axioms[71][1] = new Axiom107(this);
		axioms[71][2] = new Axiom112(this);
		axioms[71][3] = new Axiom113(this);

		axioms[72] = new Axiom[1];
		axioms[72][0] = new Axiom104(this);

		axioms[73] = new Axiom[1];
		axioms[73][0] = new Axiom105(this);

		axioms[74] = new Axiom[1];
		axioms[74][0] = new Axiom106(this);

		axioms[75] = new Axiom[1];
		axioms[75][0] = new Axiom108(this);

		axioms[76] = new Axiom[0];

		axioms[77] = new Axiom[3];
		axioms[77][0] = new Axiom114(this);
		axioms[77][1] = new Axiom115(this);
		axioms[77][2] = new Axiom116(this);

		axioms[78] = new Axiom[0];

		axioms[79] = new Axiom[0];

		axioms[80] = new Axiom[0];

		axioms[81] = new Axiom[0];

		axioms[82] = new Axiom[20];
		axioms[82][0] = new Axiom117(this);
		axioms[82][1] = new Axiom118(this);
		axioms[82][2] = new Axiom119(this);
		axioms[82][3] = new Axiom120(this);
		axioms[82][4] = new Axiom121(this);
		axioms[82][5] = new Axiom122(this);
		axioms[82][6] = new Axiom123(this);
		axioms[82][7] = new Axiom124(this);
		axioms[82][8] = new Axiom125(this);
		axioms[82][9] = new Axiom126(this);
		axioms[82][10] = new Axiom127(this);
		axioms[82][11] = new Axiom128(this);
		axioms[82][12] = new Axiom129(this);
		axioms[82][13] = new Axiom130(this);
		axioms[82][14] = new Axiom131(this);
		axioms[82][15] = new Axiom132(this);
		axioms[82][16] = new Axiom133(this);
		axioms[82][17] = new Axiom134(this);
		axioms[82][18] = new Axiom135(this);
		axioms[82][19] = new Axiom136(this);

		axioms[83] = new Axiom[0];

		axioms[84] = new Axiom[0];

		axioms[85] = new Axiom[0];

		axioms[86] = new Axiom[0];

		axioms[87] = new Axiom[0];

		axioms[88] = new Axiom[0];

		axioms[89] = new Axiom[0];

		axioms[90] = new Axiom[6];
		axioms[90][0] = new Axiom137(this);
		axioms[90][1] = new Axiom138(this);
		axioms[90][2] = new Axiom139(this);
		axioms[90][3] = new Axiom140(this);
		axioms[90][4] = new Axiom141(this);
		axioms[90][5] = new Axiom142(this);

		axioms[91] = new Axiom[5];
		axioms[91][0] = new Axiom143(this);
		axioms[91][1] = new Axiom144(this);
		axioms[91][2] = new Axiom145(this);
		axioms[91][3] = new Axiom146(this);
		axioms[91][4] = new Axiom147(this);

		axioms[92] = new Axiom[1];
		axioms[92][0] = new Axiom148(this);

		axioms[93] = new Axiom[1];
		axioms[93][0] = new Axiom149(this);

		axioms[94] = new Axiom[0];

		axioms[95] = new Axiom[2];
		axioms[95][0] = new Axiom150(this);
		axioms[95][1] = new Axiom151(this);

		axioms[96] = new Axiom[0];

		axioms[97] = new Axiom[0];

		axioms[98] = new Axiom[1];
		axioms[98][0] = new Axiom152(this);

		axioms[99] = new Axiom[2];
		axioms[99][0] = new Axiom153(this);
		axioms[99][1] = new Axiom154(this);

		axioms[100] = new Axiom[1];
		axioms[100][0] = new Axiom155(this);

		axioms[101] = new Axiom[1];
		axioms[101][0] = new Axiom156(this);

		axioms[102] = new Axiom[0];

		axioms[103] = new Axiom[0];

		axioms[104] = new Axiom[2];
		axioms[104][0] = new Axiom157(this);
		axioms[104][1] = new Axiom158(this);

		axioms[105] = new Axiom[1];
		axioms[105][0] = new Axiom159(this);

		axioms[106] = new Axiom[4];
		axioms[106][0] = new Axiom160(this);
		axioms[106][1] = new Axiom161(this);
		axioms[106][2] = new Axiom163(this);
		axioms[106][3] = new Axiom164(this);

		axioms[107] = new Axiom[2];
		axioms[107][0] = new Axiom162(this);
		axioms[107][1] = new Axiom165(this);

		axioms[108] = new Axiom[2];
		axioms[108][0] = new Axiom166(this);
		axioms[108][1] = new Axiom167(this);

		axioms[109] = new Axiom[1];
		axioms[109][0] = new Axiom168(this);

		axioms[110] = new Axiom[1];
		axioms[110][0] = new Axiom169(this);

		axioms[111] = new Axiom[0];

		axioms[112] = new Axiom[1];
		axioms[112][0] = new Axiom170(this);

		axioms[113] = new Axiom[0];

		axioms[114] = new Axiom[0];

		axioms[115] = new Axiom[1];
		axioms[115][0] = new Axiom171(this);

		axioms[116] = new Axiom[0];

		axioms[117] = new Axiom[2];
		axioms[117][0] = new Axiom172(this);
		axioms[117][1] = new Axiom173(this);

		axioms[118] = new Axiom[1];
		axioms[118][0] = new Axiom174(this);

		axioms[119] = new Axiom[2];
		axioms[119][0] = new Axiom175(this);
		axioms[119][1] = new Axiom176(this);

		axioms[120] = new Axiom[1];
		axioms[120][0] = new Axiom177(this);

		axioms[121] = new Axiom[2];
		axioms[121][0] = new Axiom178(this);
		axioms[121][1] = new Axiom179(this);

		axioms[122] = new Axiom[1];
		axioms[122][0] = new Axiom180(this);

		axioms[123] = new Axiom[0];

		axioms[124] = new Axiom[1];
		axioms[124][0] = new Axiom181(this);

		axioms[125] = new Axiom[1];
		axioms[125][0] = new Axiom182(this);

		axioms[126] = new Axiom[0];

		axioms[127] = new Axiom[0];

		axioms[128] = new Axiom[2];
		axioms[128][0] = new Axiom183(this);
		axioms[128][1] = new Axiom184(this);

		axioms[129] = new Axiom[0];

		axioms[130] = new Axiom[0];

		axioms[131] = new Axiom[0];

		axioms[132] = new Axiom[0];

		axioms[133] = new Axiom[0];

		axioms[134] = new Axiom[0];

		axioms[135] = new Axiom[0];

		axioms[136] = new Axiom[0];

		axioms[137] = new Axiom[0];

		axioms[138] = new Axiom[0];

		axioms[139] = new Axiom[0];

		axioms[140] = new Axiom[2];
		axioms[140][0] = new Axiom185(this);
		axioms[140][1] = new Axiom186(this);

		axioms[141] = new Axiom[1];
		axioms[141][0] = new Axiom187(this);

		axioms[142] = new Axiom[1];
		axioms[142][0] = new Axiom188(this);

		axioms[143] = new Axiom[2];
		axioms[143][0] = new Axiom189(this);
		axioms[143][1] = new Axiom190(this);

		axioms[144] = new Axiom[1];
		axioms[144][0] = new Axiom191(this);

		axioms[145] = new Axiom[1];
		axioms[145][0] = new Axiom192(this);

		axioms[146] = new Axiom[1];
		axioms[146][0] = new Axiom193(this);

		axioms[147] = new Axiom[0];

		axioms[148] = new Axiom[2];
		axioms[148][0] = new Axiom194(this);
		axioms[148][1] = new Axiom195(this);

		axioms[149] = new Axiom[1];
		axioms[149][0] = new Axiom196(this);

		axioms[150] = new Axiom[2];
		axioms[150][0] = new Axiom197(this);
		axioms[150][1] = new Axiom198(this);

		axioms[151] = new Axiom[0];

		axioms[152] = new Axiom[1];
		axioms[152][0] = new Axiom199(this);

		axioms[153] = new Axiom[2];
		axioms[153][0] = new Axiom200(this);
		axioms[153][1] = new Axiom201(this);

		axioms[154] = new Axiom[2];
		axioms[154][0] = new Axiom202(this);
		axioms[154][1] = new Axiom203(this);

		axioms[155] = new Axiom[6];
		axioms[155][0] = new Axiom204(this);
		axioms[155][1] = new Axiom205(this);
		axioms[155][2] = new Axiom210(this);
		axioms[155][3] = new Axiom211(this);
		axioms[155][4] = new Axiom216(this);
		axioms[155][5] = new Axiom217(this);

		axioms[156] = new Axiom[2];
		axioms[156][0] = new Axiom206(this);
		axioms[156][1] = new Axiom207(this);

		axioms[157] = new Axiom[2];
		axioms[157][0] = new Axiom208(this);
		axioms[157][1] = new Axiom209(this);

		axioms[158] = new Axiom[2];
		axioms[158][0] = new Axiom212(this);
		axioms[158][1] = new Axiom213(this);

		axioms[159] = new Axiom[2];
		axioms[159][0] = new Axiom214(this);
		axioms[159][1] = new Axiom215(this);

		axioms[160] = new Axiom[2];
		axioms[160][0] = new Axiom218(this);
		axioms[160][1] = new Axiom219(this);

		axioms[161] = new Axiom[1];
		axioms[161][0] = new Axiom220(this);

		axioms[162] = new Axiom[2];
		axioms[162][0] = new Axiom221(this);
		axioms[162][1] = new Axiom222(this);

		axioms[163] = new Axiom[2];
		axioms[163][0] = new Axiom223(this);
		axioms[163][1] = new Axiom224(this);

		axioms[164] = new Axiom[1];
		axioms[164][0] = new Axiom225(this);

		axioms[165] = new Axiom[2];
		axioms[165][0] = new Axiom226(this);
		axioms[165][1] = new Axiom227(this);

		axioms[166] = new Axiom[1];
		axioms[166][0] = new Axiom228(this);

		axioms[167] = new Axiom[1];
		axioms[167][0] = new Axiom229(this);

		axioms[168] = new Axiom[0];

		axioms[169] = new Axiom[2];
		axioms[169][0] = new Axiom230(this);
		axioms[169][1] = new Axiom231(this);

		axioms[170] = new Axiom[2];
		axioms[170][0] = new Axiom232(this);
		axioms[170][1] = new Axiom233(this);

		axioms[171] = new Axiom[1];
		axioms[171][0] = new Axiom234(this);

		axioms[172] = new Axiom[1];
		axioms[172][0] = new Axiom235(this);

		axioms[173] = new Axiom[2];
		axioms[173][0] = new Axiom236(this);
		axioms[173][1] = new Axiom237(this);

		axioms[174] = new Axiom[1];
		axioms[174][0] = new Axiom238(this);

		axioms[175] = new Axiom[1];
		axioms[175][0] = new Axiom239(this);

		axioms[176] = new Axiom[0];

		axioms[177] = new Axiom[0];

		axioms[178] = new Axiom[1];
		axioms[178][0] = new Axiom240(this);

		axioms[179] = new Axiom[0];

		axioms[180] = new Axiom[0];

		axioms[181] = new Axiom[0];

		axioms[182] = new Axiom[0];

		axioms[183] = new Axiom[0];

		axioms[184] = new Axiom[0];

		axioms[185] = new Axiom[0];

		axioms[186] = new Axiom[0];

		axioms[187] = new Axiom[0];

		axioms[188] = new Axiom[0];

		axioms[189] = new Axiom[0];

		axioms[190] = new Axiom[0];

		axioms[191] = new Axiom[0];

		axioms[192] = new Axiom[0];

		axioms[193] = new Axiom[0];

		axioms[194] = new Axiom[0];

		axioms[195] = new Axiom[0];

		axioms[196] = new Axiom[0];

		axioms[197] = new Axiom[0];

		axioms[198] = new Axiom[0];

		axioms[199] = new Axiom[0];

		axioms[200] = new Axiom[0];

		axioms[201] = new Axiom[0];

		axioms[202] = new Axiom[0];

		axioms[203] = new Axiom[0];

		axioms[204] = new Axiom[0];

		axioms[205] = new Axiom[0];

		axioms[206] = new Axiom[0];

		axioms[207] = new Axiom[0];

		axioms[208] = new Axiom[0];

		axioms[209] = new Axiom[0];

		axioms[210] = new Axiom[0];

		axioms[211] = new Axiom[0];

		axioms[212] = new Axiom[0];

		axioms[213] = new Axiom[0];

		axioms[214] = new Axiom[0];

		axioms[215] = new Axiom[0];

		axioms[216] = new Axiom[0];

		axioms[217] = new Axiom[0];

		axioms[218] = new Axiom[0];

		axioms[219] = new Axiom[0];

		axioms[220] = new Axiom[0];

		axioms[221] = new Axiom[0];

		axioms[222] = new Axiom[0];

		axioms[223] = new Axiom[0];

		axioms[224] = new Axiom[0];

		axioms[225] = new Axiom[0];

		axioms[226] = new Axiom[0];

		axioms[227] = new Axiom[0];

		axioms[228] = new Axiom[0];

		axioms[229] = new Axiom[0];

		axioms[230] = new Axiom[0];

		axioms[231] = new Axiom[0];

		axioms[232] = new Axiom[0];

		axioms[233] = new Axiom[0];

		axioms[234] = new Axiom[0];

		axioms[235] = new Axiom[0];

		axioms[236] = new Axiom[0];

		axioms[237] = new Axiom[0];

		axioms[238] = new Axiom[0];

		axioms[239] = new Axiom[0];

		axioms[240] = new Axiom[0];

		axioms[241] = new Axiom[0];

		axioms[242] = new Axiom[0];

		axioms[243] = new Axiom[0];

		axioms[244] = new Axiom[0];

		axioms[245] = new Axiom[0];

		axioms[246] = new Axiom[0];

		axioms[247] = new Axiom[0];

		axioms[248] = new Axiom[0];

		axioms[249] = new Axiom[0];

		axioms[250] = new Axiom[0];

		axioms[251] = new Axiom[0];

		axioms[252] = new Axiom[0];

		axioms[253] = new Axiom[2];
		axioms[253][0] = new Axiom241(this);
		axioms[253][1] = new Axiom242(this);

		axioms[254] = new Axiom[1];
		axioms[254][0] = new Axiom243(this);

		axioms[255] = new Axiom[0];

		axioms[256] = new Axiom[0];

		axioms[257] = new Axiom[0];

		axioms[258] = new Axiom[0];

		axioms[259] = new Axiom[0];

		axioms[260] = new Axiom[0];

		axioms[261] = new Axiom[0];

		axioms[262] = new Axiom[0];

		axioms[263] = new Axiom[0];

		axioms[264] = new Axiom[0];

		axioms[265] = new Axiom[0];

		axioms[266] = new Axiom[0];

		axioms[267] = new Axiom[0];

		axioms[268] = new Axiom[0];

		axioms[269] = new Axiom[0];

		axioms[270] = new Axiom[0];

		axioms[271] = new Axiom[0];

		axioms[272] = new Axiom[0];

		axioms[273] = new Axiom[0];

		axioms[274] = new Axiom[0];

		axioms[275] = new Axiom[0];

		axioms[276] = new Axiom[0];

		axioms[277] = new Axiom[0];

		axioms[278] = new Axiom[0];

		axioms[279] = new Axiom[0];

		axioms[280] = new Axiom[0];

		axioms[281] = new Axiom[0];

		axioms[282] = new Axiom[0];

		axioms[283] = new Axiom[0];

		axioms[284] = new Axiom[0];

		axioms[285] = new Axiom[0];

		axioms[286] = new Axiom[0];

		axioms[287] = new Axiom[0];

		axioms[288] = new Axiom[0];

		axioms[289] = new Axiom[0];

		axioms[290] = new Axiom[0];

		axioms[291] = new Axiom[0];

		axioms[292] = new Axiom[0];

		axioms[293] = new Axiom[0];

		axioms[294] = new Axiom[0];

		axioms[295] = new Axiom[0];

		axioms[296] = new Axiom[0];

		axioms[297] = new Axiom[0];

		axioms[298] = new Axiom[0];

		axioms[299] = new Axiom[0];

		axioms[300] = new Axiom[0];

		axioms[301] = new Axiom[0];

		axioms[302] = new Axiom[0];

		axioms[303] = new Axiom[0];

		axioms[304] = new Axiom[0];

		axioms[305] = new Axiom[0];

		axioms[306] = new Axiom[0];

		axioms[307] = new Axiom[0];

		axioms[308] = new Axiom[0];

		axioms[309] = new Axiom[0];

		axioms[310] = new Axiom[0];

		axioms[311] = new Axiom[0];

		axioms[312] = new Axiom[0];

		axioms[313] = new Axiom[0];

		axioms[314] = new Axiom[0];

		axioms[315] = new Axiom[0];

		axioms[316] = new Axiom[0];

		axioms[317] = new Axiom[0];

		axioms[318] = new Axiom[0];

		axioms[319] = new Axiom[0];

		axioms[320] = new Axiom[0];

		axioms[321] = new Axiom[0];

		axioms[322] = new Axiom[0];

		axioms[323] = new Axiom[0];

		axioms[324] = new Axiom[0];

		axioms[325] = new Axiom[0];

		axioms[326] = new Axiom[0];

		axioms[327] = new Axiom[0];

		axioms[328] = new Axiom[0];

		axioms[329] = new Axiom[0];

		axioms[330] = new Axiom[0];

		axioms[331] = new Axiom[0];

		axioms[332] = new Axiom[0];

		axioms[333] = new Axiom[0];

		axioms[334] = new Axiom[0];

		axioms[335] = new Axiom[0];

		axioms[336] = new Axiom[0];

		axioms[337] = new Axiom[0];

		axioms[338] = new Axiom[0];

		axioms[339] = new Axiom[0];

		axioms[340] = new Axiom[0];

		axioms[341] = new Axiom[0];

		axioms[342] = new Axiom[0];

		axioms[343] = new Axiom[0];

		axioms[344] = new Axiom[0];

		axioms[345] = new Axiom[0];

		axioms[346] = new Axiom[0];

		axioms[347] = new Axiom[0];

		axioms[348] = new Axiom[0];

		axioms[349] = new Axiom[0];

		axioms[350] = new Axiom[0];

		axioms[351] = new Axiom[0];

		axioms[352] = new Axiom[0];

		axioms[353] = new Axiom[0];

		axioms[354] = new Axiom[0];

		axioms[355] = new Axiom[0];

		axioms[356] = new Axiom[0];

		axioms[357] = new Axiom[0];

		axioms[358] = new Axiom[0];

		axioms[359] = new Axiom[0];

		axioms[360] = new Axiom[0];

		axioms[361] = new Axiom[0];

		axioms[362] = new Axiom[0];

		axioms[363] = new Axiom[0];

		axioms[364] = new Axiom[0];

		axioms[365] = new Axiom[0];

		axioms[366] = new Axiom[0];

		axioms[367] = new Axiom[0];

		axioms[368] = new Axiom[0];

		axioms[369] = new Axiom[0];

		axioms[370] = new Axiom[0];

		axioms[371] = new Axiom[0];

		axioms[372] = new Axiom[0];

		axioms[373] = new Axiom[0];

		axioms[374] = new Axiom[0];

		axioms[375] = new Axiom[0];

		axioms[376] = new Axiom[0];

		axioms[377] = new Axiom[0];

		axioms[378] = new Axiom[0];

		axioms[379] = new Axiom[0];

		axioms[380] = new Axiom[0];

		axioms[381] = new Axiom[0];

		axioms[382] = new Axiom[0];

		axioms[383] = new Axiom[0];

		axioms[384] = new Axiom[0];

		axioms[385] = new Axiom[0];

		axioms[386] = new Axiom[0];

		axioms[387] = new Axiom[0];

		axioms[388] = new Axiom[0];

		axioms[389] = new Axiom[0];

		axioms[390] = new Axiom[0];

		axioms[391] = new Axiom[0];

		axioms[392] = new Axiom[0];

		axioms[393] = new Axiom[0];

		axioms[394] = new Axiom[0];

		axioms[395] = new Axiom[0];

		axioms[396] = new Axiom[0];

		axioms[397] = new Axiom[0];

		axioms[398] = new Axiom[0];

		axioms[399] = new Axiom[0];

		axioms[400] = new Axiom[0];

		axioms[401] = new Axiom[0];

		axioms[402] = new Axiom[0];

		axioms[403] = new Axiom[0];

		axioms[404] = new Axiom[0];

		axioms[405] = new Axiom[0];

		axioms[406] = new Axiom[0];

		axioms[407] = new Axiom[0];

		axioms[408] = new Axiom[0];

		axioms[409] = new Axiom[0];

		axioms[410] = new Axiom[0];

		axioms[411] = new Axiom[0];

		axioms[412] = new Axiom[0];

		axioms[413] = new Axiom[0];

		axioms[414] = new Axiom[0];

		axioms[415] = new Axiom[0];

		axioms[416] = new Axiom[0];

		axioms[417] = new Axiom[0];

		axioms[418] = new Axiom[0];

		axioms[419] = new Axiom[0];

		axioms[420] = new Axiom[0];

		axioms[421] = new Axiom[0];

		axioms[422] = new Axiom[0];

		axioms[423] = new Axiom[0];

		axioms[424] = new Axiom[0];

		axioms[425] = new Axiom[1];
		axioms[425][0] = new Axiom244(this);

		axioms[426] = new Axiom[0];

		axioms[427] = new Axiom[0];

		axioms[428] = new Axiom[0];

		axioms[429] = new Axiom[0];

		axioms[430] = new Axiom[0];

		axioms[431] = new Axiom[0];

		axioms[432] = new Axiom[0];

		axioms[433] = new Axiom[0];

		axioms[434] = new Axiom[0];

		axioms[435] = new Axiom[0];

		axioms[436] = new Axiom[0];

		axioms[437] = new Axiom[0];

		axioms[438] = new Axiom[0];

		axioms[439] = new Axiom[0];

		axioms[440] = new Axiom[0];

		axioms[441] = new Axiom[0];

		axioms[442] = new Axiom[0];

		axioms[443] = new Axiom[0];

		axioms[444] = new Axiom[0];

		axioms[445] = new Axiom[0];

		axioms[446] = new Axiom[0];

		axioms[447] = new Axiom[0];

		axioms[448] = new Axiom[0];

		axioms[449] = new Axiom[0];

		axioms[450] = new Axiom[0];

		axioms[451] = new Axiom[0];

		axioms[452] = new Axiom[0];

		axioms[453] = new Axiom[0];

		axioms[454] = new Axiom[0];

		axioms[455] = new Axiom[0];

		axioms[456] = new Axiom[0];

		axioms[457] = new Axiom[0];

		axioms[458] = new Axiom[0];

		axioms[459] = new Axiom[0];

		axioms[460] = new Axiom[0];

		axioms[461] = new Axiom[0];

		axioms[462] = new Axiom[0];

		axioms[463] = new Axiom[0];

		axioms[464] = new Axiom[0];

		axioms[465] = new Axiom[0];

		axioms[466] = new Axiom[0];

		axioms[467] = new Axiom[0];

		axioms[468] = new Axiom[0];

		axioms[469] = new Axiom[0];

		axioms[470] = new Axiom[0];

		axioms[471] = new Axiom[0];

	}
}
